Object pointers from the new operator must usually be stored
in a gcroot-marked stack slot.

The rule for efficient marking of root slots is:
============================================================
  * If an existing pointer is live after a (possible) GC point,
    then it must exist in a marked stack slot before the point.
============================================================

Implications of this rule:
  * If a function body cannot trigger GC, then the in-params
    need not be stored in gcroot slots. Reason: the params
    are never live after a GC point, because there are no GC points.

  * If there are no GC points after a `new`, then the returned
    pointer need not be stored in a gcroot slot. Reason: there
    are no further GC roots across which the pointer must be stored.

  * If a pointer is dead after being passed to a function,
    then it need not exist in a gcroot slot after the previous
    GC point. Thus the temporary in `f(new blah)` need not be
    stored in a gcroot slot. Reason: not live for GC.

Every mutable pointer must exist in memory (usually a stack slot),
but only not every mutable pointer's stack slot need be marked
as a GC root.

Because LLVM does not compute register maps for GC use,
the stack slots containing pointers might be mutated by a
copying GC at any GC point. Therefore, the rule is that
============================================================
  * After each GC point, all live root pointers must be
    reloaded from their stack slots.
============================================================

Note that both of the above rules are defined in terms of liveness
information. In theory, there are two routes to implementing
the above rules: simple frontend + LVLM opt pass, or more complex
front-end.

  On the one hand, LLVM provides a built-in analysis to determine
liveness information, and it should be quite easy to write a
CallGraphSCCPass to determine which calls might trigger GCs.
  On the other hand, may-GC effect information may be needed
during type checking anyways, and having the front-end emit
cleaner IR makes the generated IR easier to read and understand.

With the LLVM pass approach, the front-end marks every alloca-ed ptr
slot as a GC root, and reloads every local pointer variable from its
stack slot after every potential GC point. (Potential GC points
are, conservatively, expressions containing 'new' or function calls.
A CallGraphSCCPass can later determine that many function calls 
do not constitute GC points.)

The LLVM pass then cleans up the code:
  * Reloads after falsely-assumeed GC points may be removed.

  * For each possible GC point, a pointer that is not live after the
    GC point (ignoring the existing reload) need not be reloaded,
    and does not retain the pointer's associated GC slot.

    A pointer that is live across a GC point retains the GC slot,
    preventing the gcroot marker on the slot from being removed.

  * A GC slot that is not retained may be converted back to
    a regular, unmarked slot.


Otherwise, if we don't go the LLVM IR pass approach,
then some time between type checking and codegen, we should
make temporaries explicit, probably by AST->AST transform.
Then we could  calculate variable liveness in the
lowered AST/IR, and use that to determine which pointers need to
exist in a GC stack slot (which happenis at codegen).

The main cost of making the front end smarter is likely to
be computing liveness, and maybe in making temporaries explicit.

The main cost of having LLVM do cleanup is likely to be phase
ordering issues.
