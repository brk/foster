
    f1 = { () };
    f3 = { f1 };
REC f4 = { f2 or f3 };
REC f5 = { f4 or f1 };
REC f2 = { f5 };
    f6 = { f5 };
    f7 = { f6 };

NOTE: f4 and f2 are recursive (at this stage) because typechecking needs
      an entry in the environment for checking to succeed.


    f7 = {
          f6 = {
            REC f5 = {
                  f1 = { () };      << note: f1 cannot be (as easily) contified because f3, which refers to it, is nested under f4.
                  f4 = {                     f4's only external continuation is the same as f1's, though.
                    f2 = { f5 };
                    f3 = { f1 };
                    f2 or f3 };
                  f4 or f1 };
            f5 };
      f6 };

      Note: with the functions rearranged, f2 and f4 are no longer recursive; only f5 remains recursive.


========================
      with return k params:
            REC f5 = { (r5)
                  f1 = { (r1) r1 () };      << note: f1 cannot be (as easily) contified because f3, which refers to it, is nested under f4.
                  f4 = { (r4)                     f4's only external continuation is the same as f1's, though.
                    f2 = { (r2) f5 r2 };
                    f3 = { (r3) f1 r3 };
                    f2 r4 or f3 r4 };
                  f4 r5 or f1 r5 };
            f5 };
          ==>
            REC f5 = { (r5)
                  f1 = { (r1) r1 () };
                  f2 = { (r2) f5 r2 };
                  f3 = { (r3) f1 r3 };
                  f2 r5 or f3 r5 or f1 r5 };      << f4 inlined; f3's continuation parameter changes from r4 to r5
            f5 };
          ==>
            REC f5 = { (r5)
                  f1 = { (r1) r1 () };
                  f2 = { (r2) f5 r2 };
                  cont f3 = { f1 r5 };            << f3 contified; f1 becomes contifiable
                  f2 r5 or f3 or f1 r5 };
            f5 };
          ==>
            REC f5 = { (r5)
                  cont f1 = { r5 () };            << f1 contified
                  f2 = { (r2) f5 r2 };
                  cont f3 = { f1 };
                  f2 r5 or f3 or f1 };
            f5 };


            OR



            REC f5 = { (r5)
                  f1 = { (r1) r1 () };
                  f4 = { (r4)
                    f2 = { (r2) f5 r2 };
                    cont f3 = { f1 r4 };      << f3 contified
                    f2 r4 or f3 };
                  f4 r5 or f1 r5 };
            f5 };
          ==>
            REC f5 = { (r5)
                  f1 = { (r1) r1 () };
                  f2 = { (r2) f5 r2 };
                  cont f3 = { f1 r5 };
                  f2 r5 or f3 or f1 r5 };      << f4 inlined; f1 immediately contifiable
            f5 };
====================
    f7 = {
          f6 = {
            REC f5 = {
                  cont f1 = { () };       << when f4 is inlined, f1 becomes contifiable...
                       f2 = { f5 };
                  cont f3 = { f1 };       << ... so long as f3 is as well
                  f2 or f3 or f1 };
            f5 };
      f6 };
========================

    f7 = {
          f6 = {
            REC f5 = {
                  cont f1 = { () };
                  f5 or f1 or f1 };
            f5 };
      f6 };
========================

    f1 = { () };
    f3 = { f1 };
REC f4 = { f2 or f3 };
REC f5 = { f4 or f1 };
REC f2 = { f5 or f2 };

            REC f5 = {
                  f1 = { () };
                  f4 = {
                    REC f2 = { f5 or f2 };
                    f3 = { f1 };
                    f2 or f3 };
                  f4 or f1 };
            f5 };

========================

    f1 = { () };
REC f3 = { f1 or f2 };
REC f4 = { f2 or f3 };
REC f5 = { f4 or f1 };
REC f2 = { f5 or f2 or f3 };

            REC f5 = {
                  f1 = { () };
                  f4 = {
                    REC f2 = { f5 or f2 or f3 };
                    REC f3 = { f1 or f2 };
                    f2 or f3 };
                  f4 or f1 };
            f5 };
