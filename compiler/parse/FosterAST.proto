package foster.fepb;

message SourceLocation {
  required int32 line   = 1;
  required int32 column = 2;
}

message SourceRange {
  optional string         file_path = 1;
  required SourceLocation begin     = 2;
  optional SourceLocation end       = 3;
}

message Type {
  enum Tag {
    LLVM_NAMED = 1; // i32, void, etc
    REF = 2;
    FN  = 3;
    CORO = 4;
    TUPLE = 5;
    CARRAY = 6;
    FORALL_TY = 7;
    TYPE_VARIABLE = 8;
  }

  optional SourceRange range = 1;
  required Tag         tag   = 2;

  // LLVM_NAMED, TYPE_VARIABLE
  optional string name = 3;
  optional Type ref_underlying_type = 16;
  optional FnType fnty = 17;
  // for tuple, coro, carray
  repeated Type type_parts = 18;
  optional uint64 carray_size = 19;

  repeated string tyvar_names = 20; // for FORALL_TY
}

message FnType {
  repeated Type arg_types = 1;
  required Type ret_type  = 2;
  optional string calling_convention = 3;
  optional bool   is_closure = 4;
}


message Expr {
  enum Tag {
    PB_INT = 16;
    BOOL = 17;
    VAR = 18;

    TUPLE = 20;
    FN = 21;
    PROTO = 22;
    CALL = 23;
    SEQ = 24;
    TY_APP = 25;
    SUBSCRIPT = 26;

    COMPILES = 31;
    IF = 32;

    MODULE = 35;
    NAMED_TYPE_DECL = 36;
  }
  repeated Expr        parts = 1;
  required Tag           tag = 2;
  optional Type         type = 3;
  optional SourceRange range = 4;

  optional string     int_text   = 17;
  optional Proto      proto      = 18;

  optional PBIf       pb_if      = 21;

  // Bool
  optional bool   bool_value = 23;

  // Var, Module, named type decl
  optional string name  = 24;

  // AnnTyApp
  optional Type ty_app_arg_type = 29;
}

message Proto {
  repeated Expr   in_args = 2; // really Var nodes
  optional Type   result  = 3;
  required string name    = 4;
}

message PBIf {
  required Expr test_expr = 2;
  required Expr then_expr = 3;
  required Expr else_expr = 4;
}

message SourceModule {
  repeated string line = 2;
  required Expr   expr = 3;
}
