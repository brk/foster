package foster.fepb;

message SourceLocation {
  required int32 line   = 1;
  required int32 column = 2;
}

message SourceRange {
  optional string         file_path = 1;
  required SourceLocation begin     = 2;
  required SourceLocation end       = 3;
}

message Type {
  enum Tag {
    LLVM_NAMED = 1; // i32, void, etc
    REF = 2;
    FN  = 3;
    CORO = 4;
    TUPLE = 5;
    CARRAY = 6;
    FORALL_TY = 7;
    TYPE_VARIABLE = 8;
  }

  optional SourceRange range = 1;
  required Tag         tag   = 2;

  // LLVM_NAMED, TYPE_VARIABLE
  optional string name = 3;
  optional Type ref_underlying_type = 16;
  optional FnType fnty = 17;
  // for tuple, coro, carray
  repeated Type type_parts = 18;
  optional uint64 carray_size = 19;

  repeated string tyvar_names = 20; // for FORALL_TY
}

message FnType {
  repeated Type arg_types = 1;
  required Type ret_type  = 2;
  optional string calling_convention = 3;
  optional bool   is_closure = 4;
}

message Formal {
  required string name = 1;
  required Type   type = 2;
}

message Expr {
  enum Tag {
    PB_INT    = 16;
    BOOL      = 17;
    VAR       = 18;
    LET       = 19;
    TUPLE     = 20;
    VAL_ABS   = 21;
    UNTIL     = 22;
    CALL      = 23;
    SEQ       = 24;
    TY_APP    = 25;
    SUBSCRIPT = 26;
    ALLOC     = 27;
    DEREF     = 28;
    STORE     = 29;
    CASE_EXPR = 30;
    COMPILES  = 31;
    IF        = 32;

    PAT_WILDCARD = 41;
    PAT_VARIABLE = 42;
    PAT_INT      = 43;
    PAT_BOOL     = 44;
    PAT_CTOR     = 45;
    PAT_TUPLE    = 46;
  }
  repeated Expr        parts = 1;
  required Tag           tag = 2;
  optional Type         type = 3;
  optional SourceRange range = 4;

  optional string     int_text   = 17;

  optional PBCase     pb_case    = 20;
  optional PBIf       pb_if      = 21;
  optional PBLet      pb_let     = 22;

  // Bool
  optional bool   bool_value = 23;

  // Var, named type decl
  optional string name  = 24;

  // ValAbs
  repeated Formal formals     = 25;
  optional Type   result_type = 26;

  // AnnTyApp
  optional Type ty_app_arg_type = 29;
}

message PBLet {
  repeated TermBinding binding = 1;
  required Expr        body    = 2;
  required bool   is_recursive = 3;
}

message TermBinding {
  required string name = 1;
  required Expr   body = 2;
}

message PBIf {
  required Expr test_expr = 2;
  required Expr then_expr = 3;
  required Expr else_expr = 4;
}

message PBCase {
  required Expr    scrutinee = 1;
  repeated Expr    pattern   = 2;
  repeated Expr    branch    = 3;
}

message Decl {
  required string name = 1;
  required Type   type = 2;
}

message Defn {
  required string name = 1;
  required Expr   body = 2;
}

message DataType {
  required string   name = 1;
  repeated DataCtor ctor = 2;
}

message DataCtor {
  required string   name = 1;
  repeated Type     type = 2;
}

message SourceModule {
  required string   name      = 1;
  repeated string   line      = 2;
  repeated Decl     decl      = 3;
  repeated Defn     defn      = 4;
  repeated DataType data_type = 5;
}
