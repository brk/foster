// Based on Scheme's SRFI 60, which is covered
// by the following BSD-compatible license:
/*
;;;; "logical.scm", bit access and operations for integers for Scheme
;;; Copyright (C) 1991, 1993, 2001, 2003, 2005 Aubrey Jaffer
;
;Permission to copy this software, to modify it, to redistribute it,
;to distribute modified versions, and to use it for any purpose is
;granted, subject to the following restrictions and understandings.
;
;1.  Any copy made of this software must include this copyright notice
;in full.
;
;2.  I have made no warranty or representation that the operation of
;this software will be error-free, and I am under no obligation to
;provide any services, by way of maintenance, update, or otherwise.
;
;3.  In conjunction with products arising from the use of this
;material, there shall be no use of my name in any advertising,
;promotional, or sales literature without prior written consent in
;each case.
*/
//

// Primitives provided for fixnums (8/32/64):
//
// bitand
// bitnot
// bitor
// bitxor
//
// bitlshr
// bitashr
// bitshl
//

// Uses mask to select bits from a (1-bits in mask) or b (0-bits in mask).
//
// Example: bitmerge-Int32 0b`11001100 (mask)
//                         0b`11100010 (a)
//                         0b`10100101 (b)
//                   ==>
//                         0b`11100001
//                             ^     ^
//                         from a   from b
bitmerge-Int32 = { mask:Int32 => a:Int32 => b:Int32 =>
  bitor-Int32 (bitand-Int32 a               mask)
              (bitand-Int32 b (bitnot-Int32 mask));
};

// n must be 0, 1, 2, or 3.
make-byte-Int32 :: { Int8 => % n : Int32 : n <UInt32 4 => Int32 };
make-byte-Int32 = { x => n =>
  bitpos = n *Int32 8;
  (zext_i8_to_i32 x) `bitshl-Int32` bitpos
};

clear-byte-Int32 :: { Int32 => % n : Int32 : n <UInt32 4 => Int32 };
clear-byte-Int32 = { v => n =>
  bitand-Int32 v (bitnot-Int32 (make-byte-Int32 0xff n))
};

// Replaces the n'th byte of v with x.
replace-byte-Int32 :: { Int32 => % n : Int32 : n <UInt32 4 => Int8 => Int32 };
replace-byte-Int32 = { v => n => x =>
  clear-byte-Int32 v n `bitor-Int32` (make-byte-Int32 x n)
};

replace-byte-Int32-alt :: { Int32 => % n : Int32 : n <UInt32 4 => Int8 => Int32 };
replace-byte-Int32-alt = { v => n => x =>
  bitmerge-Int32 (make-byte-Int32 0xff n) (make-byte-Int32 x n) v
};

// Extracts the n'th byte (little-endian) of v.
extract-byte-Int32 :: { Int32 => % n : Int32 : n <UInt32 4 => Int8 };
extract-byte-Int32 = { v => n =>
  bitfield-len-Int32 v (n *Int32 8) 8 |> trunc_i32_to_i8
};

extract-byte-Int32-alt = { v : Int32 => n : Int32 =>
  // Note: due to bitlshr's masking, there's no constraint on n.
  bitlshr-Int32 v (n *Int32 8) |> trunc_i32_to_i8
};

// Extracts the n'th byte (little-endian) of v.
extract-byte-Int64 :: { Int64 => % n : Int64 : n <UInt64 8 => Int8 };
extract-byte-Int64 = { v => n =>
  bitfield-len-Int64 v (n *Int64 8) 8 |> trunc_i64_to_i8
};

extract-byte-Int64-alt = { v : Int64 => n : Int64 =>
  trunc_i64_to_i8 (bitlshr-Int64 v (n *Int64 8))
};

// Preconditions:
//      fin - start <= 32
//            start <= 32
bitfield-Int32 :: { Int32 => % start : Int32 : start <UInt32 32 =>
                             % fin   : Int32 : if fin <=UInt32 32
                                                then (fin -Int32 start) <=UInt32 32
                                                else False end
                          => Int32 };
bitfield-Int32 = { n => start => fin =>
  bitfield-len-Int32 n start (fin -Int32 start)
};

// Preconditions:
//      len + start <= 32
//            start <= 32
// Example: bitfield-len-Int32 0b`1110111001100 3 8 == 10111001_2
//                                --********---
bitfield-len-Int32 :: { Int32 => % start : Int32 : start <UInt32 32 =>
                                 % len   : Int32 : if len <=UInt32 32
                                                    then (len +Int32 start) <=UInt32 32
                                                    else False end
                              => % rv : Int32 : if len <UInt32 32 then rv <UInt32 (bitshl-Int32 1 len) else True end };
bitfield-len-Int32 = { n => start => len =>
  bitand-Int32 (bitnot-Int32 (bitshl-Int32 -1 len))
               (bitlshr-Int32 n start);
};

bitfield-len-Int8 :: { Int8 => % start : Int8 : start <=UInt8 8 =>
                               % len   : Int8 : (len +Int8 start) <=UInt8 8 => Int8 };
bitfield-len-Int8 = { n => start => len =>
  // -1 << 3 == 0b1111`1000
  //  bitnot => 0b0000`0111
  //  n >> 4 == 0b0000`nnnn
  bitand-Int8 (bitnot-Int8 (bitshl-Int8 -1 len))
              (bitlshr-Int8 n start);
};

bitfield-len-Int64 :: { Int64 => % start : Int64 : start <=UInt64 64 =>
                                 % len   : Int64 : (len +Int64 start) <=UInt64 64 => Int64 };
bitfield-len-Int64 = { n => start => len =>
  bitand-Int64 (bitnot-Int64 (bitshl-Int64 -1 len))
               (bitlshr-Int64 n start);
};

any-common-bits-Int32 = { j : Int32 => k : Int32 =>
  (bitand-Int32 j k) !=Int32 0
};

bitcount-Int32 = { n : Int32 =>
  ctpop-Int32 n
};

bitlength-alt2-Int32 = { n : Int32 =>
  REC go = { n => total =>
             // This lookup table is not consistent with SRFI 60,
             // but they define both 0 and -1 as being of bit length zero,
             // which seems totally bogus.
             case n
               of 0 -> total
               of 1 -> total +Int32 1
               of 2 -> total +Int32 2
               of 3 -> total +Int32 2
               of 4 -> total +Int32 3
               of 5 -> total +Int32 3
               of 6 -> total +Int32 3
               of 7 -> total +Int32 3
               of _ -> go (bitlshr-Int32 n 4) (total +Int32 4);
             end
           };
  go n 0;
};

bitlength-alt-Int32 = { n : Int32 =>
  REC go = { n => total =>
             if n ==Int32 0
               then total
               else go (bitlshr-Int32 n 1) (total +Int32 1)
             end
           };
  go n 0
};

bitlength-Word = { n : Word =>
  (ctlz-Word 0) -Word (ctlz-Word n)
};

bitlength-Word-32 = { n : Word => n |> bitlength-Word |> trunc_Word_to_i32 };

bitlength-Int64 = { n : Int64 =>
  64 -Int64 (ctlz-Int64 n)
};

bitlength-Int32 = { n : Int32 =>
  32 -Int32 (ctlz-Int32 n)
};

bitlength-Int8 = { n : Int8 =>
  8 -Int8 (ctlz-Int8 n)
};

// Given 0, returns -1.
// Given 7, returns 3.
// Given 8, returns 4.
highest-set-bit-Int32 = { n : Int32 => n |> bitlength-Int32 |> (+Int32) -1 };

// Given 0, returns -1.
// Given 7, returns 0.
// Given 8, returns 4.
lowest-set-bit-Int32 = { n : Int32 =>
  n |> negate-Int32 |> bitand-Int32 n |> bitlength-Int32 |> (+Int32) -1
};

lowest-set-bit-Int8 = { n : Int8 =>
  n |> negate-Int8 |> bitand-Int8 n |> bitlength-Int8 |> (+Int8) -1
};

// Precondition: 0 <= index < 32
//
is-bit-set-Int32 = {  n : Int32 => index : Int32 =>
  0 !=Int32 (bitand-Int32 n
            (bitshl-Int32 1 index));
};

copy-bit-Int32 = { n : Int32 => newbit : Bool => index : Int32 =>
  if newbit
    then bitor-Int32  n               (bitshl-Int32 1 index);
    else bitand-Int32 n (bitnot-Int32 (bitshl-Int32 1 index));
  end
};

bit-reverse-Int32 = { n : Int32 =>
  REC go = { m => k => rvs =>
             if k ==Int32 0
               then rvs
               else go (bitlshr-Int32 m 1)
                       (k -Int32 1)
                       (bitor-Int32 (bitshl-Int32 rvs 1) (bitand-Int32 1 m))
            end
  };
  go n 32 0;
};

bit-reverse-Int8 :: { Int8 => Int8 };
bit-reverse-Int8 = { n =>
  REC go = { m => k => rvs =>
            if k ==Int8 0 then rvs else
              go (bitlshr-Int8 m 1)
                 (k -Int8 1)
                 (bitor-Int8 (bitshl-Int8 rvs 1) (bitand-Int8 1 m))
            end
  };
  go n 8 0;
};

/////////////////////////////////////////////////////////////////////////

rotl-Int32 :: { Int32 => Int32 => Int32 };
rotl-Int32 = { x => r =>
  bitor-Int32 (x `bitshl-Int32` r)
              (x `bitlshr-Int32` (32 -Int32 r));
};

rotl-Int64 :: { Int64 => Int64 => Int64 };
rotl-Int64 = { x => r =>
  bitor-Int64 (x `bitshl-Int64` r)
              (x `bitlshr-Int64` (64 -Int64 r));
};


rotr-Int64 :: { Int64 => (% rr : Int64 : rr <=UInt64 64) => Int64 };
rotr-Int64 = { x => r =>
  rv = bitor-Int64 (x `bitlshr-Int64` r)
              (x `bitshl-Int64` (64 -Int64 r));
  prim assert-invariants (if x !=Int64 0 then rv !=Int64 0 else True end);
  rv
};


/////////////////////////////////////////////////////////////////////////

// Precondition: n < 32 && n >= 0
getBit32 = { n => 1 `bitshl-Int32` n };

setBit32 = { v => n => v `bitor-Int32` getBit32 n };

testBit32 = { v => n => (v `bitand-Int32` getBit32 n) !=Int32 0 };

xorBit32 = { v => n => v `bitxor-Int32` getBit32 n };

xorIfBit32 = { v => n => b => if b then xorBit32 v n else v end };

// Precondition: n < 32 && n >= 0
bitmask-Int32 = { len => getBit32 len -Int32 1 };

// Like bitlshr, but oversize shifts saturate to zero instead of being no-ops.
bitlshrz-Int32 = { k => n => if n <UInt32 32 then bitlshr-Int32 k n else 0 end };

oneBeforeNextPowerOfTwo     = { n =>
  -1 `bitlshrz-Int32` (ctlz-Int32 n)
};
oneBeforeNextPowerOfTwo_alt = { n =>
  n `bitor-Int32` bitmask-Int32 (bitlength-Int32 n)
};

/////

// Computes the following function::
//     x: f(x)
//     0: 0
//     1: 1
//     2: 2
//     3: 2
//     4: 4
//     ...
//     7: 4
//     8: 8
//     9: 8
//     ...
highestBitMask-Word :: { Word => Word };
highestBitMask-Word = { x0 =>
  hb = if -1 ==Word 0xFFFF`FFFF then 31 else 63 end; // highest zero-based bit index
  bp = hb -Word ctlz-Word x0;
  1 `bitshl-Word` bp
};
