// AUTOGENERATED!
(!=Int32)            = { a : Int32    => b : Int32    => prim !=Int32 a b        }; // :: Bool
(!=Int64)            = { a : Int64    => b : Int64    => prim !=Int64 a b        }; // :: Bool
(!=Int8)             = { a : Int8     => b : Int8     => prim !=Int8 a b         }; // :: Bool
(!=Word)             = { a : Word     => b : Word     => prim !=Word a b         }; // :: Bool
(!=WordX2)           = { a : WordX2   => b : WordX2   => prim !=WordX2 a b       }; // :: Bool
(!=f64)              = { a : Float64  => b : Float64  => prim !=f64 a b          }; // :: Bool
(*Int32)             = { a : Int32    => b : Int32    => prim *Int32 a b         }; // :: Int32
(*Int64)             = { a : Int64    => b : Int64    => prim *Int64 a b         }; // :: Int64
(*Int8)              = { a : Int8     => b : Int8     => prim *Int8 a b          }; // :: Int8
(*Word)              = { a : Word     => b : Word     => prim *Word a b          }; // :: Word
(*WordX2)            = { a : WordX2   => b : WordX2   => prim *WordX2 a b        }; // :: WordX2
(*f64)               = { a : Float64  => b : Float64  => prim *f64 a b           }; // :: Float64
(+Int32)             = { a : Int32    => b : Int32    => prim +Int32 a b         }; // :: Int32
(+Int64)             = { a : Int64    => b : Int64    => prim +Int64 a b         }; // :: Int64
(+Int8)              = { a : Int8     => b : Int8     => prim +Int8 a b          }; // :: Int8
(+Word)              = { a : Word     => b : Word     => prim +Word a b          }; // :: Word
(+WordX2)            = { a : WordX2   => b : WordX2   => prim +WordX2 a b        }; // :: WordX2
(+f64)               = { a : Float64  => b : Float64  => prim +f64 a b           }; // :: Float64
(-Int32)             = { a : Int32    => b : Int32    => prim -Int32 a b         }; // :: Int32
(-Int64)             = { a : Int64    => b : Int64    => prim -Int64 a b         }; // :: Int64
(-Int8)              = { a : Int8     => b : Int8     => prim -Int8 a b          }; // :: Int8
(-Word)              = { a : Word     => b : Word     => prim -Word a b          }; // :: Word
(-WordX2)            = { a : WordX2   => b : WordX2   => prim -WordX2 a b        }; // :: WordX2
(-f64)               = { a : Float64  => b : Float64  => prim -f64 a b           }; // :: Float64
(<=SInt32)           = { a : Int32    => b : Int32    => prim <=SInt32 a b       }; // :: Bool
(<=SInt64)           = { a : Int64    => b : Int64    => prim <=SInt64 a b       }; // :: Bool
(<=SInt8)            = { a : Int8     => b : Int8     => prim <=SInt8 a b        }; // :: Bool
(<=SWord)            = { a : Word     => b : Word     => prim <=SWord a b        }; // :: Bool
(<=SWordX2)          = { a : WordX2   => b : WordX2   => prim <=SWordX2 a b      }; // :: Bool
(<=UInt32)           = { a : Int32    => b : Int32    => prim <=UInt32 a b       }; // :: Bool
(<=UInt64)           = { a : Int64    => b : Int64    => prim <=UInt64 a b       }; // :: Bool
(<=UInt8)            = { a : Int8     => b : Int8     => prim <=UInt8 a b        }; // :: Bool
(<=UWord)            = { a : Word     => b : Word     => prim <=UWord a b        }; // :: Bool
(<=UWordX2)          = { a : WordX2   => b : WordX2   => prim <=UWordX2 a b      }; // :: Bool
(<=f64)              = { a : Float64  => b : Float64  => prim <=f64 a b          }; // :: Bool
(<SInt32)            = { a : Int32    => b : Int32    => prim <SInt32 a b        }; // :: Bool
(<SInt64)            = { a : Int64    => b : Int64    => prim <SInt64 a b        }; // :: Bool
(<SInt8)             = { a : Int8     => b : Int8     => prim <SInt8 a b         }; // :: Bool
(<SWord)             = { a : Word     => b : Word     => prim <SWord a b         }; // :: Bool
(<SWordX2)           = { a : WordX2   => b : WordX2   => prim <SWordX2 a b       }; // :: Bool
(<UInt32)            = { a : Int32    => b : Int32    => prim <UInt32 a b        }; // :: Bool
(<UInt64)            = { a : Int64    => b : Int64    => prim <UInt64 a b        }; // :: Bool
(<UInt8)             = { a : Int8     => b : Int8     => prim <UInt8 a b         }; // :: Bool
(<UWord)             = { a : Word     => b : Word     => prim <UWord a b         }; // :: Bool
(<UWordX2)           = { a : WordX2   => b : WordX2   => prim <UWordX2 a b       }; // :: Bool
(<f64)               = { a : Float64  => b : Float64  => prim <f64 a b           }; // :: Bool
(==Int32)            = { a : Int32    => b : Int32    => prim ==Int32 a b        }; // :: Bool
(==Int64)            = { a : Int64    => b : Int64    => prim ==Int64 a b        }; // :: Bool
(==Int8)             = { a : Int8     => b : Int8     => prim ==Int8 a b         }; // :: Bool
(==Word)             = { a : Word     => b : Word     => prim ==Word a b         }; // :: Bool
(==WordX2)           = { a : WordX2   => b : WordX2   => prim ==WordX2 a b       }; // :: Bool
(==f64)              = { a : Float64  => b : Float64  => prim ==f64 a b          }; // :: Bool
(>=SInt32)           = { a : Int32    => b : Int32    => prim >=SInt32 a b       }; // :: Bool
(>=SInt64)           = { a : Int64    => b : Int64    => prim >=SInt64 a b       }; // :: Bool
(>=SInt8)            = { a : Int8     => b : Int8     => prim >=SInt8 a b        }; // :: Bool
(>=SWord)            = { a : Word     => b : Word     => prim >=SWord a b        }; // :: Bool
(>=SWordX2)          = { a : WordX2   => b : WordX2   => prim >=SWordX2 a b      }; // :: Bool
(>=UInt32)           = { a : Int32    => b : Int32    => prim >=UInt32 a b       }; // :: Bool
(>=UInt64)           = { a : Int64    => b : Int64    => prim >=UInt64 a b       }; // :: Bool
(>=UInt8)            = { a : Int8     => b : Int8     => prim >=UInt8 a b        }; // :: Bool
(>=UWord)            = { a : Word     => b : Word     => prim >=UWord a b        }; // :: Bool
(>=UWordX2)          = { a : WordX2   => b : WordX2   => prim >=UWordX2 a b      }; // :: Bool
(>=f64)              = { a : Float64  => b : Float64  => prim >=f64 a b          }; // :: Bool
(>SInt32)            = { a : Int32    => b : Int32    => prim >SInt32 a b        }; // :: Bool
(>SInt64)            = { a : Int64    => b : Int64    => prim >SInt64 a b        }; // :: Bool
(>SInt8)             = { a : Int8     => b : Int8     => prim >SInt8 a b         }; // :: Bool
(>SWord)             = { a : Word     => b : Word     => prim >SWord a b         }; // :: Bool
(>SWordX2)           = { a : WordX2   => b : WordX2   => prim >SWordX2 a b       }; // :: Bool
(>UInt32)            = { a : Int32    => b : Int32    => prim >UInt32 a b        }; // :: Bool
(>UInt64)            = { a : Int64    => b : Int64    => prim >UInt64 a b        }; // :: Bool
(>UInt8)             = { a : Int8     => b : Int8     => prim >UInt8 a b         }; // :: Bool
(>UWord)             = { a : Word     => b : Word     => prim >UWord a b         }; // :: Bool
(>UWordX2)           = { a : WordX2   => b : WordX2   => prim >UWordX2 a b       }; // :: Bool
(>f64)               = { a : Float64  => b : Float64  => prim >f64 a b           }; // :: Bool
bitand-Int32         = { a : Int32    => b : Int32    => prim bitand-Int32 a b   }; // :: Int32
bitand-Int64         = { a : Int64    => b : Int64    => prim bitand-Int64 a b   }; // :: Int64
bitand-Int8          = { a : Int8     => b : Int8     => prim bitand-Int8 a b    }; // :: Int8
bitand-Word          = { a : Word     => b : Word     => prim bitand-Word a b    }; // :: Word
bitand-WordX2        = { a : WordX2   => b : WordX2   => prim bitand-WordX2 a b  }; // :: WordX2
bitashr-Int32        = { a : Int32    => b : Int32    => prim bitashr-Int32 a b  }; // :: Int32
bitashr-Int64        = { a : Int64    => b : Int64    => prim bitashr-Int64 a b  }; // :: Int64
bitashr-Int8         = { a : Int8     => b : Int8     => prim bitashr-Int8 a b   }; // :: Int8
bitashr-Word         = { a : Word     => b : Word     => prim bitashr-Word a b   }; // :: Word
bitashr-WordX2       = { a : WordX2   => b : WordX2   => prim bitashr-WordX2 a b }; // :: WordX2
bitlshr-Int32        = { a : Int32    => b : Int32    => prim bitlshr-Int32 a b  }; // :: Int32
bitlshr-Int64        = { a : Int64    => b : Int64    => prim bitlshr-Int64 a b  }; // :: Int64
bitlshr-Int8         = { a : Int8     => b : Int8     => prim bitlshr-Int8 a b   }; // :: Int8
bitlshr-Word         = { a : Word     => b : Word     => prim bitlshr-Word a b   }; // :: Word
bitlshr-WordX2       = { a : WordX2   => b : WordX2   => prim bitlshr-WordX2 a b }; // :: WordX2
bitnot-Int32         = { a : Int32    => prim bitnot-Int32 a     }; // :: Int32
bitnot-Int64         = { a : Int64    => prim bitnot-Int64 a     }; // :: Int64
bitnot-Int8          = { a : Int8     => prim bitnot-Int8 a      }; // :: Int8
bitnot-Word          = { a : Word     => prim bitnot-Word a      }; // :: Word
bitnot-WordX2        = { a : WordX2   => prim bitnot-WordX2 a    }; // :: WordX2
bitor-Int32          = { a : Int32    => b : Int32    => prim bitor-Int32 a b    }; // :: Int32
bitor-Int64          = { a : Int64    => b : Int64    => prim bitor-Int64 a b    }; // :: Int64
bitor-Int8           = { a : Int8     => b : Int8     => prim bitor-Int8 a b     }; // :: Int8
bitor-Word           = { a : Word     => b : Word     => prim bitor-Word a b     }; // :: Word
bitor-WordX2         = { a : WordX2   => b : WordX2   => prim bitor-WordX2 a b   }; // :: WordX2
bitshl-Int32         = { a : Int32    => b : Int32    => prim bitshl-Int32 a b   }; // :: Int32
bitshl-Int64         = { a : Int64    => b : Int64    => prim bitshl-Int64 a b   }; // :: Int64
bitshl-Int8          = { a : Int8     => b : Int8     => prim bitshl-Int8 a b    }; // :: Int8
bitshl-Word          = { a : Word     => b : Word     => prim bitshl-Word a b    }; // :: Word
bitshl-WordX2        = { a : WordX2   => b : WordX2   => prim bitshl-WordX2 a b  }; // :: WordX2
bitxor-Int32         = { a : Int32    => b : Int32    => prim bitxor-Int32 a b   }; // :: Int32
bitxor-Int64         = { a : Int64    => b : Int64    => prim bitxor-Int64 a b   }; // :: Int64
bitxor-Int8          = { a : Int8     => b : Int8     => prim bitxor-Int8 a b    }; // :: Int8
bitxor-Word          = { a : Word     => b : Word     => prim bitxor-Word a b    }; // :: Word
bitxor-WordX2        = { a : WordX2   => b : WordX2   => prim bitxor-WordX2 a b  }; // :: WordX2
div-f64              = { a : Float64  => b : Float64  => prim div-f64 a b        }; // :: Float64
f64_to_i32           = { a : Float64  => prim f64_to_i32 a       }; // :: Int32
i32_to_f64           = { a : Int32    => prim i32_to_f64 a       }; // :: Float64
negate-Int32         = { a : Int32    => prim negate-Int32 a     }; // :: Int32
negate-Int64         = { a : Int64    => prim negate-Int64 a     }; // :: Int64
negate-Int8          = { a : Int8     => prim negate-Int8 a      }; // :: Int8
negate-Word          = { a : Word     => prim negate-Word a      }; // :: Word
negate-WordX2        = { a : WordX2   => prim negate-WordX2 a    }; // :: WordX2
not                  = { a : Bool     => prim not a              }; // :: Bool
sdiv-Int32           = { a : Int32    => b : Int32    => prim sdiv-Int32 a b     }; // :: Int32
sdiv-Int64           = { a : Int64    => b : Int64    => prim sdiv-Int64 a b     }; // :: Int64
sdiv-Int8            = { a : Int8     => b : Int8     => prim sdiv-Int8 a b      }; // :: Int8
sdiv-Word            = { a : Word     => b : Word     => prim sdiv-Word a b      }; // :: Word
sdiv-WordX2          = { a : WordX2   => b : WordX2   => prim sdiv-WordX2 a b    }; // :: WordX2
sext_i32_to_Word     = { a : Int32    => prim sext_i32_to_Word a }; // :: Word
sext_i32_to_i64      = { a : Int32    => prim sext_i32_to_i64 a  }; // :: Int64
sext_i8_to_i32       = { a : Int8     => prim sext_i8_to_i32 a   }; // :: Int32
sext_i8_to_i64       = { a : Int8     => prim sext_i8_to_i64 a   }; // :: Int64
sqrt-f64             = { a : Float64  => prim sqrt-f64 a         }; // :: Float64
srem-Int32           = { a : Int32    => b : Int32    => prim srem-Int32 a b     }; // :: Int32
srem-Int64           = { a : Int64    => b : Int64    => prim srem-Int64 a b     }; // :: Int64
srem-Int8            = { a : Int8     => b : Int8     => prim srem-Int8 a b      }; // :: Int8
srem-Word            = { a : Word     => b : Word     => prim srem-Word a b      }; // :: Word
srem-WordX2          = { a : WordX2   => b : WordX2   => prim srem-WordX2 a b    }; // :: WordX2
trunc_WordX2_to_Word = { a : WordX2   => prim trunc_WordX2_to_Word a }; // :: Word
trunc_WordX2_to_i32  = { a : WordX2   => prim trunc_WordX2_to_i32 a }; // :: Int32
trunc_Word_to_i32    = { a : Word     => prim trunc_Word_to_i32 a }; // :: Int32
trunc_i32_to_i8      = { a : Int32    => prim trunc_i32_to_i8 a  }; // :: Int8
trunc_i64_to_Word    = { a : Int64    => prim trunc_i64_to_Word a }; // :: Word
trunc_i64_to_i32     = { a : Int64    => prim trunc_i64_to_i32 a }; // :: Int32
udiv-Int32           = { a : Int32    => b : Int32    => prim udiv-Int32 a b     }; // :: Int32
udiv-Int64           = { a : Int64    => b : Int64    => prim udiv-Int64 a b     }; // :: Int64
udiv-Int8            = { a : Int8     => b : Int8     => prim udiv-Int8 a b      }; // :: Int8
udiv-Word            = { a : Word     => b : Word     => prim udiv-Word a b      }; // :: Word
udiv-WordX2          = { a : WordX2   => b : WordX2   => prim udiv-WordX2 a b    }; // :: WordX2
urem-Int32           = { a : Int32    => b : Int32    => prim urem-Int32 a b     }; // :: Int32
urem-Int64           = { a : Int64    => b : Int64    => prim urem-Int64 a b     }; // :: Int64
urem-Int8            = { a : Int8     => b : Int8     => prim urem-Int8 a b      }; // :: Int8
urem-Word            = { a : Word     => b : Word     => prim urem-Word a b      }; // :: Word
urem-WordX2          = { a : WordX2   => b : WordX2   => prim urem-WordX2 a b    }; // :: WordX2
zext_Word_to_WordX2  = { a : Word     => prim zext_Word_to_WordX2 a }; // :: WordX2
zext_Word_to_i64     = { a : Word     => prim zext_Word_to_i64 a }; // :: Int64
zext_i32_to_Word     = { a : Int32    => prim zext_i32_to_Word a }; // :: Word
zext_i32_to_WordX2   = { a : Int32    => prim zext_i32_to_WordX2 a }; // :: WordX2
zext_i32_to_i64      = { a : Int32    => prim zext_i32_to_i64 a  }; // :: Int64
zext_i8_to_i32       = { a : Int8     => prim zext_i8_to_i32 a   }; // :: Int32
zext_i8_to_i64       = { a : Int8     => prim zext_i8_to_i64 a   }; // :: Int64

