snafuinclude List "data/list";
snafuinclude Lazy "control/lazy";
snafuinclude Ord  "ord";
snafuinclude Maybe "maybe";

// Bootstrapped queues based on the code from Okasaki's book (p. 149).

type case BootstrappedQueue (elem:Type)
      of $BootstrappedQueueE
      of $BootstrappedQueueQ Int32 (List elem)
                             (BootstrappedQueue (Lazy (List elem)))
                             Int32 (List elem)
      ;

mkEmptyBootstrappedQueue :: forall (a:Type) { BootstrappedQueue a };
mkEmptyBootstrappedQueue = { forall a:Type,
  BootstrappedQueueE
};

bootstrappedQueueHead :: forall (a:Type) { BootstrappedQueue a => Maybe a };
bootstrappedQueueHead = { forall a:Type, h =>
  case h
    of $BootstrappedQueueE -> None
    of $BootstrappedQueueQ _ ($Nil)      _ _ _ -> prim kill-entire-process "bqHead: invariant violated";
    of $BootstrappedQueueQ _ ($Cons x _) _ _ _ -> Some x
  end
};

bootstrappedQueueTail :: forall (a:Type) { BootstrappedQueue a => Maybe (BootstrappedQueue a) };
bootstrappedQueueTail = { forall a:Type, h =>
  case h
    of $BootstrappedQueueE -> None
    of $BootstrappedQueueQ _ ($Nil)      _ _ _ -> prim kill-entire-process "bqTail: invariant violated";
    of $BootstrappedQueueQ lenfm ($Cons x f) m lenr r ->
        Some (bootstrappedQueueCheckQ (lenfm -Int32 1) f m lenr r)
  end
};

bootstrappedQueueSplit :: forall (a:Type) { BootstrappedQueue a => Maybe (a, BootstrappedQueue a) };
bootstrappedQueueSplit = { forall a:Type, h =>
  case h
    of $BootstrappedQueueE -> None
    of $BootstrappedQueueQ _ ($Nil)      _ _ _ -> prim kill-entire-process "bqSplit: invariant violated";
    of $BootstrappedQueueQ lenfm ($Cons x f) m lenr r ->
        Some (x, bootstrappedQueueCheckQ (lenfm -Int32 1) f m lenr r)
  end
};

bootstrappedQueueSnoc :: forall (a:Type) { a => BootstrappedQueue a => BootstrappedQueue a };
bootstrappedQueueSnoc = { forall a:Type, e => h =>
  case h
    of $BootstrappedQueueE ->
        BootstrappedQueueQ 1 (Cons e Nil) BootstrappedQueueE 0 Nil
        // Note: replacing BootstrappedQueueE with h results in an occurs
        // check error, even though they are the same value at runtime;
        // h                    :: BootstrappedQueue a
        // BootstrappedQueueE :: forall elem, BootstrappedQueue elem
    of $BootstrappedQueueQ lenfm f m lenr r ->
        bootstrappedQueueCheckQ lenfm f m (lenr +Int32 1) (Cons e r)
  end
};

bootstrappedQueueCheckQ :: forall (elem:Type) {
   Int32 => (List elem) => (BootstrappedQueue (Lazy (List elem))) =>
   Int32 => (List elem) =>  BootstrappedQueue elem
};
bootstrappedQueueCheckQ = { forall a:Type, lenfm => f => m => lenr => r =>
  if lenr <=SInt32 lenfm
    then bootstrappedQueueCheckF lenfm f m lenr r
    else bootstrappedQueueCheckF (lenfm +Int32 lenr) f
                                 (bootstrappedQueueSnoc (delay { listReverse r }) m)
                                 0                 Nil
  end
};

bootstrappedQueueCheckF :: forall (elem:Type) {
    Int32 => (List elem) => (BootstrappedQueue (Lazy (List elem))) =>
    Int32 => (List elem) =>  BootstrappedQueue elem
};
bootstrappedQueueCheckF = { forall a:Type, lenfm => f => m => lenr => r =>
  case f
    of $Nil ->
        case m
          of $BootstrappedQueueE -> BootstrappedQueueE
          of _ -> BootstrappedQueueQ lenfm (force (unMaybe (bootstrappedQueueHead m)))
                                                  (unMaybe (bootstrappedQueueTail m)) lenr r
        end
    of _ -> BootstrappedQueueQ lenfm f m lenr r
  end
};
