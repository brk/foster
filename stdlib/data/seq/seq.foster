snafuinclude FingerTree "data/finger-tree";
snafuinclude Maybe "maybe";

type case Seq (a:Type)
      of $Seq (FingerTree a)
      ;

// Time: O(1)
// Heap: may or may not dynamically allocate.
seqEmpty :: forall (a:Type) { Seq a };
seqEmpty = { Seq FT_Empty };

// Time, Heap: O(1)
seqSingleton :: forall (a:Type) { a => Seq a };
seqSingleton = { x => Seq (FT_Single x) };

// Time, Heap: O(log n)
seqReplicate32 :: forall (a:Type)
                   { % n : Int32 : n >=SInt32 0
                    => a => Seq a };
seqReplicate32 = { vn => va =>
  //TODO swapping the args results in a less-than-ideal error message
  //Seq (ftReplicate32 vn 1 va)

  Seq (ftReplicate32 vn va 1)
};

// Time: amortized O(1)
seqPrepend :: forall (a:Type) { a => Seq a => Seq a };
seqPrepend = { x => seq =>
  let ($Seq xs) = seq;
  Seq (ftConsTreeE x xs)
};

// Time: amortized O(1)
seqPostpend :: forall (a:Type) { Seq a => a => Seq a };
seqPostpend = { seq => x =>
  let ($Seq xs) = seq;
  Seq (ftSnocTreeE xs x)
};

// Time: O(1)
// Heap: none
seqIsEmpty :: forall (a:Type) { Seq a => Bool };
seqIsEmpty = { seq =>
  let ($Seq xs) = seq;
  case xs
    of $FT_Empty -> True
    of _ -> False
  end
};

// Time, Heap: O(log(min(n1, n2)))
seqConcat :: forall (a:Type) { Seq a => Seq a => Seq a };
seqConcat = { s1 => s2 =>
  let ($Seq xs, $Seq ys) = (s1, s2);
  Seq (ftAppendTree0 ftElemSize xs ys)
};

seqLength :: forall (a:Type) { Seq a => Int32 };
seqLength = { seq => let ($Seq xs) = seq; ftTreeSize ftElemSize xs };

seqLength32 :: forall (a:Type) { Seq a => Int32 };
seqLength32 = { seq => let ($Seq xs) = seq; ftTreeSize ftElemSize xs };

type case SeqViewR (a:Type)
      of $SV_EmptyR
      of $SV_Snoc (Seq a) a
      ;

type case SeqViewL (a:Type)
      of $SV_EmptyL
      of $SV_Cons a (Seq a)
      ;

seqViewL :: forall (a:Type) { Seq a => SeqViewL a };
seqViewL = { seq => let ($Seq xs) = seq;
  case ftViewL ftElemSize xs
    of $FT_EmptyL    -> SV_EmptyL
    of $FT_Cons a ft -> SV_Cons a (Seq ft)
  end
};

seqViewR :: forall (a:Type) { Seq a => SeqViewR a };
seqViewR = { seq => let ($Seq xs) = seq;
  case ftViewR ftElemSize xs
    of $FT_EmptyR    -> SV_EmptyR
    of $FT_Snoc ft a -> SV_Snoc (Seq ft) a
  end
};

seqSplitAt :: forall (a:Type) { Seq a => Int32 => (Seq a, Seq a) };
seqSplitAt = { seq => i =>
  case seq
    of ($Seq ($FT_Empty)) -> (Seq FT_Empty, Seq FT_Empty)
    of ($Seq xs) ->
      if i >=SInt32 seqLength seq
        then (Seq xs, Seq FT_Empty)
        else let ($FT_Split l x r) = ftSplitTree ftElemSize i xs;
             (Seq l, Seq (ftConsTreeE x r))
      end
  end
};

seqDrop :: forall (a:Type) { Seq a => Int32 => Seq a };
seqDrop = { seq => n =>
  let (_head, tail) = seqSplitAt seq n; tail
};

seqKeep :: forall (a:Type) { Seq a => Int32 => Seq a };
seqKeep = { seq => n =>
  let (head, _tail) = seqSplitAt seq n; head
};

// TODO: translate negative numbers into index-from-rear.
seqIndex :: forall (a:Type) { Seq a => Int32 => Maybe a };
seqIndex =  { seq => idx =>
  let ($Seq ft) = seq;
  ftIndex ftElemSize ft idx;
};

seqChunk :: forall (a:Type) { Seq a => Int32 => Seq (Seq a) };
seqChunk = { seq => chunkSize =>
  REC loop = { remainder => acc =>
    case ()
      of _ if seqIsEmpty remainder -> acc
      of _ if seqLength remainder <=SInt32 chunkSize ->
        seqPostpend acc remainder
      of _ ->
        let (head, tail) = seqSplitAt remainder chunkSize;
        loop tail (seqPostpend acc head)
    end
  };
  loop seq (seqEmpty !)
};

seqWithout :: forall (a:Type) { Seq a => { a => Bool } => Seq a };
seqWithout = { seq => pred =>
  REC loop = { ft => acc =>
    case ftViewL ftElemSize ft
      of $FT_EmptyL -> acc
      of $FT_Cons e rest ->
        if pred e
          then loop rest acc
          else loop rest (seqPostpend acc e)
        end
    end
  };
  loop (unSeq seq) (seqEmpty !)
};

seqWhere :: forall (a:Type) { Seq a => { a => Bool } => Seq a };
seqWhere = { seq => pred =>
  seqWithout seq { e => e |> pred |> not }
};

// Returns the sub-sequence of values which appear in the left array only.
// O(n * m)
seqLeftDifferenceEq :: forall (a:Type) { Seq a => Seq a => { a => a => Bool } => Seq a };
seqLeftDifferenceEq = { left => right => eq =>
  left `seqWithout` { elt => seqContainsAny right { x => eq elt x } }
};

seqCountWhere :: forall (a:Type) { Seq a => { a => Bool } => Int32 };
seqCountWhere = { seq => pred =>
  counter = { elt => count =>
    if pred elt then count +Int32 1 else count end
  };
  ftFoldlTree counter (unSeq seq) 0
};

// TODO rewrite to reduce time and space usage, using seqFind.
seqContainsAny :: forall (a:Type) { Seq a => { a => Bool } => Bool };
seqContainsAny = { seq => pred =>
  seqCountWhere seq pred >UInt32 0
  //seqWhere seq pred |> seqIsEmpty |> not
};

// Returns a pair of (e, idx) for the 
seqFindFirstIndex :: forall (a:Type) { Seq a => { a => Bool } => Maybe (a, Int32) };
seqFindFirstIndex = { seq => pred =>
  REC loop = { ft => idx =>
    case ftViewL ftElemSize ft
      of $FT_EmptyL -> None
      of $FT_Cons e rest ->
        if pred e
          then Some (e, idx)
          else loop rest (idx +Int32 1)
        end
    end
  };
  loop (unSeq seq) 0
};

unSeq = { forall a:Type, seq : Seq a =>
  let ($Seq ft) = seq; ft
};

// Precondition: input sequence is sorted according to the given ordering.
//
// Returns a pair of positions (L, H) identifying the range
// which does (or would) contain the given element.
//
// Time: O(lg n)
//
// Example elt => output mappings for [0, 2, 2, 4, 4, 4, 4, 6, 6, 6]:
//    0 => (0, 1)
//    1 => (1, 1)
//    2 => (1, 3)
//    6 => (7, 10)
seqSortedRange :: forall (a:Type) { Seq a => a => { a => a => Ord } => (Int32, Int32) };
seqSortedRange = { seq => elt => ord =>
  lo = seqHighestPositionLT seq elt ord;
  hi = seqLowestPositionGT seq elt ord;
  (lo, hi)
};

seqHighestPositionLT :: forall (a:Type) { Seq a => a => { a => a => Ord } => Int32 };
seqHighestPositionLT = { seq => elt => ord =>
  goLow = isLE;
  seqFindPositionBiased seq elt ord goLow True;
};

seqLowestPositionGT :: forall (a:Type) { Seq a => a => { a => a => Ord } => Int32 };
seqLowestPositionGT = { seq => elt => ord =>
  goLow = isLT;
  seqFindPositionBiased seq elt ord goLow False;
};

// Note that zero refers to the position before index 0,
// and 1 refers to the position after index 0.
seqFindPositionBiased :: forall (a:Type) { Seq a => a => { a => a => Ord } => { Ord => Bool } => Bool => Int32 };
seqFindPositionBiased = { seq => elt => ord => goLow => biasLow =>
  REC loop = { lo => hi =>
    // Invariant: lo marks (before) the highest known index to be LT elt.
    // Invariant: hi marks (after)  the lowest known index to be GT elt.
    case hi -Int32 lo
      of 0 -> lo // range shrunk to zero size, nowhere else to go!
      of 1 ->
        // Do we go before or after the element where we are?
        midElt = seqIndex seq lo |> unMaybe;
        case elt `ord` midElt
          of $LT -> lo
          of $EQ -> if biasLow then lo else hi end
          of $GT -> hi
        end
      of rangeSize ->
        lowerDelta = rangeSize `bitashr-Int32` 1;
        midIdx = lo +Int32 lowerDelta;
        midElt = seqIndex seq midIdx |> unMaybe;
        if elt `ord` midElt |> goLow
          then loop lo midIdx
          else loop midIdx hi
        end
    end
  };
  loop 0 (seqLength seq)
};

seqPrefixSumFromLeftInclusiveSerial :: forall (a:Type) { Seq a => { a => a => a } => Seq a };
seqPrefixSumFromLeftInclusiveSerial = { seq => op =>
  if seqLength seq <=UInt32 1 then seq else
    REC loop = { headElt : a => tail : Seq a => acc : Seq a =>
      case seqViewL tail
        of $SV_EmptyL      -> acc
        of $SV_Cons x rest -> next = op headElt x;
                              loop next rest (seqPostpend acc next)
      end
    };  

    let (head, tail) = seqSplitAt seq 1;
    loop (seqIndex head 0 |> unMaybe) tail head;
  end
};

seqPrefixSumFromLeftExclusiveSerial :: forall (a:Type) (b:Type) { Seq a => { b => a => b } => b => Seq b };
seqPrefixSumFromLeftExclusiveSerial = { seq => op => elt =>
  REC loop = { headElt : b => tail : Seq a => acc : Seq b =>
    case seqViewL tail
      of $SV_EmptyL      -> acc
      of $SV_Cons x rest -> next = op headElt x;
                            loop next rest (seqPostpend acc next)
    end
  };  

  loop elt seq (seqEmpty !);
};

seqFold :: forall (a:Type) (b:Type) { Seq a => { a => b => b } => b => b };
seqFold = { seq => combine => init =>
  ftFoldlTree combine (unSeq seq) init
};

seqEnum :: forall (a:Type) { Seq a => { a => () } => () };
seqEnum = { seq => action =>
  ftFoldlTree { a => u => action a } (unSeq seq) ()
};

seqReverse :: forall (a:Type) { Seq a => Seq a };
seqReverse =  { seq =>
  seqReverseWith seq { x : a => x }
};

seqReverseWith :: forall (a:Type) { Seq a => { a => a } => Seq a };
seqReverseWith =  { seq => reverser =>
  let ($Seq ft) = seq;
  Seq (ftReverseTree reverser ft)
};

seqFromFunction :: forall (a:Type) { Int32 => { Int32 => a } => Seq a };
seqFromFunction = { len => f =>
  Seq (ftFromFunction len f)
};

seqOfArray :: forall (a:Type) { Array a => Seq a };
seqOfArray = { arr =>
  seqFromFunction (arrayLength32 arr) { idx => arr.[idx] };
};

seqToArray :: forall (a:Type) { Seq a => Array a };
seqToArray = { seq =>
  let ($Seq ft) = seq;
  ftToArray ftElemSize ft
};

ftConsTreeE :: forall (a:Type) { a => FingerTree a => FingerTree a };
ftConsTreeE = { e => ft => ftConsTreeS ftElemSize e ft };

ftSnocTreeE :: forall (a:Type) { FingerTree a => a => FingerTree a };
ftSnocTreeE = { ft => e => ftSnocTreeS ftElemSize ft e };
