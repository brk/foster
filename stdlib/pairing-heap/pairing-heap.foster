snafuinclude List "list";
snafuinclude Ord  "ord";
snafuinclude Maybe "maybe";

// Pairing heaps based on the code from Okasaki's book (p.54).

type case PairingHeap (elem:Type)
      of $PairingHeapE
      of $PairingHeapT elem (List PairingHeap)
      ;

mkEmptyPairingHeap :: forall a:Type, { PairingHeap a };
mkEmptyPairingHeap = { forall a:Type,
  PairingHeapE
};

/*
// Mostly to set the stage for _alt_2, we can introduce a trivial unit arg:
mkEmptyPairingHeap_alt_1 :: forall a:Type, { () => PairingHeap a };
mkEmptyPairingHeap_alt_1 = { forall a:Type, unit =>
  PairingHeapE
};

// This definition makes sense, but I'm pretty sure it won't type check.
mkEmptyPairingHeap_alt_2 :: { () => forall a:Type, PairingHeap a };
mkEmptyPairingHeap_alt_2 = { unit =>
  PairingHeapE
};
*/

pairingHeapMerge :: forall a:Type, { { a => a => Ord } => PairingHeap a => PairingHeap a => PairingHeap a };
pairingHeapMerge = { forall a:Type, cmp => pa => pb =>
  case (pa, pb)
    of ($PairingHeapE, _) -> pb
    of (_, $PairingHeapE) -> pa
    of ($PairingHeapT ea la, $PairingHeapT eb lb) ->
      case cmp ea eb
        of $GT -> PairingHeapT eb (Cons pa lb)
        of _   -> PairingHeapT ea (Cons pb la)
      end
  end
};

pairingHeapInsertSimple :: forall a:Type, { { a => a => Ord } => a => PairingHeap a => PairingHeap a };
pairingHeapInsertSimple = { forall a:Type, cmp => e => h =>
  pairingHeapMerge cmp (PairingHeapT e Nil) h
};

// TODO benchmark difference between pairingHeapInsertSimple and pairingHeapInsert.
// The main benefit (once Nil does not allocate) would be saving
// an allocation of a heap node on one branch.
pairingHeapInsert :: forall a:Type, { { a => a => Ord } => a => PairingHeap a => PairingHeap a };
pairingHeapInsert = { forall a:Type, cmp => e => h =>
  case h
    of $PairingHeapE -> PairingHeapT e Nil
    of $PairingHeapT eb lb ->
      case cmp e eb
        of $GT -> pa = PairingHeapT e Nil;
                  PairingHeapT eb (Cons pa lb)
        of _   -> PairingHeapT e  (Cons h Nil)
      end
  end
};

pairingHeapMergePairs :: forall a:Type, { { a => a => Ord } => List (PairingHeap a) => PairingHeap a };
pairingHeapMergePairs = { forall a:Type, cmp => l =>
  case l
    of ($Nil)                   -> PairingHeapE
    of ($Cons h  ($Nil))        -> h
    of ($Cons h1 ($Cons h2 hs)) ->
      pairingHeapMerge cmp
         (pairingHeapMerge cmp h1 h2)
         (pairingHeapMergePairs cmp hs)
  end
};

pairingHeapFindMin :: forall a:Type, { PairingHeap a => Maybe a };
pairingHeapFindMin = { forall a:Type, h =>
  case h
    of $PairingHeapE -> None
    of $PairingHeapT e _ -> Some e
  end
};

pairingHeapDeleteMin :: forall a:Type, { { a => a => Ord } => PairingHeap a => Maybe (PairingHeap a) };
pairingHeapDeleteMin = { forall a:Type, cmp => h =>
  case h
    of $PairingHeapE -> None
    of $PairingHeapT _ l -> Some (pairingHeapMergePairs cmp l)
  end
};

pairingHeapToSortedList :: forall a:Type, { { a => a => Ord } => PairingHeap a => List a };
pairingHeapToSortedList = { forall a:Type, cmp => h =>
  case h
    of $PairingHeapE -> Nil
    of $PairingHeapT e l -> Cons e (pairingHeapToSortedList cmp (pairingHeapMergePairs cmp l))
  end
};

pairingHeapToSortedListIter :: forall a:Type, { { a => a => Ord } => PairingHeap a => List a };
pairingHeapToSortedListIter = { forall a:Type, cmp => h =>
  REC go = { h => acc =>
      case h
        of $PairingHeapE -> acc
        of $PairingHeapT e l ->
            go (pairingHeapMergePairs cmp l) (Cons e acc);
      end
  };
  go h Nil
};

pairingHeapFromList :: forall a:Type, { { a => a => Ord } => List a => PairingHeap a };
pairingHeapFromList = { forall a:Type, cmp => lst =>
  REC go = { lst => ph =>
    case lst
      of $Nil -> ph
      of $Cons h t -> go t (pairingHeapInsertSimple cmp h ph)
    end
  };
  go lst (mkEmptyPairingHeap !)
};

listSortViaPairingHeapWith :: forall a:Type, { { a => a => Ord } => List a => List a };
listSortViaPairingHeapWith = { forall a:Type, cmp => lst =>
  pairingHeapToSortedList cmp (pairingHeapFromList cmp lst)
};
