
// Precondition: fst >= fin
// Folds fst, fst - 1, ..., fin + 1, fin.
//   That is: fst and fin both inclusive.
foldRangeDown = { forall t:Type,
              fst : Int32 =>
              fin : Int32 =>
              init : t =>
              iter : { Int32 => t => t } =>
  REC go = { n : Int32 => acc : t =>
                if n <SInt32 fin then acc else
                  go (n -Int32 1) (iter n acc)
                end
            };
  go fst init
};

// Precondition: fst <= fin
// Note: fst inclusive, fin exclusive.
//
foldRange = { forall t:Type,
              fst : Int32 =>
              fin : Int32 =>
              init : t =>
              iter : { Int32 => t => t } =>
  REC go = { n : Int32 => acc : t =>
      if n >=SInt32 fin then acc else
        go (n +Int32 1) (iter n acc)
      end
  };
  go fst init;
};

// Precondition: fst <= fin
//
foldRange64 = { forall t:Type,
                  fst : Int64 =>
                  fin : Int64 =>
                  init : t =>
                  iter : { Int64 => t => t } =>
  REC go = { n : Int64 => acc : t =>
      if n >=SInt64 fin then acc else
        go (n +Int64 1) (iter n acc)
      end
  };
  go fst init;
};

// Precondition: fst <= fin
// Note: fst inclusive, fin exclusive.
//
foldRangeInc32 = { forall t:Type,
              fst : Int32 =>
              fin : Int32 =>
              init : t =>
              iter : { Int32 => t => t } =>
  REC go = { n : Int32 => acc : t =>
      if n <=SInt32 fin then go (n +Int32 1) (iter n acc) else acc end
  };
  go fst init;
};

// Precondition: fst <= fin
//
foldRangeInc64 = { forall t:Type,
                  fst : Int64 =>
                  fin : Int64 =>
                  init : t =>
                  iter : { Int64 => t => t } =>
  REC go = { n : Int64 => acc : t =>
      if n <=SInt64 fin then go (n +Int64 1) (iter n acc) else acc end
  };
  go fst init;
};

// Precondition: fst <= fin
//
// Folds fst, fst + 1, ... , fin - 1
foldRangeWord = { forall t:Type,
                  fst : Word =>
                  fin : Word =>
                  init : t =>
                  iter : { Word => t => t } =>
  REC go = { n : Word => acc : t =>
      if n >=SWord fin then acc else
        go (n +Word 1) (iter n acc)
      end
  };
  go fst init;
};

foldRangeByFloat64 = { forall t:Type,
                  fst : Float64 =>
                  fin : Float64 =>
                  init : t =>
                  incr : Float64 =>
                  iter : { Float64 => t => t } =>
  REC go = { n : Float64 => acc : t =>
      if n >=f64 fin then acc else
        go (n +f64 incr) (iter n acc)
      end
  };
  go fst init;
};

/////

// Precondition: fst <= fin
// Note: fst inclusive, fin exclusive.
enumRange32 = { fst : Int32 =>
              fin : Int32 =>
              iter : { Int32 => () } =>
  foldRange fst fin () { i => u => iter i }
};

enumRange64 = { fst : Int64 =>
                fin : Int64 =>
                iter : { Int64 => () } =>
  foldRange64 fst fin () { i => u => iter i }
};

enumRangeInc32 = { fst : Int32 =>
              fin : Int32 =>
              iter : { Int32 => () } =>
  foldRangeInc32 fst fin () { i => u => iter i }
};

enumRangeInc64 = { fst : Int64 =>
              fin : Int64 =>
              iter : { Int64 => () } =>
  foldRangeInc64 fst fin () { i => u => iter i }
};

enumRangeWord = { fst : Word =>
                  fin : Word =>
                  iter : { Word => () } =>
  foldRangeWord fst fin () { i => u => iter i }
};

/////

arrayFoldl :: forall (t:Type) (a:Type) { Array t => { t => a => a } => a => a };
arrayFoldl = { arr => f => acc =>
  arrayFoldlFrom arr 0 f acc
};

arrayFoldlFrom :: forall (t:Type) (a:Type) { Array t => Int32 => { t => a => a } => a => a };
arrayFoldlFrom = { arr => offset => f => acc =>
  arrayFoldlFromTo arr offset (arrayLength32 arr) f acc
};

arrayFoldlFromTo :: forall (t:Type) (a:Type) { Array t => Int32 => Int32 => { t => a => a } => a => a };
arrayFoldlFromTo = { arr => fst => fin => f => acc =>
  foldRange fst fin acc { n : Int32 => acc => f arr.[n] acc }
};

arrayFoldlFromTo64 :: forall (t:Type) (a:Type) { Array t => Int64 => Int64 => { t => a => a } => a => a };
arrayFoldlFromTo64 = { arr => fst => fin => f => acc =>
  foldRange64 fst fin acc { n => acc => f arr.[trunc_i64_to_i32 n] acc }
};

arrayFoldlWithIndex64 :: forall (t:Type) (a:Type) { Array t => { Word => t => a => a } => a => a };
arrayFoldlWithIndex64 = { arr => f => acc =>
  arrayFoldlFromToWithIndex64 arr 0 (arrayLength arr) f acc
};

arrayFoldlFromToWithIndex64 :: forall (t:Type) (a:Type) {
              Array t => Int64 => Int64 => { Word => t => a => a } => a => a };
arrayFoldlFromToWithIndex64 = { arr => fst => fin => f => acc =>
  foldRange64 fst fin acc { n => acc => f (trunc_i64_to_Word n) arr.[trunc_i64_to_i32 n] acc }
};

////

arrayFoldr :: forall (t:Type) (a:Type) { Array t => { t => a => a } => a => a };
arrayFoldr = { arr => f => acc =>
  foldRangeDown (arrayLength32 arr -Int32 1) 0 acc { n : Int32 => acc => f arr.[n] acc }
};

////

arrayEq :: forall (x:Type) { Array x => Array x => { x => x => Bool } => Bool };
arrayEq = { a1 => a2 => eq =>
  if arrayLength a1 !=Int64 arrayLength a2
    then False
    else
      REC go = { idx =>
        if idx ==Int64 arrayLength a1
          then True
          else if eq a1.[idx] a2.[idx]
                 then go (incr64 idx)
                 else False
               end
        end
      };
      go 0
  end
};

////

arrayLength :: forall (x:Type) { % ra : Array x : True =>
                                 % rv : Int64 : rv ==Int64 prim_arrayLength:[x] ra };
arrayLength = { a : Array x => prim_arrayLength a };

arrayLength32 :: forall (x:Type) { % ra : Array x : True =>
                                   % rv : Int32 : rv ==Int32 trunc_i64_to_i32 (prim_arrayLength:[x] ra) };
arrayLength32 = { a : Array x => trunc_i64_to_i32 (prim_arrayLength a) };

arrayLengthWord :: forall (x:Type) { % ra : Array x : True =>
                                     % rv : Word : rv ==Word trunc_i64_to_Word (prim_arrayLength:[x] ra) };
arrayLengthWord = { a : Array x => trunc_i64_to_Word (prim_arrayLength a) };


incr64 = { n : Int64 => n +Int64 1 };

arrayEnumFromTo = { forall t:Type,
                  a : Array t =>
                  k : Int64 =>
                  x : Int64 =>
                  f : { t => Int64 => () } =>
  if k <SInt64 x
    then f a.[trunc_i64_to_i32 k] k;
         arrayEnumFromTo a (incr64 k) x f
  end
};

arrayEnumFrom = { forall t:Type,
                  a : Array t =>
                  k : Int64 =>
                  f : { t => Int64 => () } =>
  arrayEnumFromTo a k (arrayLength a) f
};

arrayEnum = { forall t:Type,
              a : Array t =>
              f : { t => Int64 => () } =>
  arrayEnumFromTo a 0 (arrayLength a) f
};

/*
arrayEach = { forall t:Type,
              a : Array t =>
              f : { t => () } =>
  arrayEnum a { ign:Int64 => v:t => f v };
};
*/

arrayFoldFrom = { forall t:Type r:Type,
                  a : Array t =>
                  k : Int64 =>
                  f : { t => Int64 => r => r } =>
                  acc : r =>
  if k <SInt64 prim_arrayLength a
    then arrayFoldFrom a (incr64 k) f (f a.[trunc_i64_to_i32 k] k acc)
    else acc
  end
};

arrayFold = { forall t:Type r:Type,
              a : Array t =>
              f : { t => Int64 => r => r } =>
              acc : r =>
  arrayFoldFrom a 0 f acc
};

arrayZero32 = { a : Array Int32 =>
  REC go = { n =>
    if n <SInt64 arrayLength a
      then 0 |> array-poke-i32 a (trunc_i64_to_i32 n); go (n +Int64 1)
    end
  };
  go 0
};

