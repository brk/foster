
type case Maybe (a:Type)
  of $Some a
  of $None
;

/////

// Partial.
unMaybe :: forall (a:Type) { Maybe a => a };
unMaybe = { x =>
  case x
    of $Some a -> a
    of $None   -> prim kill-entire-process "unMaybe-failed";
  end
};

ofMaybe :: forall (a:Type) { a => Maybe a => a };
ofMaybe = { d => x =>
  case x
    of $Some a -> a
    of $None   -> d;
  end
};

isSome :: forall (a:Type) { Maybe a => Bool };
isSome = { x =>
  case x
    of $Some _ -> True
    of $None   -> False
  end
};

isNone :: forall (a:Type) { Maybe a => Bool };
isNone = { x =>
  case x
    of $Some _ -> False
    of $None   -> True
  end
};

mapMaybe :: forall (a:Type) (b:Type) { Maybe a => { a => b } => Maybe b };
mapMaybe = { m => f =>
  case m
    of $None -> None
    of $Some x -> Some (f x)
  end
};