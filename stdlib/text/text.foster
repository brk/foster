snafuinclude Bytes "bytes";

// The definition of the Text datatype is hard-wired into the compiler,
// but here it is for reference:
//
//   type case Text
//         of $TextFragment (Array Int8) Int32 (length in ... bytes?)
//         of $TextConcat   Text  Text   Int32

mkTextConcat = { a : Text => b : Text =>
  lensum = (textLength a) +Int32 (textLength b);
  small  = 120; // we'll be willing to memcpy buffers smaller than this.

  case (a, b)
    of ($TextFragment ba na, $TextFragment bb nb) ->
      // One optimization from the paper "Ropes: an alternative to strings":
      // transparently flatten concatenations of small leaf nodes.
      if lensum <=SInt32 small
      then TextFragment (rawBytesConcatByCopy ba na bb nb lensum) lensum
      else TextConcat a b lensum
      end
    // Un-implemented optimizations: perform similar flattening for
    // ($TextConcat a ($TextFragment ab na) _, $TextFragment bb nb) ->
    // and
    // ($TextFragment ba na, $TextConcat ($TextFragment bb nb) c) ->
    of (_                  , _) ->
      TextConcat a b lensum
  end
};

(++Text) :: { Text => Text => Text };
(++Text) = { a => b => mkTextConcat a b };

// TODO how to efficiently support an operation like textHeadTail/textSplit?
// The challenge would be to efficiently support incremental iteration
// through a Text with minimal allocation.
textLength :: { Text => Int32 };
textLength = { t : Text =>
  case t
    of $TextFragment _ n -> n
    of $TextConcat _ _ n -> n
   end;
};

textLength32 = { t => textLength t };

textFromRawASCII = { a : Array Int8 => TextFragment a (arrayLength32 a) };

textFoldASCII = { forall a:Type, t : Text => f : { Int8 => a => a } => acc:a =>
  case t
    of $TextFragment a _ ->
      arrayFold a { byte => idx => r => f byte r } acc
    of $TextConcat s1 s2 _ ->
      textFoldASCII s2 f (textFoldASCII s1 f acc);
   end;
};

snafuBytesOfText :: { Text => Bytes };
snafuBytesOfText = { t =>
  case t
    of $TextFragment a n ->
      BytesFragment a (zext_i32_to_i64 n)
    of $TextConcat s1 s2 n ->
      BytesConcat (snafuBytesOfText s1) (snafuBytesOfText s2) (zext_i32_to_i64 n)
  end;
};


expect_text_bare = { s : Text =>
  case s
    of $TextFragment a n     -> prim_print_bytes_stderr a n 0; n
    of $TextConcat   s1 s2 n -> expect_text_bare s1; expect_text_bare s2; n
   end;
};

print_text_bare :: { Text => Int32 };
print_text_bare = { s : Text =>
  case s
    of $TextFragment a n     -> prim_print_bytes_stdout a n 0; n
    of $TextConcat   s1 s2 n -> print_text_bare s1; print_text_bare s2; n
   end;
};

expect_newline = { expect_text_bare "\n"; () };

print_newline = { print_text_bare "\n"; () };

expect_text = { s : Text =>
  expect_text_bare s; expect_newline !
};

print_text = { s : Text =>
  print_text_bare s; print_newline !
};

(==TextBytes) = { a : Text => b : Text =>
  if textLength a ==Int32 textLength b
    then bytesEqual (snafuBytesOfText a) (snafuBytesOfText b)
    else False
  end
};

/////

assert :: { Bool => Text => () };
assert = { cond : Bool => msg : Text =>
  if cond then () else
    print_text "Assert failed!";
    print_text msg;
    prim kill-entire-process "assert-failed";
    ()
  end
};

