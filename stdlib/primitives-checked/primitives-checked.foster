// Note: the -unsafe primitives do not get checked variants here,
// since the regular variants should perform the appropriate checks.

// We could check shifts for debugging, even if not needed for safety.

/// {{{ Negate
negate-Int8         = { a : Int8    =>
  if a ==Int8 (bitnot-Int8 0)
    then prim kill-entire-process "negate-Int8 invariant violated"
    else prim negate-Int8 a
  end
};

negate-Int32         = { a : Int32    =>
  if a ==Int32 (bitnot-Int32 0)
    then prim kill-entire-process "negate-Int32 invariant violated"
    else prim negate-Int32 a
  end
};

negate-Int64         = { a : Int64    =>
  if a ==Int64 (bitnot-Int64 0)
    then prim kill-entire-process "negate-Int64 invariant violated"
    else prim negate-Int64 a
  end
};

negate-Word         = { a : Word    =>
  if a ==Word (bitnot-Word 0)
    then prim kill-entire-process "negate-Word invariant violated"
    else prim negate-Word a
  end
};

negate-WordX2         = { a : WordX2    =>
  if a ==WordX2 (bitnot-WordX2 0)
    then prim kill-entire-process "negate-WordX2 invariant violated"
    else prim negate-WordX2 a
  end
};
// }}}

// {{{ add, sub, mul
(*UInt32)             = { a : Int32    => b : Int32    => prim *ucInt32 a b         }; // :: Int32
(*UInt64)             = { a : Int64    => b : Int64    => prim *ucInt64 a b         }; // :: Int64
(*UInt8)              = { a : Int8     => b : Int8     => prim *ucInt8 a b          }; // :: Int8
(*UWord)              = { a : Word     => b : Word     => prim *ucWord a b          }; // :: Word
(*UWordX2)            = { a : WordX2   => b : WordX2   => prim *ucWordX2 a b        }; // :: WordX2
(+UInt32)             = { a : Int32    => b : Int32    => prim +ucInt32 a b         }; // :: Int32
(+UInt64)             = { a : Int64    => b : Int64    => prim +ucInt64 a b         }; // :: Int64
(+UInt8)              = { a : Int8     => b : Int8     => prim +ucInt8 a b          }; // :: Int8
(+UWord)              = { a : Word     => b : Word     => prim +ucWord a b          }; // :: Word
(+UWordX2)            = { a : WordX2   => b : WordX2   => prim +ucWordX2 a b        }; // :: WordX2
(-UInt32)             = { a : Int32    => b : Int32    => prim -ucInt32 a b         }; // :: Int32
(-UInt64)             = { a : Int64    => b : Int64    => prim -ucInt64 a b         }; // :: Int64
(-UInt8)              = { a : Int8     => b : Int8     => prim -ucInt8 a b          }; // :: Int8
(-UWord)              = { a : Word     => b : Word     => prim -ucWord a b          }; // :: Word
(-UWordX2)            = { a : WordX2   => b : WordX2   => prim -ucWordX2 a b        }; // :: WordX2

(*SInt32)             = { a : Int32    => b : Int32    => prim *scInt32 a b         }; // :: Int32
(*SInt64)             = { a : Int64    => b : Int64    => prim *scInt64 a b         }; // :: Int64
(*SInt8)              = { a : Int8     => b : Int8     => prim *scInt8 a b          }; // :: Int8
(*SWord)              = { a : Word     => b : Word     => prim *scWord a b          }; // :: Word
(*SWordX2)            = { a : WordX2   => b : WordX2   => prim *scWordX2 a b        }; // :: WordX2
(+SInt32)             = { a : Int32    => b : Int32    => prim +scInt32 a b         }; // :: Int32
(+SInt64)             = { a : Int64    => b : Int64    => prim +scInt64 a b         }; // :: Int64
(+SInt8)              = { a : Int8     => b : Int8     => prim +scInt8 a b          }; // :: Int8
(+SWord)              = { a : Word     => b : Word     => prim +scWord a b          }; // :: Word
(+SWordX2)            = { a : WordX2   => b : WordX2   => prim +scWordX2 a b        }; // :: WordX2
(-SInt32)             = { a : Int32    => b : Int32    => prim -scInt32 a b         }; // :: Int32
(-SInt64)             = { a : Int64    => b : Int64    => prim -scInt64 a b         }; // :: Int64
(-SInt8)              = { a : Int8     => b : Int8     => prim -scInt8 a b          }; // :: Int8
(-SWord)              = { a : Word     => b : Word     => prim -scWord a b          }; // :: Word
(-SWordX2)            = { a : WordX2   => b : WordX2   => prim -scWordX2 a b        }; // :: WordX2
// }}}

/*
// TODO
sqrt-f64             = { a : Float64  => prim sqrt-f64 a         }; // :: Float64
muladd-f64           = { a : Float64  => b : Float64  => c : Float64  => prim muladd-f64-checked a b c   }; // :: Float64
div-f64              = { a : Float64  => b : Float64  => prim div-f64-checked a b        }; // :: Float64
*/

////

// {{{ Manual implementations of add with overflow
// (Note: we don't actually use these forms because they're rather fragile, and
//  LLVM doesn't provide complete enough pattern matching to cover the full
//  suite of operations that we're interested in.)
/*
// LLVM will pattern recognize this form to produce llvm.uadd.with.overflow.
(+UInt32)          = { a : Int32    => b : Int32    =>
  res = prim +Int32 a b;
  if res <UInt32 a
    then prim kill-entire-process "+UInt32 encountered overflow."
    else res
  end
};

// LLVM will pattern-match this form to produce llvm.sadd.with.overflow.
(+SInt32)             = { a : Int32    => b : Int32    =>
  res = prim +Int64 (sext_i32_to_i64 a) (sext_i32_to_i64 b);
  smax = prim bitshl-Int64 1 (prim -Int64 32 1);
  umax = prim -Int64 (prim bitshl-Int64 1 32) 1;
  if (prim +Int64 res smax) >UInt64 umax
    then prim kill-entire-process "+SInt32 encountered overflow"
    else trunc_i64_to_i32 res
  end
};

// This logically-equivalent code will not be matched...
(+Int32)             = { a : Int32    => b : Int32    =>
  res = prim +Int64 (sext_i32_to_i64 a) (sext_i32_to_i64 b);
  case (res >SInt64 2147483647, res <SInt64 -2147483648)
     of (False, False) -> trunc_i64_to_i32 res
     of _ -> prim kill-entire-process "+Int32 encountered overflow"
  end
};
*/
// }}}
