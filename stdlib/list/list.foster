
type case List (a:Boxed)
  of $Nil
  of $Cons a (List a)
;

listLength = { forall t:Boxed, xs : List t =>
  case xs
    of $Nil -> 0
    of $Cons _ ys -> 1 +Int32 (listLength ys)
   end;
};


listReverse = { forall t:Boxed, xs : List t =>
  REC go = { xs : List t => acc : List t =>
        case xs
          of $Nil -> acc
          of $Cons x ys -> go ys (Cons x acc)
         end;
  };
  go xs (Nil !)
};


// Precondition: List is not empty.
listHead! :: forall t:Boxed, { List t => t };
listHead! = { forall t:Boxed, xs : List t =>
  case xs
    of $Nil -> prim kill-entire-process "listHead! passed an empty list"
    of $Cons x _ -> x
  end
};

// Precondition: List is not empty.
listTail! :: forall t:Boxed, { List t => List t };
listTail! = { forall t:Boxed, xs : List t =>
  case xs
    of $Nil -> prim kill-entire-process "listTail! passed an empty list"
    of $Cons _ ys -> ys
  end
};
