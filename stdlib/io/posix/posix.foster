snafuinclude Bytes "bytes";

// Note: these function names are treated specially in fosterlower.cpp
// to resolve the LLVM type-level mismatch between Array Int8,
// which has type { i64, [0 x i8] }*,
// and the closest we can get from C-land, which is %struct.foster_bytes*.

foreign import foster_stdin_read_bytes :: { Array Int8 => Ref Int32 => Int64 };

//                             (fd)     (bytes)     (offset) (len/pad) (status)    (#rd/wr)
foreign import foster_posix_read_bytes  :: { Int64 => Array Int8 => Int64 => Int64 => Ref Int32 => Int64 };
foreign import foster_posix_write_bytes :: { Int64 => Array Int8 => Int64 => Int64 => Ref Int32 => Int64 };

foreign import foster_posix_write_bytes_to_file ::
                       { Array Int8 => Array Int8 => Int64 => Int64 => Ref Int32 => Int64 };


foreign import foster_posix_get_tuntap_fd :: { Int64 };

type case IORead
      of $IOReadDone  Bytes
      of $IOReadMore  Bytes
      of $IOReadLater Bytes
      of $IOReadError Bytes
;


read_stdin_bytes_list :: { Bytes };
read_stdin_bytes_list = {
  // Allowing buffers to grow without bounds can negatively impact performance.
  read_stdin_bytes_lim_list 1024 1`000`000;
};

read_stdin_bytes_lim_list :: { Int32 => Int32 => Bytes };
read_stdin_bytes_lim_list = { startSize => maxSize =>
  // Note: this implementation produces a linear chain of exponentially-growing
  // fragments, such that access to the first byte from stdin requires
  // traversing the whole "list" of chunks. For now, we don't call bytesFlatten
  // ourselves, but callers may wish to do so...
  REC go = { prefix => size0 =>
    size = if size0 >SInt32 maxSize then maxSize else size0 end;
    case read_stdin_bytes_chunk size // roughly sqrt 2^30...
      of $IOReadDone  bytes -> bytesConcat prefix bytes
      of $IOReadMore  bytes -> go (bytesConcat prefix bytes) (size *Int32 2)
      of $IOReadLater bytes -> go (bytesConcat prefix bytes) (size *Int32 2)
      of $IOReadError _ -> prim kill-entire-process "read_stdin_bytes_list failed";
    end
  };
  go BytesEmpty startSize
};

read_stdin_bytes_chunk :: { Int32 => IORead };
read_stdin_bytes_chunk = { size =>
  arr   = allocDArray:[Int8] size;
  rstatus = (prim ref 0);
  nread = foster_stdin_read_bytes arr rstatus;
  bytes = bytesTake (bytesOfRawArray arr) nread;
  case rstatus^
    of 0 -> IOReadDone bytes
    of 1 -> IOReadMore bytes
    of 2 -> IOReadLater bytes
    of _ -> IOReadError bytes
  end
};


write_bytes_chunk_to_file :: { Array Int8 => Array Int8 => Int64 };
write_bytes_chunk_to_file = { name => bytes =>
  wstatus = (prim ref 0);
  nwrote = foster_posix_write_bytes_to_file name bytes 0 (prim_arrayLength bytes) wstatus;
  case wstatus^
    of 0 -> nwrote
    of 1 -> prim kill-entire-process "write_bytes_chunk_to_file returned MORE";
    of 2 -> prim kill-entire-process "write_bytes_chunk_to_file returned LATER";
    of _ -> prim kill-entire-process "write_bytes_chunk_to_file returned ERROR";
  end
};

write_bytes_chunk_to_fd_from :: { Int64 => Array Int8 => Int64 => Int64 => Int64 };
write_bytes_chunk_to_fd_from = { fd => bytes => offset => size =>
  wstatus = (prim ref 0);
  nwrote = foster_posix_write_bytes fd bytes offset size  wstatus;
  case wstatus^
    of 0 -> nwrote
    of 1 -> prim kill-entire-process "write_bytes_chunk_to_fd returned MORE";
    of 2 -> prim kill-entire-process "write_bytes_chunk_to_fd returned LATER";
    of _ -> prim kill-entire-process "write_bytes_chunk_to_fd returned ERROR";
  end
};

write_bytes_chunk_to_fd :: { Int64 => Array Int8 => Int64 };
write_bytes_chunk_to_fd = { fd => bytes =>
  write_bytes_chunk_to_fd_from fd bytes 0 (arrayLength bytes);
};

write_bytes_to_fd :: { Int64 => Bytes => Int64 };
write_bytes_to_fd = { fd => bytes =>
  wstatus = (prim ref 0);
  bytesFoldlFragments bytes { arr => off => fin => nwritten =>
    nwrote = foster_posix_write_bytes fd arr off (fin -Int64 off) wstatus;
    case wstatus^
      of 0 -> nwrote +Int64 nwritten
      of 1 -> prim kill-entire-process "write_bytes_to_fd returned MORE";
      of 2 -> prim kill-entire-process "write_bytes_to_fd returned LATER";
      of _ -> prim kill-entire-process "write_bytes_to_fd returned ERROR";
    end
  } 0;
};
