/*
Semi-mechanically translated from C to Foster,
based on the reference C implementation at

   https://github.com/ulfjack/ryu

which is dual-licensed under Apache 2 and Boost.
*/


DIGIT_TABLE = b"""
0001020304050607080910111213141516171819
2021222324252627282930313233343536373839
4041424344454647484950515253545556575859
6061626364656667686970717273747576777879
8081828384858687888990919293949596979899""";

put2 :: { Array Int8 => Int32 => Int32 => () };
put2 = { buf => offset => num =>
  DIGIT_TABLE.[num]          >^ buf.[offset];
  DIGIT_TABLE.[num +Int32 1] >^ buf.[offset +Int32 1];
};

kFLOAT_MANTISSA_BITS = 23;
kFLOAT_MANTISSA_MASK = 0x7F`FFFF; // (1 << FLOAT_MANTISSA_BITS) - 1;

kFLOAT_EXPONENT_BITS = 8;
kFLOAT_EXPONENT_MASK = 0xFF; // (1 << FLOAT_EXPONENT_BITS) - 1;
kFLOAT_EXPONENT_BIAS = 0x7F; // (1 << (FLOAT_EXPONENT_BITS - 1)) - 1;


kDOUBLE_MANTISSA_BITS    = 52;
kDOUBLE_MANTISSA_BITS_32 = 52;
kDOUBLE_MANTISSA_MASK = 0x000f`ffff`ffff`ffff; // (1 << DOUBLE_MANTISSA_BITS) - 1;

kDOUBLE_EXPONENT_BITS    = 11;
kDOUBLE_EXPONENT_BITS_32 = 11;
kDOUBLE_EXPONENT_BIAS    = 1023;
kDOUBLE_EXPONENT_BIAS_32 = 1023;

kDOUBLE_EXPONENT_MASK = 0x7FF; // (1 << DOUBLE_EXPONENT_BITS) - 1;


decimalLength9 = { v : Int32 =>
  // Function precondition: v is not a 10-digit number.
  // (f2s: 9 digits are sufficient for round-tripping.)
  // (d2fixed: We print 9-digit blocks.)
  case ()
    of _ if v >=SInt32 100000000 -> 9
    of _ if v >=SInt32 10000000  -> 8
    of _ if v >=SInt32 1000000   -> 7
    of _ if v >=SInt32 100000    -> 6
    of _ if v >=SInt32 10000     -> 5
    of _ if v >=SInt32 1000      -> 4
    of _ if v >=SInt32 100       -> 3
    of _ if v >=SInt32 10        -> 2
    of _ -> 1
  end
};

decimalLength17 = { v : Int64 =>
  // Function precondition: v is not an 18, 19, or 20-digit number.
  // (d2s: 17 digits are sufficient for round-tripping.)
  case ()
    of _ if v >=SInt64 10000000000000000 -> 17
    of _ if v >=SInt64 1000000000000000 -> 16
    of _ if v >=SInt64 100000000000000 -> 15
    of _ if v >=SInt64 10000000000000 -> 14
    of _ if v >=SInt64 1000000000000 -> 13
    of _ if v >=SInt64 100000000000 -> 12
    of _ if v >=SInt64 10000000000 -> 11
    of _ if v >=SInt64 1000000000 -> 10
    of _ if v >=SInt64 100000000 -> 9
    of _ if v >=SInt64 10000000  -> 8
    of _ if v >=SInt64 1000000   -> 7
    of _ if v >=SInt64 100000    -> 6
    of _ if v >=SInt64 10000     -> 5
    of _ if v >=SInt64 1000      -> 4
    of _ if v >=SInt64 100       -> 3
    of _ if v >=SInt64 10        -> 2
    of _ -> 1
  end
};

div1e8 = { x : Int64 => udiv-unsafe-Int64 x (sext_i32_to_i64 100000000) };

// Returns e == 0 ? 1 : [log_2(5^e)]; requires 0 <= e <= 3528.
log2pow5 = { e : Int32 =>
  // This approximation works up to the point that the multiplication overflows at e = 3529.
  // If the multiplication were done in 64 bits, it would fail at 5^4004 which is just greater
  // than 2^9297.
  bitlshr-Int32 (e *Int32 1217359) 19
};

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 3528.
pow5bits = { e : Int32 =>
    (bitlshr-Int32 (e *Int32 1217359) 19) +Int32 1
};

ceil_log2pow5 = { e : Int32 => (log2pow5 e) +Int32 1 };

log10Pow2 = { e : Int32 =>
    bitlshr-Int32 (e *Int32 78913) 18
};

log10Pow5 = { e : Int32 =>
    bitlshr-Int32 (e *Int32 732923) 20
};

pow5Factor :: { Int64 => Int32 };
pow5Factor = { value : Int64 =>
  REC loop = { count => value =>
    q = div5 value;
    r = (trunc_i64_to_i32 value)
                 -Int32 (5 *Int32 (trunc_i64_to_i32 q));
    if r ==Int32 0
      then loop (count +Int32 1) q
      else count
    end
  };
  loop 0 value
};

multipleOfPowerOf5 = { value : Int64 => p : Int32 => (pow5Factor value) >=UInt32 p };

multipleOfPowerOf2 = { value : Int64 => p : Int32 =>
    bitand-Int64 value ((bitshl-Int64 1 (zext_i32_to_i64 p)) -Int64 1)
                                          ==Int64 0
};

shiftright128 = { lo : Int64 =>
                  hi : Int64 =>
                  dist32 : Int32 =>
    dist = dist32 |> zext_i32_to_i64;
    bitor-Int64
        (bitshl-Int64 hi (64 -Int64 dist))
        (bitlshr-Int64 lo dist)
};


umul128 = { a : Int64 =>
            b : Int64 =>
            productHi : Ref Int64 =>
    aLo = trunc_i64_to_i32 a;
    aHi = trunc_i64_to_i32 (bitlshr-Int64 a 32);
    bLo = trunc_i64_to_i32 b;
    bHi = trunc_i64_to_i32 (bitlshr-Int64 b 32);
    b00 = (zext_i32_to_i64 aLo) *Int64 (zext_i32_to_i64 bLo);
    b01 = (zext_i32_to_i64 aLo) *Int64 (zext_i32_to_i64 bHi);
    b10 = (zext_i32_to_i64 aHi) *Int64 (zext_i32_to_i64 bLo);
    b11 = (zext_i32_to_i64 aHi) *Int64 (zext_i32_to_i64 bHi);
    b00Lo = trunc_i64_to_i32 b00;
    b00Hi = trunc_i64_to_i32 (bitlshr-Int64 b00 32);
    mid1 = b10 +Int64 (zext_i32_to_i64 b00Hi);
    mid1Lo = trunc_i64_to_i32 mid1;
    mid1Hi = trunc_i64_to_i32 (bitlshr-Int64 mid1 32);
    mid2 = b01 +Int64 (zext_i32_to_i64 mid1Lo);
    mid2Lo = trunc_i64_to_i32 mid2;
    mid2Hi = trunc_i64_to_i32 (bitlshr-Int64 mid2 32);
    pHi = (b11 +Int64 (zext_i32_to_i64 mid1Hi))
              +Int64 (zext_i32_to_i64 mid2Hi);
    pLo = bitor-Int64
              (bitshl-Int64 (zext_i32_to_i64 mid2Lo) 32)
              (zext_i32_to_i64 b00Lo);

    pHi >^ productHi;
    pLo
};

mulShiftAll64 = { m0 : Int64 =>
                  mul0 : Int64 =>
                  mul1 : Int64 =>
                  j : Int32 =>
                  vp : (Ref Int64) =>
                  vm : (Ref Int64) =>
                  mmShiftB : Bool =>
    m = bitshl-Int64 m0 1;

    tmp = (prim ref 0);
    lo = umul128 m mul0 tmp;
    hi = (prim ref 0);
    mid = tmp^ +Int64 (umul128 m mul1 hi);
    (hi^ +Int64 (if mid <UInt64 tmp^ then 1 else 0 end)) >^ hi;

    lo2 = lo +Int64 mul0;
    mid2 = (mid +Int64 mul1)
               +Int64 (if lo2 <UInt64 lo then 1 else 0 end);
    hi2 = hi^ +Int64 (if mid2 <UInt64 mid then 1 else 0 end);
    (shiftright128 mid2 hi2 ((j -Int32 64) -Int32 1)) >^ vp;

    if mmShiftB
      then lo3 = lo -Int64 mul0;
           mid3 = (mid -Int64 mul1)
                      -Int64 (if lo3 >UInt64 lo then 1 else 0 end);
           hi3 = hi^ -Int64 (if mid3 >UInt64 mid then 1 else 0 end);
           (shiftright128 mid3 hi3 ((j -Int32 64) -Int32 1)) >^ vm;
      else
           lo3 = lo +Int64 lo;
           mid3 = (mid +Int64 mid)
                      +Int64 (sext_i32_to_i64
                                  if lo3 <UInt64 lo then 1 else 0 end);
           hi3 = (hi^ +Int64 hi^)
                     +Int64 (if mid3 <UInt64 mid then 1 else 0 end);
           lo4 = lo3 -Int64 mul0;
           mid4 = (mid3 -Int64 mul1)
                      -Int64 (if lo4 >UInt64 lo3 then 1 else 0 end);
           hi4 = hi3 -Int64 (if mid4 >UInt64 mid3 then 1 else 0 end);
           (shiftright128 mid4 hi4 (j -Int32 64)) >^ vm;
    end;
    shiftright128 mid hi^ ((j -Int32 64) -Int32 1)
};
