snafuinclude Maybe "maybe";

// Implements a type-safe Lua-style "stackful" coroutine interface
// atop the machinery provided by effect handlers.

effect CoroYield (cyv:Boxed) (cyr:Boxed) of $CoroYield cyv => cyr;



/*

type case Coro (co:Boxed) (ci:Boxed)
  of $Coro { ci => co @(CoroYield co ci) }
  ;

coro_createX :: forall (cco:Boxed) (cci:Boxed) { { cci => cco @(CoroYield cco cci) } => Coro cco cci };
coro_createX = { f => Coro (prim ref f) };

// Properly, this should have an effect of modifying the heap reference inside Coro.
coro_invokeX :: forall (a:Boxed) (b:Boxed) { Coro a b => b => a };
coro_invokeX = { c => i =>
  case c of $Coro r ->b
    handle r^ i
    of $CoroYield v -> // The problem with this formulation is that each call to invoke
                       // re-executes the ``handle`` construct, which means all but the first
                       // will allocate an unnecessary coroutine wrapper around the existing
                       // coroutine hidden in the ``resume`` function.
                       resume >^ r;
                       v
    end
  end
};
*/


// The following formulation takes care to only execute the ``handle`` construct once,
// by using explicit mutable state to distinguish between first and subsequent invocations.
// The use of Maybe is a workaround for an occurs check violation that I haven't investigated yet,
// when using ``r = (prim ref f)``.


type case CoroState (co:Boxed) (ci:Boxed)
  of $CoroInit { ci => co }
  of $CoroSusp (Ref (Maybe { ci => co }))
  of $CoroDead
  ;

coro_yield :: forall (cco:Boxed) (cci:Boxed) { cco => cci @(CoroYield cco cci) };
coro_yield = { v => do_CoroYield v };

coro_create :: forall (cco:Boxed) (cci:Boxed) { { cci => cco @(CoroYield cco cci) } => Ref (CoroState cco cci) };
coro_create = { f => 
  (prim ref (CoroInit f))
};

// Properly, this should have an effect of modifying the heap reference inside Coro.
coro_invoke :: forall (a:Boxed) (b:Boxed) { Ref (CoroState a b) => b => a };
coro_invoke = { c => i =>
  case c^
    of $CoroDead -> prim kill-entire-process "coro_invoke can't resume a dead coroutine."

    of $CoroSusp rmb ->
        case rmb^ of $Some f -> f i
                  of $None -> prim kill-entire-process "invariant violation"
        end
    of $CoroInit f ->
        r = (prim ref None);
        (CoroSusp r) >^ c;

        handle f i
          of $CoroYield v -> (Some resume) >^ r; v
          as { fin => CoroDead >^ c; fin }
        end
  end
};



/* A possible alternative with exposed coroutine/continuation primitives might be
   like this, although I think this is not particularly better than the function-based
   encoding above, and it requires the compiler to recognize and specially treat
   handle expressions of the form ``prim coro_invoke ...``

   Arguably it's worse because we now have two handle expressions.

coro_createX :: forall (cco:Boxed) (cci:Boxed) { { cci => cco @(CoroYield cco cci) } => Coro cco cci };
coro_createX = { f => 
  Coro (prim ref (CoroInit {
    handle f i
      of $CoroYield v -> resumecoro >^ rc; v
    end } ))
};

// Properly, this should have an effect of modifying the heap reference inside Coro.
coro_invokeX :: forall (a:Boxed) (b:Boxed) { Coro a b => b => a };
coro_invokeX = { c => i =>
  case c of $Coro r ->
    case r^
      of $CoroInit f -> f i
      of $CoroSusp k -> handle prim coro_invoke k i
                          of $CoroYield v -> CoroSusp resumecoro >^ r; v
                        end
    end
  end
};

*/