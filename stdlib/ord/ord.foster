
type case Ord
       of $LT
       of $EQ
       of $GT
       ;

notBool = { a:Bool => if a then False else True end };
eqBool = { a:Bool => b:Bool => if a then b else notBool b end };
notEqBool = { a:Bool => b => if a then notBool b else b end };

cmpBoolTrueLT = { a : Bool => b : Bool =>
  if a then if b then EQ
                 else LT
            end
       else if b then GT
                 else EQ
            end
  end
};

cmpBoolTrueLTxAlt = { a : Bool => b : Bool =>
  case (a, b)
    of (True, False) -> LT
    of (False, True) -> GT
    of _ -> EQ
  end
};

// E.g. when comparing ordered pairs, we can stop
// if the first components are unequal:
// cmp (a,b) (x,y) = ordBindIfEq (cmp a x) { cmp x y }
ordBindIfEq :: { Ord => { Ord } => Ord };
ordBindIfEq = { b => f =>
  if isEQ b then f ! else b end
};

ordInvert = { b : Ord =>
  case b
    of $LT -> GT
    of $GT -> LT
    of _   -> b
  end
};

ordInvertIf = { b : Ord => cnd : Bool =>
  if cnd then ordInvert b else b end
};

isGE = { o : Ord =>
  case o
    of $LT -> False
    of _   -> True
  end
};

notLT = { o => isGE o };

isLE = { o : Ord =>
  case o
    of $GT -> False
    of _   -> True
  end
};

notGT = { o => isLE o };

isEQ = { o : Ord =>
  case o
    of $EQ -> True
    of _   -> False
  end
};

isGT = { o : Ord =>
  case o
    of $GT -> True
    of _   -> False
  end
};

isLT = { o : Ord =>
  case o
    of $LT -> True
    of _   -> False
  end
};

textOfOrd = { o : Ord =>
  case o
    of $LT -> "LT"
    of $EQ -> "EQ"
    of $GT -> "GT"
  end
};
