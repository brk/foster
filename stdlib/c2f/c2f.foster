snafuinclude Prelude "prelude";

type case Field (a:Type)
  of $Field (Ref a)
;

mkField :: forall (a:Type) { a => Field a };
mkField = { v => Field (prim ref v) };

getField :: forall (a:Type) { Field a => a };
getField = { f => case f of $Field r -> r^ end };

getFieldRef :: forall (a:Type) { Field a => Ref a };
getFieldRef = { f => case f of $Field r -> r end };

setField :: forall (a:Type) { Field a => a => () };
setField = { f => v => case f of $Field r -> v >^ r end };


type case Ptr (a:Type)
  of $PtrNil
  of $PtrArr (Array a) Int32
  of $PtrRef (Ref a)
  ;

print_ptr = { p =>
  case p
    of $PtrNil -> print_text "PtrNil"
    of $PtrRef _ -> print_text "PtrRef"
    of $PtrArr a offset -> print_text_bare "PtrArr, offset="; print_i32 offset; print_text_bare "; len="; print_i32 (arrayLength32 a);
  end
};

(==Ptr) :: forall (a:Type) { Ptr a => Ptr a => Bool };
(==Ptr) = { p => q =>
  case (p, q)
    of ($PtrNil, $PtrNil) -> True
    of ($PtrRef rp, $PtrRef rq) -> prim ==Ref rp rq
    of ($PtrArr pa pn, $PtrArr qa qn) ->
          if pn ==Int32 qn
            then prim sameArrayStorage pa qa
            else False
          end
    of _ -> False
  end
};

(!=Ptr) :: forall (a:Type) { Ptr a => Ptr a => Bool };
(!=Ptr) = { p => q => prim not (p ==Ptr q) };

(<=Ptr) :: forall (a:Type) { Ptr a => Ptr a => Bool };
(<=Ptr) = { p => q =>
  case (p, q)
    of ($PtrNil, $PtrNil) -> True
    of ($PtrRef rp, $PtrRef rq) -> prim ==Ref rp rq
    of ($PtrArr pa pn, $PtrArr qa qn) ->
          if pn <=SInt32 qn
            then prim sameArrayStorage pa qa
            else False
          end
    of _ -> False
  end
};

(<Ptr) :: forall (a:Type) { Ptr a => Ptr a => Bool };
(<Ptr) = { p => q =>
  case (p, q)
    of ($PtrNil, $PtrNil) -> False
    of ($PtrRef rp, $PtrRef rq) -> False // TODO fix
    of ($PtrArr pa pn, $PtrArr qa qn) ->
          if pn <SInt32 qn
            then prim sameArrayStorage pa qa
            else False
          end
    of _ -> False
  end
};

(>=Ptr) :: forall (a:Type) { Ptr a => Ptr a => Bool };
(>=Ptr) = { p => q =>
  q <=Ptr p
};

(>Ptr) :: forall (a:Type) { Ptr a => Ptr a => Bool };
(>Ptr) = { p => q =>
  q <Ptr p
};

ptrDiff :: forall (a:Type) { Ptr a => Ptr a => Int64 };
ptrDiff = { p => q =>
  case (p, q)
    of ($PtrArr pa pn, $PtrArr qa qn) -> pn -Int32 qn |> zext_i32_to_i64
    of _ -> 0
  end
};

ptrDiff32 :: forall (a:Type) { Ptr a => Ptr a => Int32 };
ptrDiff32 = { p => q => p `ptrDiff` q |> trunc_i64_to_i32 };

(-Ptr) :: forall (a:Type) { Ptr a => Int32 => Ptr a };
(-Ptr) = { ptr => n => ptrMinus ptr n };

(+Ptr) :: forall (a:Type) { Ptr a => Int32 => Ptr a };
(+Ptr) = { ptr => n => ptrPlus ptr n };

(-Ptr64) :: forall (a:Type) { Ptr a => Int64 => Ptr a };
(-Ptr64) = { ptr => n => ptrMinus ptr (trunc_i64_to_i32 n) };

(+Ptr64) :: forall (a:Type) { Ptr a => Int64 => Ptr a };
(+Ptr64) = { ptr => n => ptrPlus ptr (trunc_i64_to_i32 n) };

ptrGetIndex :: forall (a:Type) { Ptr a => Int32 => a };
ptrGetIndex = { ptr => idx =>
  case ptr
    of $PtrNil -> prim kill-entire-process "ptrGetIndex null";
    of $PtrRef r -> r^
    of $PtrArr arr off -> arr.[off +Int32 idx]
  end
};

ptrSetIndex :: forall (a:Type) { Ptr a => Int32 => a => () };
ptrSetIndex = { ptr => idx => val =>
  case ptr
    of $PtrNil -> ()
    of $PtrRef r -> val >^ r;
    of $PtrArr arr off -> val >^ arr.[off +Int32 idx];
  end
};

ptrGet :: forall (a:Type) { Ptr a => a };
ptrGet = { ptr =>
  case ptr
    of $PtrNil -> prim kill-entire-process "ptrGet null";
    of $PtrRef r -> r^
    of $PtrArr arr off -> arr.[off]
  end
};

ptrSet :: forall (a:Type) { Ptr a => a => () };
ptrSet = { ptr => val =>
  case ptr
    of $PtrNil -> prim kill-entire-process "ptrGet null";
    of $PtrRef r -> val >^ r;
    of $PtrArr arr off -> val >^ arr.[off]
  end
};

ptrPlus :: forall (a:Type) { Ptr a => Int32 => Ptr a };
ptrPlus = { ptr => n =>
  case ptr
    of $PtrNil   -> ptr
    of $PtrRef r -> ptr
    of $PtrArr arr off -> PtrArr arr (off +Int32 n)
  end
};

ptrMinus :: forall (a:Type) { Ptr a => Int32 => Ptr a };
ptrMinus = { ptr => n =>
  case ptr
    of $PtrNil   -> ptr
    of $PtrRef r -> ptr
    of $PtrArr arr off -> PtrArr arr (off -Int32 n)
  end
};

ptrMemset :: forall (a:Type) { Ptr a => a => Int32 => () };
ptrMemset = { ptr => v => n =>
  enumRange32 0 n { i => ptrSetIndex ptr i v };
};

arrMemset :: forall (a:Type) { Array a => Int32 => a => Int32 => () };
arrMemset = { arr => off => v => n =>
  enumRange32 0 n { i => v >^ arr.[i +Int32 off] };
};

ptrMemcpy :: forall (a:Type) { Ptr a => Ptr a => Int32 => () };
ptrMemcpy = { dst => src => n =>
  enumRange32 0 n { i => ptrSetIndex dst i (ptrGetIndex src i) };
};

ptrSize :: forall (a:Type) { Ptr a => Int32 };
ptrSize = { ptr =>
  case ptr
    of $PtrNil   -> 0
    of $PtrRef r -> 1
    of $PtrArr arr off -> arrayLength32 arr -Int32 off
  end
};

ptrStrlen :: { Ptr Int8 => Int64 };
ptrStrlen = { ptr =>
  REC go = { i =>
    if ptrGetIndex ptr i ==Int8 0
      then i |> zext_i32_to_i64
      else go (i +Int32 1)
    end
  };
  go 0
};

ptrStrncpy :: { Ptr Int8 => Ptr Int8 => Int32 => () };
ptrStrncpy = { dst => src => n =>
  ptrMemcpy dst src n
};

ptrMemcmp :: forall (a:Type) { Ptr a => Ptr a => Int32 => { a => a => Ord } => Int32 };
ptrMemcmp = { a => b => n => cmp =>
  REC go = { i =>
    if i <UInt32 n then
      case ptrGetIndex a i `cmp` ptrGetIndex b i
        of EQ -> go (i +Int32 1)
        of LT -> -1
        of GT ->  1
      end
    else
      0
    end
  };
  go 0;
};

memmove_arr :: forall (a:Type) { Array a => Int32 => Int32 => Int32 };
memmove_arr = { arr => srcoff => n =>
  REC loop = { i =>
    if i <SInt32 n
      then arr.[srcoff +Int32 i] >^ arr.[i];
           loop (i +Int32 1)
      else n
    end
  };
  loop 0
};

memmove :: forall (a:Type) { Ptr a => Ptr a => Int32 => Int32 };
memmove = { dest => src => n =>
  case (dest, src)
    of ($PtrNil, $PtrNil) -> 0
    of ($PtrRef rp, $PtrRef rq) -> 1
    of ($PtrArr pa pn, $PtrArr qa qn) ->
      if prim sameArrayStorage pa qa
        then
          if pn ==Int32 qn
            then n
            else // TODO fix
                  ptrMemcpy dest src n; n
          end
        else ptrMemcpy dest src n; n
      end

    of _ -> 0
  end
};


incr_Ptr_Int8_     = { r : Ref (Ptr Int8) => v = (r^ `ptrPlus` 1); v >^ r; v };
decr_Ptr_Int8_     = { r : Ref (Ptr Int8) => v = (r^ `ptrMinus` 1); v >^ r; v };
postincr_Ptr_Int8_ = { r : Ref (Ptr Int8) => v = r^; (v `ptrPlus` 1) >^ r; v };
postdecr_Ptr_Int8_ = { r : Ref (Ptr Int8) => v = r^; (v `ptrMinus` 1) >^ r; v };

ptrIncr_Ptr_Int8_     = { r : Ptr (Ptr Int8) => v = (ptrGet r `ptrPlus` 1); ptrSet r v; v };
ptrDecr_Ptr_Int8_     = { r : Ptr (Ptr Int8) => v = (ptrGet r `ptrMinus` 1); ptrSet r v; v };
ptrPostIncr_Ptr_Int8_ = { r : Ptr (Ptr Int8) => v = ptrGet r; ptrSet r (v `ptrPlus` 1); v };
ptrPostDecr_Ptr_Int8_ = { r : Ptr (Ptr Int8) => v = ptrGet r; ptrSet r (v `ptrMinus` 1); v };

ptrPostIncr :: forall (a:Type) { Ptr (Ptr a) => Ptr a };
ptrPostIncr = { r => v = ptrGet r; ptrSet r (v `ptrPlus` 1); v };

ptrPostDecr :: forall (a:Type) { Ptr (Ptr a) => Ptr a };
ptrPostDecr = { r => v = ptrGet r; ptrSet r (v `ptrMinus` 1); v };


ptrIncr :: forall (a:Type) { Ptr (Ptr a) => Ptr a };
ptrIncr = { p => ptrSet p ((ptrGet p) `ptrPlus` 1); ptrGet p };

ptrDecr :: forall (a:Type) { Ptr (Ptr a) => Ptr a };
ptrDecr = { p => ptrSet p ((ptrGet p) `ptrMinus` 1); ptrGet p };

/* TODO infinite loop in the typechecker?? occurs check violation we're not catching i guess
ptrIncr :: forall (a:Type) { Ptr (Ptr a) => Ptr a };
ptrIncr = { p => ptrSet p (p `ptrPlus` 1); p };
*/

ptrIncr_Ptr_Int32_     = { r : Ptr (Ptr Int32) => v = (ptrGet r `ptrPlus` 1); ptrSet r v; v };
ptrDecr_Ptr_Int32_     = { r : Ptr (Ptr Int32) => v = (ptrGet r `ptrMinus` 1); ptrSet r v; v };
ptrPostIncr_Ptr_Int32_ = { r : Ptr (Ptr Int32) => v = ptrGet r; ptrSet r (v `ptrPlus` 1); v };
ptrPostDecr_Ptr_Int32_ = { r : Ptr (Ptr Int32) => v = ptrGet r; ptrSet r (v `ptrMinus` 1); v };

ptrIncrInt16 = { r : Ptr Int16 => v = ((ptrGet r) +Int16 1); ptrSet r v; v };
ptrDecrInt16 = { r : Ptr Int16 => v = ((ptrGet r) -Int16 1); ptrSet r v; v };
ptrIncrInt32 = { r : Ptr Int32 => v = ((ptrGet r) +Int32 1); ptrSet r v; v };
ptrDecrInt32 = { r : Ptr Int32 => v = ((ptrGet r) -Int32 1); ptrSet r v; v };
ptrIncrInt8 = { r : Ptr Int8 => v = ((ptrGet r) +Int8 1); ptrSet r v; v };
ptrDecrInt8 = { r : Ptr Int8 => v = ((ptrGet r) -Int8 1); ptrSet r v; v };
ptrIncrInt64 = { r : Ptr Int64 => v = ((ptrGet r) +Int64 1); ptrSet r v; v };
ptrDecrInt64 = { r : Ptr Int64 => v = ((ptrGet r) -Int64 1); ptrSet r v; v };

ptrPostIncrInt32 = { r : Ptr Int32 => v = ptrGet r; ptrSet r (v +Int32 1); v };
ptrPostDecrInt32 = { r : Ptr Int32 => v = ptrGet r; ptrSet r (v -Int32 1); v };
ptrPostIncrInt16 = { r : Ptr Int16 => v = ptrGet r; ptrSet r (v +Int16 1); v };
ptrPostDecrInt16 = { r : Ptr Int16 => v = ptrGet r; ptrSet r (v -Int16 1); v };
ptrPostIncrInt8 = { r : Ptr Int8 => v = ptrGet r; ptrSet r (v +Int8 1); v };
ptrPostDecrInt8 = { r : Ptr Int8 => v = ptrGet r; ptrSet r (v -Int8 1); v };
ptrPostIncrInt64 = { r : Ptr Int64 => v = ptrGet r; ptrSet r (v +Int64 1); v };
ptrPostDecrInt64 = { r : Ptr Int64 => v = ptrGet r; ptrSet r (v -Int64 1); v };

ptrIncrArrayInt32 = { r : Ptr Int32 => idx => v = (ptrGetIndex r idx +Int32 1); ptrSetIndex r idx v; v };

strLit :: forall (t:Type) { Array t => Ptr t };
strLit = { s => PtrArr s 0 };

ptrOfArr :: forall (t:Type) { Array t => Ptr t };
ptrOfArr = { s => PtrArr s 0 };

printStr :: { Ptr Int8 => () };
printStr = { ptr =>
  printStrBare ptr;
  print_newline !
};

printStrBare :: { Ptr Int8 => () };
printStrBare = { ptr =>
  case ptr
    of $PtrNil   -> print_text_bare "(null)"; ()
    of $PtrRef r -> print_text_bare "PtrRef"; ()
    of $PtrArr arr off ->
        len = arrayLength32 arr -Int32 (off +Int32 1);
        prim_print_bytes_stdout arr len off;
        ()
  end
};


type case ArrPtr (a:Type)
  of $ArrPtr (Array a) Int64
  ;

incrArrPtr :: forall (a:Type) { ArrPtr a => ArrPtr a };
incrArrPtr = { v => case v of $ArrPtr a x -> ArrPtr a (x +Int64 1) end };

ptrToArr :: { Ptr Int8 => Array Int8 };
ptrToArr = { ptr =>
  case ptr
    of $PtrArr arr off ->
      if off ==Int32 0 then arr else prim kill-entire-process "ptrToArr can't yet handle non-zero offsets."
      end
    of _ -> prim kill-entire-process "ptrToArr requires an existing array, for now."
  end
};

c2f_i1_to_i8 = { b => if b then 0 else 1 end };

c2f_i1_to_i32 = { b => if b then 0 else 1 end };

s8-to-f32 :: { Int8 => Float32 };
s8-to-f32 = { s8 => s8 |> sext_i8_to_i32 |> s32-to-f32-unsafe };

u8-to-f32 :: { Int8 => Float32 };
u8-to-f32 = { u8 => u8 |> zext_i8_to_i32 |> u32-to-f32-unsafe };

__assert_fail :: { Ptr Int8 => Ptr Int8 => Int32 => Text => () };
__assert_fail = { expr => file => line => func =>
  printStr expr;
  printStr file;
  print_i32 line;
  prim kill-entire-process "assertion failure";
};

zeroTerminate :: { Array Int8 => Array Int8 };
zeroTerminate = { arr =>
  len = arrayLength32 arr;
  out = allocDArray (len +Int32 1);
  memcpy_i8_to_from_at_len out arr 0 len;
  0 >^ out.[len];
  out;
};

c2fmalloc :: { Int64 => Ptr Int8 };
c2fmalloc = { n => allocDArray (trunc_i64_to_i32 n) |> ptrOfArr };

c2f_argv :: { Ptr (Ptr Int8) };
c2f_argv = {
  argc = get_cmdline_n_args !;
  argv = allocDArray:[Ptr Int8] argc |> strLit;
  enumRange32 0 argc { n => 
    case get_cmdline_arg_n n
      of $TextFragment arr _ -> ptrSetIndex argv n (arr |> zeroTerminate |> strLit)
      of $TextConcat _ _ _ -> prim kill-entire-process "c2f_argv: no support yet for concats"
    end
  };
  argv
};

foreign type CFile;
foreign import ferror   as c2f_ferror    :: { CFile => Int32 };
foreign import feof     as c2f_feof      :: { CFile => Int32 };
foreign import clearerr as c2f_clearerr  :: { CFile => Int32 };
foreign import fopen    as c_fopen       :: { CString => CString => CFile };
foreign import fclose   as c2f_fclose    :: { CFile => Int32 };

foreign import fputc    as c2f_fputc    :: { Int32 => CFile => Int32 };
foreign import fgetc    as c2f_fgetc    :: { CFile => Int32 };

foreign import fwrite   as c_fwrite  :: { CString => Int64 => Int64 => CFile => Int64 };
foreign import fread    as c_fread   :: { CString => Int64 => Int64 => CFile => Int64 };

foreign import fseek    as c_fseek :: { CFile => Int64 => Int32 => Int32 };
foreign import ftell    as c_ftell :: { CFile => Int64 };
foreign import rewind   as c_rewind :: { CFile => () };

foreign import c2f_stdin  :: { CFile };
foreign import c2f_stdout :: { CFile };
foreign import c2f_stderr :: { CFile };

foreign import CFile_isnil :: { CFile => Bool };

foreign import foster_sprintf_i32 :: { Int32 => Int8 => Int8 => Int32 => Int32 => Text };
foreign import foster_sprintf_i64 :: { Int64 => Int8 => Int8 => Int32 => Int32 => Text };

c2f_fopen :: { Ptr Int8 => Ptr Int8 => CFile };
c2f_fopen = { path => mode =>
  cpath = path |> ptrToArr |> cstr;
  cmode = mode |> ptrToArr |> cstr;
  rv = c_fopen cpath cmode;
  cstr_free cpath;
  cstr_free cmode;
  rv
};

c2f_fseek = { f => off32 => origin => c_fseek f (zext_i32_to_i64 off32) origin };

c2f_ftell = { f => c_ftell f };

c2f_rewind = { f => c_rewind f; () };

c2f_fread_arr :: { Array Int8 => Int32 => Int64 => Int64 => CFile => Int64 };
c2f_fread_arr = { arr => off => membsz => nmemb => f =>
  c_fread (cdataptr_unsafe arr off) membsz nmemb f
};

c2f_fread :: { Ptr Int8 => Int64 => Int64 => CFile => Int64 };
c2f_fread = { ptr => membsz => nmemb => f =>
  case ptr
    of $PtrArr arr off ->
      c_fread (cdataptr_unsafe arr off) membsz nmemb f
    of _ ->
      prim kill-entire-process "c2f_fread requires an array input"
  end
};

c2f_fwrite :: { Ptr Int8 => Int64 => Int64 => CFile => Int64 };
c2f_fwrite = { ptr => membsz => nmemb => f =>
  case ptr
    of $PtrArr arr off ->
      c_fwrite (cdataptr_unsafe arr off) membsz nmemb f
    of _ ->
      prim kill-entire-process "c2f_fwrite requires an array input"
  end
};

c2f_inf_f32 :: { Float32 };
c2f_inf_f32 = { (0x1.0p255 as Float32) };

c2f_inf_f64 :: { Float64 };
c2f_inf_f64 = { 0x1.0p255 };

c2f_exit = { n =>
  print_text "c2f_exit called";
  prim kill-entire-process "c2f-exit";
};

