
base64-encode-bare :: { Array Int8 => Array Int8 };
base64-encode-bare = { a =>
  alen = arrayLength32 a;
  res = newArrayReplicate (base64-encode-size alen) 0;

  lookup = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  emitv = { target => v : Int8 => lookup[v] >^ res[target]; };
  prepw = { w => trunc_i32_to_i8 w |> bitand-Int8 0b00111111 };
  emit3v = { target => v0 : Int8 => v1 => v2 =>
    xa = bitor-Int32 (bitor-Int32 (             (zext_i8_to_i32 v2))
                                  (bitshl-Int32 (zext_i8_to_i32 v1) 8))
                     (bitshl-Int32 (zext_i8_to_i32 v0) 16);

    emitv target            (prepw (bitlshr-Int32 xa 18));
    emitv (target +Int32 1) (prepw (bitlshr-Int32 xa 12));
    emitv (target +Int32 2) (prepw (bitlshr-Int32 xa  6));
    emitv (target +Int32 3) (prepw xa);
  };

  emit3 = { from => target =>
    emit3v target a[from] a[from +Int32 1] a[from +Int32 2]
  };

  REC go = { from => target =>
    remaining = alen -Int32 from;
    if remaining >=UInt32 3
      then emit3 from target;
           go (from +Int32 3) (target +Int32 4)
      else
        c = ('=' as Int8);
        case remaining
          of 1 -> emit3v target a[from] 0                0;
                  c >^ res[target +Int32 2];
                  c >^ res[target +Int32 3];
          of 2 -> emit3v target a[from] a[from +Int32 1] 0;
                  c >^ res[target +Int32 3];
          of _ -> ()
        end
    end
  };
  go 0 0;
  res
};

base64-encode-size-nopad = { rawSize : Int32 =>
  lenF = rawSize |> u32-to-f64;
  f64-to-u32-unsafe ((4.0 *f64 lenF +f64 2.0) `div-f64` 3.0)
};

base64-encode-size = { rawSize : Int32 =>
  base64-encode-size-nopad rawSize |> round-up-to-multiple-of 3
};

// hmm = { a => b => print_i32 a; print_i32 b; };
// 111 |> hmm 222;  // prints 222; 1111
round-up-to-multiple-of = { granule => n =>
  m = n `srem-Int32` granule;
  if m ==Int32 0 then n else n +Int32 (granule -Int32 m) end
};

