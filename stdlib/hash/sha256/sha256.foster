snafuinclude Prelude "prelude";
snafuinclude Bitwise "bitwise";

// based on http://pastebin.com/raw.php?i=ZmkCyJmU

sha256aa :: { Array Int8 => Array Int8 };
sha256aa = { inp =>

  cube = prim mach-array-literal
      0428a2f98_16 071374491_16 0b5c0fbcf_16 0e9b5dba5_16 03956c25b_16 059f111f1_16 0923f82a4_16 0ab1c5ed5_16
      0d807aa98_16 012835b01_16 0243185be_16 0550c7dc3_16 072be5d74_16 080deb1fe_16 09bdc06a7_16 0c19bf174_16
      0e49b69c1_16 0efbe4786_16 00fc19dc6_16 0240ca1cc_16 02de92c6f_16 04a7484aa_16 05cb0a9dc_16 076f988da_16
      0983e5152_16 0a831c66d_16 0b00327c8_16 0bf597fc7_16 0c6e00bf3_16 0d5a79147_16 006ca6351_16 014292967_16
      027b70a85_16 02e1b2138_16 04d2c6dfc_16 053380d13_16 0650a7354_16 0766a0abb_16 081c2c92e_16 092722c85_16
      0a2bfe8a1_16 0a81a664b_16 0c24b8b70_16 0c76c51a3_16 0d192e819_16 0d6990624_16 0f40e3585_16 0106aa070_16
      019a4c116_16 01e376c08_16 02748774c_16 034b0bcb5_16 0391c0cb3_16 04ed8aa4a_16 05b9cca4f_16 0682e6ff3_16
      0748f82ee_16 078a5636f_16 084c87814_16 08cc70208_16 090befffa_16 0a4506ceb_16 0bef9a3f7_16 0c67178f2_16
      ;
  sqr = prim mach-array-literal 06a09e667_16 0bb67ae85_16 03c6ef372_16 0a54ff53a_16
                                0510e527f_16 09b05688c_16 01f83d9ab_16 05be0cd19_16;
  w = newDArray0 64 { i => 0 };
  a = newDArray0 16 { i => 0 };
  h = newDArray0 8  { i => sqr[i] };

  ror = { x => n => bitor-Int32 (x `bitlshr-Int32` n) (x `bitshl-Int32` (32 -Int32 n)) };

  ////////////////////////////////////////

  q = prim ref 0;

  block = {
    enumRange32 0 16 { n => a[n] >^ w[n] };
    enumRange32 16 64 { n =>
      aa = ((ror w[n -Int32 15]  7) `bitxor-Int32` (ror w[n -Int32 15] 18)) `bitxor-Int32` (w[n -Int32 15] `bitlshr-Int32`  3);
      bb = ((ror w[n -Int32  2] 17) `bitxor-Int32` (ror w[n -Int32  2] 19)) `bitxor-Int32` (w[n -Int32  2] `bitlshr-Int32` 10);
      (w[n -Int32 16] +Int32 w[n -Int32 7] +Int32 aa +Int32 bb) >^ w[n];
    };

    t = newDArray0 8 { i => h[i] };
    enumRange32 0 64 { n =>
      xa = (ror t[0] 2) `bitxor-Int32` ((ror t[0] 13) `bitxor-Int32` (ror t[0] 22));
      xb = (ror t[4] 6) `bitxor-Int32` ((ror t[4] 11) `bitxor-Int32` (ror t[4] 25));
      xc = (t[0] `bitand-Int32` t[1]) `bitxor-Int32` ((t[0] `bitand-Int32` t[2]) `bitxor-Int32` (t[1] `bitand-Int32` t[2]));
      xd = (t[4] `bitand-Int32` t[5]) `bitxor-Int32` ((bitnot-Int32 t[4]) `bitand-Int32` t[6]);
      xe = t[7] +Int32 w[n] +Int32 cube[n] +Int32 xb +Int32 xd;
      t[6] >^ t[7]; t[5] >^ t[6]; t[4] >^ t[5]; (t[3] +Int32 xe) >^ t[4];
      t[2] >^ t[3]; t[1] >^ t[2]; t[0] >^ t[1]; (xa +Int32 xc +Int32 xe) >^ t[0];
    };
    enumRange32 0 8 { n => (t[n] +Int32 h[n]) >^ h[n] };
  };

  s2 = { x => x `bitlshr-Int32` 2 };
  sv = { x => 3 -Int32 (x `bitand-Int32` 3) };

  byte = { val : Int8 =>
    bitpos = sv q^ `bitshl-Int32` 3;
    q2 = s2 q^;
    v = a[q2];
    mask1 = bitnot-Int32 (0ff_16 `bitshl-Int32` bitpos);
    mask2 = (zext_i8_to_i32 val) `bitshl-Int32` bitpos;
    ((v `bitand-Int32` mask1) `bitor-Int32` mask2) >^ a[q2];
    if q^ ==Int32 63
      then block !; 0 >^ q;
      else (q^ +Int32 1) >^ q;
    end;
  };

  /////////////////////////////////

  arrayEnum inp { b => i => byte b };

  extract-byte-Int64-offset = { x => n =>
    ((x `bitshl-Int64` 3) `bitlshr-Int64` (n `bitshl-Int64` 3)) |> trunc_i64_to_i8
  };

  // finish
  byte 80_16;
  while { q^ !=Int32 56 } { byte 0 };
  enumRange64 0 8 { n =>
    extract-byte-Int64-offset (arrayLength inp) (7 -Int64 n) |> byte;
  };

  newDArray0 32 { n => extract-byte-Int32 h[s2 n] (sv n) };
};

sha256string :: { Array Int8 => Text };
sha256string = { a =>
  arrayFoldr a { i => t => tmp_Text_16_of_UInt8 i `mkTextConcat` t } ""
};

