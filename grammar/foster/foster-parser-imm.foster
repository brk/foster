snafuinclude Prelude "prelude";
snafuinclude PreludeFolds "prelude-folds";
/*
 The generated parser's interface is
    ParseAlloc :: { YyParser };
    Parse :: { YyParser => Int8 // major token number
                        => ImmToken // token value (yyminor)
                        => () };
 */
/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
//#include <stdio.h>
/************ Begin %include sections from the grammar ************************/
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols
** in a format understandable to "makeheaders".  This section is blank unless
** "lemon" is run with the "-m" command-line option.
***************** Begin makeheaders token definitions *************************/
/**************** End makeheaders token definitions ***************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    ParseTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    ParseCTX_*         As ParseARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
/************* Begin control #defines *****************************************/
YYNOCODE = 124;
// #define YYACTIONTYPE unsigned short int
//#define ParseTOKENTYPE void*
type case YYMINORTYPE
   of $Yy0 ImmToken
;
//type case Token of $MkToken ;
// #ifndef YYSTACKDEPTH
// #define YYSTACKDEPTH 100
// #endif
//#define ParseARG_SDECL
//#define ParseARG_PDECL
//#define ParseARG_PARAM
//#define ParseARG_FETCH
//#define ParseARG_STORE
//#define ParseCTX_SDECL
//#define ParseCTX_PDECL
//#define ParseCTX_PARAM
//#define ParseCTX_FETCH
//#define ParseCTX_STORE
YYNSTATE           = 136;
YYNRULE            = 152;
YYNTOKEN           = 48;
YY_MAX_SHIFT       = 135;
YY_MIN_SHIFTREDUCE = 257;
YY_MAX_SHIFTREDUCE = 408;
YY_ERROR_ACTION    = 409;
YY_ACCEPT_ACTION   = 410;
YY_NO_ACTION       = 411;
YY_MIN_REDUCE      = 412;
YY_MAX_REDUCE      = 563;
/************* End control #defines *******************************************/

/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
// #define YY_ACTTAB_COUNT (1097)
yy_action :: Array Int32;
yy_action = prim mach-array-literal
 /*     0 */    96   79   46  130  425   79   53  130   53   10
 /*    10 */    53  450  410   74   58  103  130  130  120  118
 /*    20 */   119   73  510  107   73  315   65  129  128  468
 /*    30 */   468   67   24   67  118  535   96   26   46  110
 /*    40 */    26   96  417  106   96   96  110   96   96   96
 /*    50 */   535  103  121   11  120   12  122   73  106   27
 /*    60 */    73   53   75  129  128   62  291  292  293   62
 /*    70 */   382  118   68   26  108   95   26   96   91  535
 /*    80 */    96   96  439   96   96   96  118   68  121   19
 /*    90 */    95  388  389    3  340  436  109  439  439  535
 /*   100 */   291  292  293   43  308  126   40   23   48   55
 /*   110 */    48   87   48   95   87    5   72   19   24  476
 /*   120 */    15    3   58    9   81  388  389  404  291  292
 /*   130 */   293   43  308  126  548   23   34   55  467  467
 /*   140 */    67   24   67   99   72  347   86   86   15  548
 /*   150 */   266    9   19  388  389   48    3   48  131   48
 /*   160 */    81   71  109  291  292  293   43  308  126  133
 /*   170 */    23   92   55  131   63   96   71   46   63   72
 /*   180 */   345  514  118   15  133   69    9  391  388  389
 /*   190 */    96  102  102   94    1   84   73  118   83   73
 /*   200 */   548    7  129  128  431   71   96  520   46   99
 /*   210 */    13   99   26   50  415   26   96   71  265   96
 /*   220 */    96   96   96   96   96   71  526   73   82  118
 /*   230 */    73   56  111  129  128   64  490   96   48   46
 /*   240 */    48  443   48   26  118  118   26   96   70  428
 /*   250 */    96   96   96   96   96   96   61  117   73   89
 /*   260 */   118   73   90  443  129  128  291  292  293   58
 /*   270 */   367   82  353   96   26   46  517   26   96   44
 /*   280 */    22   96   96   80   96   96   96  435   96  435
 /*   290 */    85  435  132  515   73   39   33   73   14  385
 /*   300 */   129  128   41  530   96  555   46  555  558  555
 /*   310 */    26   31  456   26   96  356   28   96   96   96
 /*   320 */    96   96   96   30  124   73   51   78   73  425
 /*   330 */   105  129  128   78  309   96   52   46  291  292
 /*   340 */   293   26  339   54   26   96   32    2   96   96
 /*   350 */    96   96   96   96   47  100   73  331   20   73
 /*   360 */   333   76  129  128   77   25  258  268  267  271
 /*   370 */    37   96   26   46   59   26   96  264  332   96
 /*   380 */    96    4   96   96   96  361   96  341   60  348
 /*   390 */   350  125   73   29   42   73  346   16  129  128
 /*   400 */   390    6   96  357   46    8   17   18   26  316
 /*   410 */   263   26   96   21   49   96   96   96   96   96
 /*   420 */    96  412  411  452  411  411  452  411  452  129
 /*   430 */   128  411  411   96  411   46  411  411  411   26
 /*   440 */   411  411   26   96  411  411   96   96   96   96
 /*   450 */    96   96  411  525   73  411  411   73   27  384
 /*   460 */   129  128  411   61  411  291  292  293  411  382
 /*   470 */    26  411  411   26   96  411  411   96   96   35
 /*   480 */    96   96   96  411  411   19  291  292  293    3
 /*   490 */   388  389  411  411   98  411  291  292  293   43
 /*   500 */   308  126   36   23  411   55   48  411   48  411
 /*   510 */    48  411   72   19  411   66   15    3  411    9
 /*   520 */   433  388  389  411  291  292  293   96  411   46
 /*   530 */   411   23   48   55   48  411   48  411  411  411
 /*   540 */    72  411   96   96   15   46  411    9  411  388
 /*   550 */   389   71  411  411  115  291  292  293   96  411
 /*   560 */    98   92  329   98   26  411   71   26   96  411
 /*   570 */   518   96   96  411   96   96   96  411  411   96
 /*   580 */    26   46  104   26   96  411  433   96   96  116
 /*   590 */    96   96   96  411   96   71  411  411   96  411
 /*   600 */    46   48  411   48  411   48  127   71  411  411
 /*   610 */   411  523  411   96  411   71   26  411  561   26
 /*   620 */    96  411  411   96   96   93   96   96   96   96
 /*   630 */    48   46   48  411   48   26  411  563   26   96
 /*   640 */   411  411   96   96   96   96   96   96   96   48
 /*   650 */    46   48  411   48  411  116  459  411  411  411
 /*   660 */   411  411  411   96  411  411   26  411  411   26
 /*   670 */    96  411  411   96   96  458   96   96   96   96
 /*   680 */   411   46  411  411  561   26  411  411   26   96
 /*   690 */   411  411   96   96   96   96   96   96   96  411
 /*   700 */    46  411  411  563  411  411  460  411  411  411
 /*   710 */   411  411  411   96  411  411   26  411  507   26
 /*   720 */    96  411  411   96   96   88   96   96   96   96
 /*   730 */    48   46   48  411   48   26  411  411   26   96
 /*   740 */   411  411   96   96   96   96   96   96   96  411
 /*   750 */    46  411  411  411  411  411  114  411  411  411
 /*   760 */   411  411  411   96  411  411   26  411  411   26
 /*   770 */    96  411  411   96   96  550   96   96   96  411
 /*   780 */   411  411  411  411  507   26  411  411   26   96
 /*   790 */   411  411   96   96  411   96   96   96  411   71
 /*   800 */    19   96  411  113    3  411  411  411  411   92
 /*   810 */   411  291  292  293   71  411   96   96  411   45
 /*   820 */    55  411  411  411  411  411  411   72  411   71
 /*   830 */   104   15   96  411    9  411  388  389   26   92
 /*   840 */   411   26   96   71   71   96   96  411   96   96
 /*   850 */    96  411  411  411   26   71  134   26   96  524
 /*   860 */   542   96   96   71   96   96   96   96   48  474
 /*   870 */    48  411   48   71  411  290  291  292  293  411
 /*   880 */   308  126   96  411  411   71  411  411  411  411
 /*   890 */    19   96  411   71    3  411  411  411  411  411
 /*   900 */   411  291  292  293   26  411   96   26   96  411
 /*   910 */   411   96   96  411   96   96   96   72   96  411
 /*   920 */   411   15  134  411    9  411  388  389  411  411
 /*   930 */   411  482   96   96   35   96   96  411   96   96
 /*   940 */    96  291  292  293  411   71  411  411  411  411
 /*   950 */   411  411  411  411  411   92  411   36  480   96
 /*   960 */    71  411   96   96  411   96   96   96  411  411
 /*   970 */    27  411  411  411  411   61  101  291  292  293
 /*   980 */    71  382  411  411  411  411  411  411  411   71
 /*   990 */    92   35  402  411  411   71  411  411  291  292
 /*  1000 */   293   71  388  389  411  411  411  411  411   71
 /*  1010 */   101  466  135  123   36  411  411  112  411   57
 /*  1020 */    97  411  411   92   71  411  411   66  123  291
 /*  1030 */   292  293  531  411  411  411   71  411  411  411
 /*  1040 */   411  411   92   35   71  411   38  531  411  411
 /*  1050 */   291  292  293  411  411  411  411  123  411  411
 /*  1060 */   411  411  411  411  411  411   36  411  411  123
 /*  1070 */   411  411  411  411  411  411  531  123  411  411
 /*  1080 */   411  411  411  411  411  411  411  411  531  411
 /*  1090 */   411  411  411  411  411  411  531
;
yy_lookahead :: Array Int8;
yy_lookahead = prim mach-array-literal
 /*     0 */    53   58   55   68   61   62   66   72   68    3
 /*    10 */    70   76   48   49   11   68   81   82   71   53
 /*    20 */    73   74   56    2   77   25   26   80   81   85
 /*    30 */    86   87   88   89   68   53   53   90   55   60
 /*    40 */    93   94   52   53   97   98   67  100  101  102
 /*    50 */    68   68  105   39   71   41   73   74   68   11
 /*    60 */    77  121   15   80   81   57   18   19   20   61
 /*    70 */    22   53   53   90   56   53   93   94   37   97
 /*    80 */    97   98   53  100  101  102   68   68  105    7
 /*    90 */    68   43   44   11   12   68   54   68   69  117
 /*   100 */    18   19   20   21   22   23   14   25   66   27
 /*   110 */    68   75   70   91   78   33   34    7   88   89
 /*   120 */    38   11   11   41   13   43   44   35   18   19
 /*   130 */    20   21   22   23   53   25   42   27   85   86
 /*   140 */    87   88   89   54   34   35  114  115   38   68
 /*   150 */     3   41    7   43   44   66   11   68   53   70
 /*   160 */    13   53  120   18   19   20   21   22   23   53
 /*   170 */    25   63   27   68   57   53   68   55   61   34
 /*   180 */    35  108   53   38   68   56   41   32   43   44
 /*   190 */    68   83   84  103  104   73   74   68   12   77
 /*   200 */   119   46   80   81   65   97   53  112   55  120
 /*   210 */    24  122   90   50   51   93   94  109    3   97
 /*   220 */    98   68  100  101  102  117   73   74   13   53
 /*   230 */    77    6   56   80   81   10   96   53   66   55
 /*   240 */    68   14   70   90   68   53   93   94   56   62
 /*   250 */    97   98   68  100  101  102   16   73   74   63
 /*   260 */    68   77   63   36   80   81   18   19   20   11
 /*   270 */    40   13   24   53   90   55  111   93   94    4
 /*   280 */     5   97   98  110  100  101  102   66   68   68
 /*   290 */    12   70  120   73   74   15   13   77   15   12
 /*   300 */    80   81   24  115   53   66   55   68  111   70
 /*   310 */    90   24   78   93   94   32   13   97   98   68
 /*   320 */   100  101  102   13   73   74   64   59   77   61
 /*   330 */    99   80   81   65   12   53   64   55   18   19
 /*   340 */    20   90   32  106   93   94   24  104   97   98
 /*   350 */    68  100  101  102  116   73   74   28   29   77
 /*   360 */    31  107   80   81   95   92    3    3    3   12
 /*   370 */     4   53   90   55    7   93   94    3   30   97
 /*   380 */    98   39  100  101  102   12   68   12   36   35
 /*   390 */    14   73   74   11   36   77   35    5   80   81
 /*   400 */    32   39   53   32   55   45    5    5   90   26
 /*   410 */     3   93   94   36   36   97   98   68  100  101
 /*   420 */   102    0  124   74  124  124   77  124   79   80
 /*   430 */    81  124  124   53  124   55  124  124  124   90
 /*   440 */   124  124   93   94  124  124   97   98   68  100
 /*   450 */   101  102  124   73   74  124  124   77   11   12
 /*   460 */    80   81  124   16  124   18   19   20  124   22
 /*   470 */    90  124  124   93   94  124  124   97   98   11
 /*   480 */   100  101  102  124  124    7   18   19   20   11
 /*   490 */    43   44  124  124   54  124   18   19   20   21
 /*   500 */    22   23   34   25  124   27   66  124   68  124
 /*   510 */    70  124   34    7  124   47   38   11  124   41
 /*   520 */    54   43   44  124   18   19   20   53  124   55
 /*   530 */   124   25   66   27   68  124   70  124  124  124
 /*   540 */    34  124   68   53   38   55  124   41  124   43
 /*   550 */    44   53  124  124   80   18   19   20   68  124
 /*   560 */   120   63   25  123   90  124   68   93   94  124
 /*   570 */    80   97   98  124  100  101  102  124  124   53
 /*   580 */    90   55   84   93   94  124  120   97   98   54
 /*   590 */   100  101  102  124   68   97  124  124   53  124
 /*   600 */    55   66  124   68  124   70   80  109  124  124
 /*   610 */   124  113  124   68  124  117   90  124   54   93
 /*   620 */    94  124  124   97   98   80  100  101  102   53
 /*   630 */    66   55   68  124   70   90  124   54   93   94
 /*   640 */   124  124   97   98   68  100  101  102   53   66
 /*   650 */    55   68  124   70  124  120   80  124  124  124
 /*   660 */   124  124  124   68  124  124   90  124  124   93
 /*   670 */    94  124  124   97   98   80  100  101  102   53
 /*   680 */   124   55  124  124  120   90  124  124   93   94
 /*   690 */   124  124   97   98   68  100  101  102   53  124
 /*   700 */    55  124  124  120  124  124   80  124  124  124
 /*   710 */   124  124  124   68  124  124   90  124   54   93
 /*   720 */    94  124  124   97   98   80  100  101  102   53
 /*   730 */    66   55   68  124   70   90  124  124   93   94
 /*   740 */   124  124   97   98   68  100  101  102   53  124
 /*   750 */    55  124  124  124  124  124   80  124  124  124
 /*   760 */   124  124  124   68  124  124   90  124  124   93
 /*   770 */    94  124  124   97   98   80  100  101  102  124
 /*   780 */   124  124  124  124  120   90  124  124   93   94
 /*   790 */   124  124   97   98  124  100  101  102  124   53
 /*   800 */     7   53  124   55   11  124  124  124  124   63
 /*   810 */   124   18   19   20   68  124   68   53  124   55
 /*   820 */    27  124  124  124  124  124  124   34  124   53
 /*   830 */    84   38   68  124   41  124   43   44   90   63
 /*   840 */   124   93   94   97   68   97   98  124  100  101
 /*   850 */   102  124  124  124   90  109   54   93   94  113
 /*   860 */    84   97   98  117  100  101  102   53   66   55
 /*   870 */    68  124   70   97  124   17   18   19   20  124
 /*   880 */    22   23   68  124  124  109  124  124  124  124
 /*   890 */     7   53  124  117   11  124  124  124  124  124
 /*   900 */   124   18   19   20   90  124   68   93   94  124
 /*   910 */   124   97   98  124  100  101  102   34   53  124
 /*   920 */   124   38  120  124   41  124   43   44  124  124
 /*   930 */   124   93   94   68   11   97   98  124  100  101
 /*   940 */   102   18   19   20  124   53  124  124  124  124
 /*   950 */   124  124  124  124  124   63  124   34   93   94
 /*   960 */    68  124   97   98  124  100  101  102  124  124
 /*   970 */    11  124  124  124  124   16   84   18   19   20
 /*   980 */    53   22  124  124  124  124  124  124  124   97
 /*   990 */    63   11   12  124  124   68  124  124   18   19
 /*  1000 */    20  109   43   44  124  124  124  124  124  117
 /*  1010 */   118   84    1   53   34  124  124    6  124    8
 /*  1020 */     9  124  124   63   97  124  124   47   68   18
 /*  1030 */    19   20   53  124  124  124  109  124  124  124
 /*  1040 */   124  124   63   11  117  124   14   68  124  124
 /*  1050 */    18   19   20  124  124  124  124   97  124  124
 /*  1060 */   124  124  124  124  124  124   34  124  124  109
 /*  1070 */   124  124  124  124  124  124   97  117  124  124
 /*  1080 */   124  124  124  124  124  124  124  124  109  124
 /*  1090 */   124  124  124  124  124  124  117
;
YY_SHIFT_COUNT   = (135);
YY_SHIFT_MIN     = (0);
YY_SHIFT_MAX     = (1032);
yy_shift_ofst :: Array Int32;
yy_shift_ofst = prim mach-array-literal 
 /*     0 */  1097  110  145   82  478  478  478  478  478  478
 /*    10 */   478  478  506  506  506  506  506  506  506  506
 /*    20 */   506  506  793  793  793  883  883  447  959  959
 /*    30 */   959  959  959  959  959  980  468  468  468  468
 /*    40 */   468  468  468  858  468    0    0   48  923  923
 /*    50 */  1011 1032  923  923  248  537  320  320  320  320
 /*    60 */   320  320  111  258  320  320  320    0   47    3
 /*    70 */     3   94   41    6   21  320  283  329  147  215
 /*    80 */   186  240  240  230  280  230   94    6  303 1097
 /*    90 */  1097 1097 1097 1097 1097 1097 1097  225   92  278
 /*   100 */   155  287  322  227   14  310  275  363  364  365
 /*   110 */   366  357  367  374  348  342  373  375  352  354
 /*   120 */   358  376  361  362  368  360  382  371  392  401
 /*   130 */   402  383  377  378  407  421
;
YY_REDUCE_COUNT  = (96);
YY_REDUCE_MIN    = (-65);
YY_REDUCE_MAX    = (979);
yy_reduce_ofst :: Array Int32;
yy_reduce_ofst = prim mach-array-literal
 /*     0 */   -36  -53  -17  122  153  184  220  251  282  318
 /*    10 */   349  380  474  490  526  545  576  595  626  645
 /*    20 */   676  695  748  764  814  838  865  892  498  108
 /*    30 */   746  776  927  960  979   89  440   42  466  535
 /*    40 */   564  583  664  -65  802  -56   53  -18  -60  172
 /*    50 */   -10  221  221  239  -34   22   18  129  176  192
 /*    60 */    81   29  268  -57   19  105  116   30  -21    8
 /*    70 */   117   32   90   36  163   27   73  140  139  187
 /*    80 */    95  196  199  165  173  197  188  234  231  262
 /*    90 */   272  237  238  254  243  273  269
;
yy_default :: Array Int32;
yy_default = prim mach-array-literal 
 /*     0 */   414  409  409  409  409  409  409  409  409  409
 /*    10 */   453  409  409  409  409  409  409  409  409  409
 /*    20 */   409  409  409  409  409  478  477  409  409  409
 /*    30 */   409  409  409  409  409  409  409  409  409  409
 /*    40 */   409  409  409  409  409  472  472  532  553  409
 /*    50 */   409  432  429  552  409  409  409  409  409  409
 /*    60 */   409  409  409  409  409  409  409  469  437  409
 /*    70 */   409  528  504  409  416  409  409  485  409  409
 /*    80 */   409  409  409  521  519  521  527  449  409  434
 /*    90 */   434  509  534  513  504  481  489  409  409  409
 /*   100 */   409  409  409  441  409  409  409  409  409  409
 /*   110 */   409  409  409  409  409  409  409  409  547  409
 /*   120 */   506  409  409  409  409  409  409  409  409  457
 /*   130 */   409  409  409  409  409  409
;
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/

//  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
//      (Int8)
//  YYCODETYPE major;      /* The major token value.  This is the code
//                         ** number for the token at this stack level */
//      (Int8)
//  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
//                         ** is the value of the token  */

/* The state of the parser is completely contained in an instance of
** the following structure */
type case YyParser
  of $YyParser
      (Ref Int32) // yytop;          /* Index of top element of the stack */
      (Ref Int32) //yyerrcnt;                 /* Shifts left before out of the error */
      //ParseARG_SDECL                /* A place to hold %extra_argument */
      //ParseCTX_SDECL                /* A place to hold %extra_context */
      (Ref (Array Int32)) // yystackStateno; /* The parser's stack */
      (Ref (Array Int8)) // yystackMajor;   /* The parser's stack */
      (Ref (Array YYMINORTYPE)) //  yystackMinor;   /* The parser's stack */
;

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
yyTokenName :: { Int32 => Text };
yyTokenName = { x =>
  case x
     of    0 -> "$"
     of    1 -> "FINI"
     of    2 -> "INCLUDE"
     of    3 -> "SEMI"
     of    4 -> "DCOLON"
     of    5 -> "EQUAL"
     of    6 -> "TYPE"
     of    7 -> "CASE"
     of    8 -> "EFFECT"
     of    9 -> "FOREIGN"
     of   10 -> "IMPORT"
     of   11 -> "LPAREN"
     of   12 -> "RPAREN"
     of   13 -> "OF"
     of   14 -> "DARROW"
     of   15 -> "AS"
     of   16 -> "DOLLAR"
     of   17 -> "OPRNAME"
     of   18 -> "SMALLIDENT"
     of   19 -> "UPPERIDENT"
     of   20 -> "UNDERIDENT"
     of   21 -> "REC"
     of   22 -> "UNDERSCORE"
     of   23 -> "LET"
     of   24 -> "COMMA"
     of   25 -> "SYMBOL"
     of   26 -> "BACKTICK"
     of   27 -> "PRIM"
     of   28 -> "CARET"
     of   29 -> "LBRACK"
     of   30 -> "RBRACK"
     of   31 -> "BANG"
     of   32 -> "END"
     of   33 -> "COMPILES"
     of   34 -> "LCURLY"
     of   35 -> "RCURLY"
     of   36 -> "COLON"
     of   37 -> "FORALL"
     of   38 -> "HANDLE"
     of   39 -> "SARROW"
     of   40 -> "HASH"
     of   41 -> "IF"
     of   42 -> "OR"
     of   43 -> "NUM"
     of   44 -> "STR"
     of   45 -> "THEN"
     of   46 -> "ELSE"
     of   47 -> "PERCENT"
     of   48 -> "transunit"
     of   49 -> "imports_star"
     of   50 -> "item_star"
     of   51 -> "imports"
     of   52 -> "item"
     of   53 -> "x"
     of   54 -> "t"
     of   55 -> "phrase"
     of   56 -> "tyformal"
     of   57 -> "parens_tyformal_star"
     of   58 -> "datactor_star"
     of   59 -> "effectctor_star"
     of   60 -> "asid_opt"
     of   61 -> "parens_tyformal"
     of   62 -> "datactor"
     of   63 -> "dctor"
     of   64 -> "tatom_star"
     of   65 -> "effectctor"
     of   66 -> "tatom"
     of   67 -> "asid"
     of   68 -> "id"
     of   69 -> "ctor"
     of   70 -> "a"
     of   71 -> "pid"
     of   72 -> "xid"
     of   73 -> "stmts"
     of   74 -> "stmt_start"
     of   75 -> "stmt_cont_star"
     of   76 -> "pbinding"
     of   77 -> "ext_pbinding"
     of   78 -> "stmt_cont"
     of   79 -> "stmt_start_opt"
     of   80 -> "e"
     of   81 -> "patlhs"
     of   82 -> "patbind"
     of   83 -> "comma_separated_list_p"
     of   84 -> "p"
     of   85 -> "binops_opt"
     of   86 -> "binops"
     of   87 -> "binop_phrase_plus"
     of   88 -> "binop"
     of   89 -> "binop_phrase"
     of   90 -> "lvalue_plus"
     of   91 -> "nopr"
     of   92 -> "lvalue_star"
     of   93 -> "lvalue"
     of   94 -> "atom"
     of   95 -> "suffix_star"
     of   96 -> "suffix"
     of   97 -> "lit"
     of   98 -> "ifexpr"
     of   99 -> "of_pmatch_plus"
     of  100 -> "tuple"
     of  101 -> "handler"
     of  102 -> "valabs"
     of  103 -> "foralls"
     of  104 -> "formals"
     of  105 -> "formal"
     of  106 -> "tyformal_star"
     of  107 -> "effmatch_star"
     of  108 -> "effmatch"
     of  109 -> "patside"
     of  110 -> "comma_e_star"
     of  111 -> "hash_opt"
     of  112 -> "comma_e"
     of  113 -> "pmatch"
     of  114 -> "orpatside_plus"
     of  115 -> "orpatside"
     of  116 -> "patom_star"
     of  117 -> "patom"
     of  118 -> "p_sepby_COMMA"
     of  119 -> "kind"
     of  120 -> "tp"
     of  121 -> "tatom_plus"
     of  122 -> "t_sepby_COMMA"
     of  123 -> "t_sepby_DARROW"
     of _ -> "UNKNOWN"
  end
};

yystackStateno = { p : YyParser =>
  case p of $YyParser _ _ /*_ _*/ ra _ _ -> ra^ end
};
yystackMajor = { p : YyParser =>
  case p of $YyParser _ _ /*_ _*/ _ ra _ -> ra^ end
};
yystackMinor = { p : YyParser =>
  case p of $YyParser _ _ /*_ _*/ _ _ ra -> ra^ end
};
yystackStatenoRef = { p : YyParser =>
  case p of $YyParser _ _ /*_ _*/ ra _ _ -> ra end
};
yystackMajorRef = { p : YyParser =>
  case p of $YyParser _ _ /*_ _*/ _ ra _ -> ra end
};
yystackMinorRef = { p : YyParser =>
  case p of $YyParser _ _ /*_ _*/ _ _ ra -> ra end
};

stackSize = { p : YyParser =>
  arrayLength32 (yystackStateno p);
};

regrow :: forall (t:Type) { Int32 => Ref (Array t) => () };
regrow = { newSize => ra =>
  old = ra^;
  nu  = allocDArray newSize;
  arrayEnum old { v => idx => v >^ nu[idx] };
  nu >^ ra;
  ()
};

/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
yyGrowStack = { p : YyParser =>
  newSize = ((stackSize p) *Int32 2) +Int32 100;

  regrow newSize (yystackStatenoRef p);
  regrow newSize (yystackMajorRef p);
  regrow newSize (yystackMinorRef p);
};

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
ParseAlloc :: { YyParser };
ParseAlloc = {
  //ParseCTX_STORE
  p = YyParser
           (prim ref 0) // yytop
           (prim ref -1) // yyerrcnt
           /*
           (prim ref ()) // arg
           (prim ref ()) // ctx
           */
           (prim ref (prim mach-array-literal 0)) // stateno
           (prim ref (prim mach-array-literal 0)) // major
           (prim ref (allocDArray:[YYMINORTYPE] 0)) // minor
           ;
  yyGrowStack p;
  p
};


/********* Begin destructor definitions **(should be empty)********************/
/********* End destructor definitions *****************************************/

yytop :: { YyParser => Int32 };
yytop = { p : YyParser => case p of $YyParser r _ /*_ _*/ _ _ _ -> r^ end };

yytopRef :: { YyParser => Ref Int32 };
yytopRef = { p : YyParser => case p of $YyParser r _ /*_ _*/ _ _ _ -> r end };

yyerrcnt :: { YyParser => Int32 };
yyerrcnt = { p : YyParser => case p of $YyParser _ r /*_ _*/ _ _ _ -> r^ end };
yyerrcntRef :: { YyParser => Ref Int32 };
yyerrcntRef = { p : YyParser => case p of $YyParser _ r /*_ _*/ _ _ _ -> r end };

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
yy_pop_parser_stack = { pParser : YyParser =>
  //assert( pParser->yytos!=0 );
  //assert( pParser->yytos > pParser->yystack );
  pParser `bumpTopBy` -1;
};

/*
** Clear all secondary memory allocations from the parser
*/
ParseFinalize = { pParser : YyParser =>
  while { (yytop pParser) >SInt32 0 } { yy_pop_parser_stack pParser };
};

/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
ParseFree = { p : YyParser =>
  ParseFinalize p;
};

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
yy_find_shift_action :: { Int8 => Int32 => Int32 };
yy_find_shift_action = {
      iLookAhead : Int8 =>    /* The look-ahead token */
      stateno    : Int32 =>   /* Current state number */
  if stateno >SInt32 YY_MAX_SHIFT
    then stateno
    else
      //REC loop = {
        i = yy_shift_ofst[stateno] +Int32 (zext_i8_to_i32 iLookAhead);
        /*
        assert( i>=0 );
        // assert( i+YYNTOKEN <=SInt32 arraySize32 yy_lookahead );
        assert( iLookAhead!=YYNOCODE );
        assert( iLookAhead < YYNTOKEN );
        */

        if  { i >=SInt32 arrayLength32 yy_lookahead } `oror` { yy_lookahead[i] !=Int8 iLookAhead }
          then
/*#ifdef YYFALLBACK
          Int8 iFallback;            // Fallback token
          if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
                && (iFallback = yyFallback[iLookAhead])!=0 ){
            assert( yyFallback[iFallback]==0 ); // Fallback loop must terminate
            iLookAhead = iFallback;
            continue;
          }
#endif*/
          yy_default[stateno]
        else
          yy_action[i]
        end
      //};
  end
};

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
yy_find_reduce_action :: { Int32 => Int8 => Int32 };
yy_find_reduce_action = {
    stateno : Int32 =>     /* Current state number */
    iLookAhead : Int8 =>    /* The look-ahead token */
//#ifdef YYERRORSYMBOL
//  if( stateno>YY_REDUCE_COUNT ){
//    return yy_default[stateno];
//  }
//#else
    //assert( stateno<=YY_REDUCE_COUNT );
//#endif
  //assert( iLookAhead!=YYNOCODE );
  i = yy_reduce_ofst[stateno] +Int32 (zext_i8_to_i32 iLookAhead);
//#ifdef YYERRORSYMBOL
//  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
//    return yy_default[stateno];
//  }
//#else
//  assert( i>=0 && i<YY_ACTTAB_COUNT );
//  assert( yy_lookahead[i]==iLookAhead );
//#endif
  yy_action[i]
};

/*
** The following routine is called if the stack overflows.
*/
yyStackOverflow = { yypParser : YyParser =>
   //ParseARG_FETCH
   //ParseCTX_FETCH
   while { (yytop yypParser) >SInt32 0 } { yy_pop_parser_stack yypParser };
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
/******** End %stack_overflow code ********************************************/
   //ParseARG_STORE /* Suppress warning about unused %extra_argument var */
   //ParseCTX_STORE
};

bumpTopBy = { yypParser => n => r = yytopRef yypParser; (r^ +Int32 n) >^ r; () };
growStackIfNeeded = { yypParser =>
  if (yytop yypParser) >=SInt32 stackSize yypParser then
    yyGrowStack yypParser;
  end
};

/*
** Perform a shift action.
*/
yy_shift = {
      yypParser : YyParser => /* The parser to be shifted */
      yyNewState : Int32 =>   /* The new state to shift in */
      yyMajor : Int8 =>       /* The major token to shift in */
      yyMinor : ImmToken =>   /* The minor token to shift in */
  yypParser `bumpTopBy` 1;
  growStackIfNeeded yypParser;
  newstate =
      if yyNewState >SInt32 YY_MAX_SHIFT then
        yyNewState +Int32 (YY_MIN_REDUCE -Int32 YY_MIN_SHIFTREDUCE);
      else
        yyNewState
      end;
  newstate >^ (yystackStateno yypParser)[yytop yypParser];
  yyMajor  >^ (yystackMajor yypParser)[yytop yypParser];
  (Yy0 yyMinor) >^ (yystackMinor yypParser)[yytop yypParser];
};

/* The following tables contain information about every rule that
** is used during the reduce.
*/
/* yyRuleInfoNRhs: Negative of the number of RHS symbols in the rule */
/* yyRuleInfoLhs:  Symbol on the left-hand side of the rule */
yyRuleInfoNRhs :: Array Int32;
yyRuleInfoNRhs = prim mach-array-literal
    -3      /* (0) transunit ::= imports_star item_star FINI */
    -2      /* (1) imports ::= INCLUDE SEMI */
     0      /* (2) imports_star ::= */
    -2      /* (3) imports_star ::= imports_star imports */
     0      /* (4) item_star ::= */
    -2      /* (5) item_star ::= item_star item */
    -4      /* (6) item ::= x DCOLON t SEMI */
    -4      /* (7) item ::= x EQUAL phrase SEMI */
    -6      /* (8) item ::= TYPE CASE tyformal parens_tyformal_star datactor_star SEMI */
    -5      /* (9) item ::= EFFECT tyformal parens_tyformal_star effectctor_star SEMI */
    -7      /* (10) item ::= FOREIGN IMPORT x asid_opt DCOLON t SEMI */
    -4      /* (11) item ::= FOREIGN TYPE tyformal SEMI */
    -1      /* (12) parens_tyformal_star ::= parens_tyformal */
    -2      /* (13) parens_tyformal_star ::= parens_tyformal_star parens_tyformal */
    -3      /* (14) parens_tyformal ::= LPAREN tyformal RPAREN */
    -1      /* (15) datactor_star ::= datactor */
    -2      /* (16) datactor_star ::= datactor_star datactor */
    -3      /* (17) datactor ::= OF dctor tatom_star */
    -1      /* (18) effectctor_star ::= effectctor */
    -2      /* (19) effectctor_star ::= effectctor_star effectctor */
    -3      /* (20) effectctor ::= OF dctor tatom_star */
    -5      /* (21) effectctor ::= OF dctor tatom_star DARROW t */
     0      /* (22) tatom_star ::= */
    -2      /* (23) tatom_star ::= tatom_star tatom */
    -2      /* (24) asid ::= AS id */
     0      /* (25) asid_opt ::= */
    -1      /* (26) asid_opt ::= asid */
    -2      /* (27) dctor ::= DOLLAR ctor */
    -1      /* (28) ctor ::= x */
    -1      /* (29) x ::= id */
    -1      /* (30) a ::= id */
    -1      /* (31) pid ::= id */
    -1      /* (32) xid ::= id */
    -1      /* (33) xid ::= OPRNAME */
    -1      /* (34) id ::= SMALLIDENT */
    -1      /* (35) id ::= UPPERIDENT */
    -1      /* (36) id ::= UNDERIDENT */
    -2      /* (37) stmts ::= stmt_start stmt_cont_star */
    -2      /* (38) stmt_start ::= REC pbinding */
    -1      /* (39) stmt_start ::= ext_pbinding */
    -2      /* (40) stmt_cont ::= SEMI stmt_start_opt */
     0      /* (41) stmt_start_opt ::= */
    -1      /* (42) stmt_start_opt ::= stmt_start */
    -1      /* (43) stmt_cont_star ::= stmt_cont */
    -2      /* (44) stmt_cont_star ::= stmt_cont_star stmt_cont */
    -1      /* (45) ext_pbinding ::= e */
    -3      /* (46) ext_pbinding ::= e EQUAL e */
    -3      /* (47) ext_pbinding ::= patlhs EQUAL e */
    -3      /* (48) pbinding ::= patbind EQUAL e */
    -1      /* (49) patbind ::= xid */
    -1      /* (50) patbind ::= patlhs */
    -1      /* (51) patlhs ::= UNDERSCORE */
    -4      /* (52) patlhs ::= LET LPAREN comma_separated_list_p RPAREN */
    -1      /* (53) comma_separated_list_p ::= p */
    -3      /* (54) comma_separated_list_p ::= comma_separated_list_p COMMA p */
    -2      /* (55) e ::= phrase binops_opt */
    -3      /* (56) e ::= SYMBOL phrase binops_opt */
    -1      /* (57) binops ::= binop_phrase_plus */
    -1      /* (58) binop ::= SYMBOL */
    -3      /* (59) binop ::= BACKTICK x BACKTICK */
     0      /* (60) binops_opt ::= */
    -1      /* (61) binops_opt ::= binops */
    -2      /* (62) binop_phrase ::= binop phrase */
    -1      /* (63) binop_phrase_plus ::= binop_phrase */
    -2      /* (64) binop_phrase_plus ::= binop_phrase_plus binop_phrase */
    -1      /* (65) phrase ::= lvalue_plus */
    -3      /* (66) phrase ::= PRIM nopr lvalue_star */
    -1      /* (67) lvalue_plus ::= lvalue */
    -2      /* (68) lvalue_plus ::= lvalue_plus lvalue */
     0      /* (69) lvalue_star ::= */
    -2      /* (70) lvalue_star ::= lvalue_star lvalue */
    -1      /* (71) nopr ::= x */
    -1      /* (72) nopr ::= SYMBOL */
    -2      /* (73) lvalue ::= atom suffix_star */
    -1      /* (74) suffix ::= CARET */
    -3      /* (75) suffix ::= LBRACK e RBRACK */
    -1      /* (76) suffix ::= BANG */
     0      /* (77) suffix_star ::= */
    -2      /* (78) suffix_star ::= suffix_star suffix */
    -1      /* (79) atom ::= x */
    -1      /* (80) atom ::= lit */
    -1      /* (81) atom ::= ifexpr */
    -4      /* (82) atom ::= CASE e of_pmatch_plus END */
    -2      /* (83) atom ::= LPAREN RPAREN */
    -4      /* (84) atom ::= LPAREN COMPILES stmts RPAREN */
    -1      /* (85) atom ::= tuple */
    -1      /* (86) atom ::= handler */
    -1      /* (87) atom ::= valabs */
    -4      /* (88) valabs ::= LCURLY foralls formals RCURLY */
    -5      /* (89) valabs ::= LCURLY foralls formals stmts RCURLY */
    -3      /* (90) valabs ::= LCURLY formals RCURLY */
    -4      /* (91) valabs ::= LCURLY formals stmts RCURLY */
     0      /* (92) formals ::= */
    -3      /* (93) formals ::= formals formal DARROW */
    -1      /* (94) formal ::= pid */
    -3      /* (95) formal ::= pid COLON t */
    -3      /* (96) foralls ::= FORALL tyformal_star COMMA */
     0      /* (97) tyformal_star ::= */
    -2      /* (98) tyformal_star ::= tyformal_star tyformal */
    -4      /* (99) handler ::= HANDLE e effmatch_star END */
    -6      /* (100) handler ::= HANDLE e effmatch_star AS e END */
     0      /* (101) effmatch_star ::= */
    -2      /* (102) effmatch_star ::= effmatch_star effmatch */
    -4      /* (103) effmatch ::= OF patside SARROW stmts */
    -5      /* (104) tuple ::= LPAREN stmts AS t RPAREN */
    -5      /* (105) tuple ::= LPAREN stmts comma_e_star RPAREN hash_opt */
    -2      /* (106) comma_e ::= COMMA e */
     0      /* (107) comma_e_star ::= */
    -2      /* (108) comma_e_star ::= comma_e_star comma_e */
     0      /* (109) hash_opt ::= */
    -1      /* (110) hash_opt ::= HASH */
    -2      /* (111) of_pmatch_plus ::= OF pmatch */
    -3      /* (112) of_pmatch_plus ::= of_pmatch_plus OF pmatch */
    -3      /* (113) pmatch ::= p SARROW stmts */
    -5      /* (114) pmatch ::= p IF e SARROW stmts */
    -2      /* (115) p ::= patside orpatside_plus */
    -1      /* (116) p ::= patside */
    -1      /* (117) orpatside_plus ::= orpatside */
    -2      /* (118) orpatside_plus ::= orpatside_plus orpatside */
    -2      /* (119) orpatside ::= OR patside */
    -2      /* (120) patside ::= dctor patom_star */
    -1      /* (121) patside ::= patom */
     0      /* (122) patom_star ::= */
    -2      /* (123) patom_star ::= patom_star patom */
    -1      /* (124) patom ::= x */
    -1      /* (125) patom ::= UNDERSCORE */
    -1      /* (126) patom ::= lit */
    -2      /* (127) patom ::= LPAREN RPAREN */
    -3      /* (128) patom ::= LPAREN p_sepby_COMMA RPAREN */
    -1      /* (129) p_sepby_COMMA ::= p */
    -3      /* (130) p_sepby_COMMA ::= p_sepby_COMMA COMMA p */
    -1      /* (131) lit ::= NUM */
    -1      /* (132) lit ::= STR */
    -7      /* (133) ifexpr ::= IF stmts THEN stmts ELSE stmts END */
    -5      /* (134) ifexpr ::= IF stmts THEN stmts END */
    -1      /* (135) tyformal ::= x */
    -3      /* (136) tyformal ::= x COLON kind */
    -1      /* (137) kind ::= x */
    -6      /* (138) t ::= PERCENT x COLON tp COLON e */
    -1      /* (139) t ::= tp */
    -2      /* (140) tp ::= tatom tatom_plus */
    -1      /* (141) tp ::= tatom */
    -1      /* (142) tatom_plus ::= tatom */
    -2      /* (143) tatom_plus ::= tatom_plus tatom */
    -1      /* (144) tatom ::= a */
    -2      /* (145) tatom ::= LPAREN RPAREN */
    -4      /* (146) tatom ::= LPAREN t_sepby_COMMA RPAREN hash_opt */
    -3      /* (147) tatom ::= LCURLY t_sepby_DARROW RCURLY */
    -1      /* (148) t_sepby_DARROW ::= t */
    -3      /* (149) t_sepby_DARROW ::= t_sepby_DARROW DARROW t */
    -1      /* (150) t_sepby_COMMA ::= t */
    -3      /* (151) t_sepby_COMMA ::= t_sepby_COMMA COMMA t */
;
yyRuleInfoLhs :: Array Int8;
yyRuleInfoLhs = prim mach-array-literal
    48      /* (0) transunit ::= imports_star item_star FINI */
    51      /* (1) imports ::= INCLUDE SEMI */
    49      /* (2) imports_star ::= */
    49      /* (3) imports_star ::= imports_star imports */
    50      /* (4) item_star ::= */
    50      /* (5) item_star ::= item_star item */
    52      /* (6) item ::= x DCOLON t SEMI */
    52      /* (7) item ::= x EQUAL phrase SEMI */
    52      /* (8) item ::= TYPE CASE tyformal parens_tyformal_star datactor_star SEMI */
    52      /* (9) item ::= EFFECT tyformal parens_tyformal_star effectctor_star SEMI */
    52      /* (10) item ::= FOREIGN IMPORT x asid_opt DCOLON t SEMI */
    52      /* (11) item ::= FOREIGN TYPE tyformal SEMI */
    57      /* (12) parens_tyformal_star ::= parens_tyformal */
    57      /* (13) parens_tyformal_star ::= parens_tyformal_star parens_tyformal */
    61      /* (14) parens_tyformal ::= LPAREN tyformal RPAREN */
    58      /* (15) datactor_star ::= datactor */
    58      /* (16) datactor_star ::= datactor_star datactor */
    62      /* (17) datactor ::= OF dctor tatom_star */
    59      /* (18) effectctor_star ::= effectctor */
    59      /* (19) effectctor_star ::= effectctor_star effectctor */
    65      /* (20) effectctor ::= OF dctor tatom_star */
    65      /* (21) effectctor ::= OF dctor tatom_star DARROW t */
    64      /* (22) tatom_star ::= */
    64      /* (23) tatom_star ::= tatom_star tatom */
    67      /* (24) asid ::= AS id */
    60      /* (25) asid_opt ::= */
    60      /* (26) asid_opt ::= asid */
    63      /* (27) dctor ::= DOLLAR ctor */
    69      /* (28) ctor ::= x */
    53      /* (29) x ::= id */
    70      /* (30) a ::= id */
    71      /* (31) pid ::= id */
    72      /* (32) xid ::= id */
    72      /* (33) xid ::= OPRNAME */
    68      /* (34) id ::= SMALLIDENT */
    68      /* (35) id ::= UPPERIDENT */
    68      /* (36) id ::= UNDERIDENT */
    73      /* (37) stmts ::= stmt_start stmt_cont_star */
    74      /* (38) stmt_start ::= REC pbinding */
    74      /* (39) stmt_start ::= ext_pbinding */
    78      /* (40) stmt_cont ::= SEMI stmt_start_opt */
    79      /* (41) stmt_start_opt ::= */
    79      /* (42) stmt_start_opt ::= stmt_start */
    75      /* (43) stmt_cont_star ::= stmt_cont */
    75      /* (44) stmt_cont_star ::= stmt_cont_star stmt_cont */
    77      /* (45) ext_pbinding ::= e */
    77      /* (46) ext_pbinding ::= e EQUAL e */
    77      /* (47) ext_pbinding ::= patlhs EQUAL e */
    76      /* (48) pbinding ::= patbind EQUAL e */
    82      /* (49) patbind ::= xid */
    82      /* (50) patbind ::= patlhs */
    81      /* (51) patlhs ::= UNDERSCORE */
    81      /* (52) patlhs ::= LET LPAREN comma_separated_list_p RPAREN */
    83      /* (53) comma_separated_list_p ::= p */
    83      /* (54) comma_separated_list_p ::= comma_separated_list_p COMMA p */
    80      /* (55) e ::= phrase binops_opt */
    80      /* (56) e ::= SYMBOL phrase binops_opt */
    86      /* (57) binops ::= binop_phrase_plus */
    88      /* (58) binop ::= SYMBOL */
    88      /* (59) binop ::= BACKTICK x BACKTICK */
    85      /* (60) binops_opt ::= */
    85      /* (61) binops_opt ::= binops */
    89      /* (62) binop_phrase ::= binop phrase */
    87      /* (63) binop_phrase_plus ::= binop_phrase */
    87      /* (64) binop_phrase_plus ::= binop_phrase_plus binop_phrase */
    55      /* (65) phrase ::= lvalue_plus */
    55      /* (66) phrase ::= PRIM nopr lvalue_star */
    90      /* (67) lvalue_plus ::= lvalue */
    90      /* (68) lvalue_plus ::= lvalue_plus lvalue */
    92      /* (69) lvalue_star ::= */
    92      /* (70) lvalue_star ::= lvalue_star lvalue */
    91      /* (71) nopr ::= x */
    91      /* (72) nopr ::= SYMBOL */
    93      /* (73) lvalue ::= atom suffix_star */
    96      /* (74) suffix ::= CARET */
    96      /* (75) suffix ::= LBRACK e RBRACK */
    96      /* (76) suffix ::= BANG */
    95      /* (77) suffix_star ::= */
    95      /* (78) suffix_star ::= suffix_star suffix */
    94      /* (79) atom ::= x */
    94      /* (80) atom ::= lit */
    94      /* (81) atom ::= ifexpr */
    94      /* (82) atom ::= CASE e of_pmatch_plus END */
    94      /* (83) atom ::= LPAREN RPAREN */
    94      /* (84) atom ::= LPAREN COMPILES stmts RPAREN */
    94      /* (85) atom ::= tuple */
    94      /* (86) atom ::= handler */
    94      /* (87) atom ::= valabs */
   102      /* (88) valabs ::= LCURLY foralls formals RCURLY */
   102      /* (89) valabs ::= LCURLY foralls formals stmts RCURLY */
   102      /* (90) valabs ::= LCURLY formals RCURLY */
   102      /* (91) valabs ::= LCURLY formals stmts RCURLY */
   104      /* (92) formals ::= */
   104      /* (93) formals ::= formals formal DARROW */
   105      /* (94) formal ::= pid */
   105      /* (95) formal ::= pid COLON t */
   103      /* (96) foralls ::= FORALL tyformal_star COMMA */
   106      /* (97) tyformal_star ::= */
   106      /* (98) tyformal_star ::= tyformal_star tyformal */
   101      /* (99) handler ::= HANDLE e effmatch_star END */
   101      /* (100) handler ::= HANDLE e effmatch_star AS e END */
   107      /* (101) effmatch_star ::= */
   107      /* (102) effmatch_star ::= effmatch_star effmatch */
   108      /* (103) effmatch ::= OF patside SARROW stmts */
   100      /* (104) tuple ::= LPAREN stmts AS t RPAREN */
   100      /* (105) tuple ::= LPAREN stmts comma_e_star RPAREN hash_opt */
   112      /* (106) comma_e ::= COMMA e */
   110      /* (107) comma_e_star ::= */
   110      /* (108) comma_e_star ::= comma_e_star comma_e */
   111      /* (109) hash_opt ::= */
   111      /* (110) hash_opt ::= HASH */
    99      /* (111) of_pmatch_plus ::= OF pmatch */
    99      /* (112) of_pmatch_plus ::= of_pmatch_plus OF pmatch */
   113      /* (113) pmatch ::= p SARROW stmts */
   113      /* (114) pmatch ::= p IF e SARROW stmts */
    84      /* (115) p ::= patside orpatside_plus */
    84      /* (116) p ::= patside */
   114      /* (117) orpatside_plus ::= orpatside */
   114      /* (118) orpatside_plus ::= orpatside_plus orpatside */
   115      /* (119) orpatside ::= OR patside */
   109      /* (120) patside ::= dctor patom_star */
   109      /* (121) patside ::= patom */
   116      /* (122) patom_star ::= */
   116      /* (123) patom_star ::= patom_star patom */
   117      /* (124) patom ::= x */
   117      /* (125) patom ::= UNDERSCORE */
   117      /* (126) patom ::= lit */
   117      /* (127) patom ::= LPAREN RPAREN */
   117      /* (128) patom ::= LPAREN p_sepby_COMMA RPAREN */
   118      /* (129) p_sepby_COMMA ::= p */
   118      /* (130) p_sepby_COMMA ::= p_sepby_COMMA COMMA p */
    97      /* (131) lit ::= NUM */
    97      /* (132) lit ::= STR */
    98      /* (133) ifexpr ::= IF stmts THEN stmts ELSE stmts END */
    98      /* (134) ifexpr ::= IF stmts THEN stmts END */
    56      /* (135) tyformal ::= x */
    56      /* (136) tyformal ::= x COLON kind */
   119      /* (137) kind ::= x */
    54      /* (138) t ::= PERCENT x COLON tp COLON e */
    54      /* (139) t ::= tp */
   120      /* (140) tp ::= tatom tatom_plus */
   120      /* (141) tp ::= tatom */
   121      /* (142) tatom_plus ::= tatom */
   121      /* (143) tatom_plus ::= tatom_plus tatom */
    66      /* (144) tatom ::= a */
    66      /* (145) tatom ::= LPAREN RPAREN */
    66      /* (146) tatom ::= LPAREN t_sepby_COMMA RPAREN hash_opt */
    66      /* (147) tatom ::= LCURLY t_sepby_DARROW RCURLY */
   123      /* (148) t_sepby_DARROW ::= t */
   123      /* (149) t_sepby_DARROW ::= t_sepby_DARROW DARROW t */
   122      /* (150) t_sepby_COMMA ::= t */
   122      /* (151) t_sepby_COMMA ::= t_sepby_COMMA COMMA t */
;

setMinor = { val => yypParser => offset =>
  val >^ (yystackMinor yypParser)[yytop yypParser +Int32 offset];
};
getMinor = { yypParser => offset =>
  (yystackMinor yypParser)[yytop yypParser +Int32 offset]
};

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
/*YYACTIONTYPE*/ yy_reduce = {
  yypParser : YyParser =>      /* The parser */
  yyruleno : Int32 =>          /* Number of the rule by which to reduce */
  yyLookahead : Int8 =>       /* Lookahead token, or YYNOCODE if none */
  yyLookaheadToken : ImmToken =>  /* Value of the lookahead token */
  //ParseCTX_PDECL                   /* %extra_context */

  //int yygoto;                     /* The next state */
  //YYACTIONTYPE yyact;             /* The next action */
  //int yysize;                     /* Amount to pop the stack */
  //ParseARG_FETCH
  //(void)yyLookahead;
  //(void)yyLookaheadToken;

  /* Check that the stack is large enough to grow by a single entry
  ** if the RHS of the rule is empty.  This ensures that there is room
  ** enough on the stack to push the LHS value */
  if yyRuleInfoNRhs[yyruleno] ==Int32 0 then
    if (yytop yypParser) >=SInt32 ((stackSize yypParser) -Int32 1) then
      yyGrowStack yypParser
    end;
  end;

  //yymspStateno = &yypParser->yystackStateno[(yytop yypParser)];
  //yymspMajor = &yypParser->yystackMajor[(yytop yypParser)];
  //yymspMinor = &yypParser->yystackMinor[(yytop yypParser)];

  yylhsminor = prim ref (Yy0 ImmToken_nil);
  case yyruleno
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
      of 0 /* transunit ::= imports_star item_star FINI */
      or 14 /*! parens_tyformal ::= LPAREN tyformal RPAREN */
      or 17 /*! datactor ::= OF dctor tatom_star */
      or 20 /*! effectctor ::= OF dctor tatom_star */
      or 46 /*! ext_pbinding ::= e EQUAL e */
      or 47 /*! ext_pbinding ::= patlhs EQUAL e */
      or 48 /*! pbinding ::= patbind EQUAL e */
      or 54 /*! comma_separated_list_p ::= comma_separated_list_p COMMA p */
      or 56 /*! e ::= SYMBOL phrase binops_opt */
      or 59 /*! binop ::= BACKTICK x BACKTICK */
      or 66 /*! phrase ::= PRIM nopr lvalue_star */
      or 75 /*! suffix ::= LBRACK e RBRACK */
      or 90 /*! valabs ::= LCURLY formals RCURLY */
      or 93 /*! formals ::= formals formal DARROW */
      or 95 /*! formal ::= pid COLON t */
      or 96 /*! foralls ::= FORALL tyformal_star COMMA */
      or 112 /*! of_pmatch_plus ::= of_pmatch_plus OF pmatch */
      or 113 /*! pmatch ::= p SARROW stmts */
      or 128 /*! patom ::= LPAREN p_sepby_COMMA RPAREN */
      or 130 /*! p_sepby_COMMA ::= p_sepby_COMMA COMMA p */
      or 136 /*! tyformal ::= x COLON kind */
      or 147 /*! tatom ::= LCURLY t_sepby_DARROW RCURLY */
      or 149 /*! t_sepby_DARROW ::= t_sepby_DARROW DARROW t */
      or 151 /*! t_sepby_COMMA ::= t_sepby_COMMA COMMA t */
        -> 

setMinor yylhsminor^ yypParser -2;
      of 1 /* imports ::= INCLUDE SEMI */
      or 3 /*! imports_star ::= imports_star imports */
      or 5 /*! item_star ::= item_star item */
      or 13 /*! parens_tyformal_star ::= parens_tyformal_star parens_tyformal */
      or 16 /*! datactor_star ::= datactor_star datactor */
      or 19 /*! effectctor_star ::= effectctor_star effectctor */
      or 23 /*! tatom_star ::= tatom_star tatom */
      or 24 /*! asid ::= AS id */
      or 27 /*! dctor ::= DOLLAR ctor */
      or 37 /*! stmts ::= stmt_start stmt_cont_star */
      or 38 /*! stmt_start ::= REC pbinding */
      or 40 /*! stmt_cont ::= SEMI stmt_start_opt */
      or 44 /*! stmt_cont_star ::= stmt_cont_star stmt_cont */
      or 55 /*! e ::= phrase binops_opt */
      or 62 /*! binop_phrase ::= binop phrase */
      or 64 /*! binop_phrase_plus ::= binop_phrase_plus binop_phrase */
      or 68 /*! lvalue_plus ::= lvalue_plus lvalue */
      or 70 /*! lvalue_star ::= lvalue_star lvalue */
      or 73 /*! lvalue ::= atom suffix_star */
      or 78 /*! suffix_star ::= suffix_star suffix */
      or 83 /*! atom ::= LPAREN RPAREN */
      or 98 /*! tyformal_star ::= tyformal_star tyformal */
      or 102 /*! effmatch_star ::= effmatch_star effmatch */
      or 106 /*! comma_e ::= COMMA e */
      or 108 /*! comma_e_star ::= comma_e_star comma_e */
      or 111 /*! of_pmatch_plus ::= OF pmatch */
      or 115 /*! p ::= patside orpatside_plus */
      or 118 /*! orpatside_plus ::= orpatside_plus orpatside */
      or 119 /*! orpatside ::= OR patside */
      or 120 /*! patside ::= dctor patom_star */
      or 123 /*! patom_star ::= patom_star patom */
      or 127 /*! patom ::= LPAREN RPAREN */
      or 140 /*! tp ::= tatom tatom_plus */
      or 143 /*! tatom_plus ::= tatom_plus tatom */
      or 145 /*! tatom ::= LPAREN RPAREN */
        -> 

setMinor yylhsminor^ yypParser -1;
      of 2 /* imports_star ::= */
      or 4 /*! item_star ::= */
      or 22 /*! tatom_star ::= */
      or 25 /*! asid_opt ::= */
      or 41 /*! stmt_start_opt ::= */
      or 60 /*! binops_opt ::= */
      or 69 /*! lvalue_star ::= */
      or 77 /*! suffix_star ::= */
      or 92 /*! formals ::= */
      or 97 /*! tyformal_star ::= */
      or 101 /*! effmatch_star ::= */
      or 107 /*! comma_e_star ::= */
      or 109 /*! hash_opt ::= */
      or 122 /*! patom_star ::= */
        -> 

setMinor yylhsminor^ yypParser 1;
      of 6 /* item ::= x DCOLON t SEMI */
      or 7 /*! item ::= x EQUAL phrase SEMI */
      or 11 /*! item ::= FOREIGN TYPE tyformal SEMI */
      or 52 /*! patlhs ::= LET LPAREN comma_separated_list_p RPAREN */
      or 82 /*! atom ::= CASE e of_pmatch_plus END */
      or 84 /*! atom ::= LPAREN COMPILES stmts RPAREN */
      or 88 /*! valabs ::= LCURLY foralls formals RCURLY */
      or 91 /*! valabs ::= LCURLY formals stmts RCURLY */
      or 99 /*! handler ::= HANDLE e effmatch_star END */
      or 103 /*! effmatch ::= OF patside SARROW stmts */
      or 146 /*! tatom ::= LPAREN t_sepby_COMMA RPAREN hash_opt */
        -> 

setMinor yylhsminor^ yypParser -3;
      of 8 /* item ::= TYPE CASE tyformal parens_tyformal_star datactor_star SEMI */
      or 100 /*! handler ::= HANDLE e effmatch_star AS e END */
      or 138 /*! t ::= PERCENT x COLON tp COLON e */
        -> 

setMinor yylhsminor^ yypParser -5;
      of 9 /* item ::= EFFECT tyformal parens_tyformal_star effectctor_star SEMI */
      or 21 /*! effectctor ::= OF dctor tatom_star DARROW t */
      or 89 /*! valabs ::= LCURLY foralls formals stmts RCURLY */
      or 104 /*! tuple ::= LPAREN stmts AS t RPAREN */
      or 105 /*! tuple ::= LPAREN stmts comma_e_star RPAREN hash_opt */
      or 114 /*! pmatch ::= p IF e SARROW stmts */
      or 134 /*! ifexpr ::= IF stmts THEN stmts END */
        -> 

setMinor yylhsminor^ yypParser -4;
      of 10 /* item ::= FOREIGN IMPORT x asid_opt DCOLON t SEMI */
      or 133 /*! ifexpr ::= IF stmts THEN stmts ELSE stmts END */
        -> 

setMinor yylhsminor^ yypParser -6;
      of 12 /* parens_tyformal_star ::= parens_tyformal */
      or 15 /*! datactor_star ::= datactor */
      or 18 /*! effectctor_star ::= effectctor */
      or 26 /*! asid_opt ::= asid */
      or 28 /*! ctor ::= x */
      or 29 /*! x ::= id */
      or 30 /*! a ::= id */
      or 31 /*! pid ::= id */
      or 32 /*! xid ::= id */
      or 33 /*! xid ::= OPRNAME */
      or 34 /*! id ::= SMALLIDENT */
      or 35 /*! id ::= UPPERIDENT */
      or 36 /*! id ::= UNDERIDENT */
      or 39 /*! stmt_start ::= ext_pbinding */
      or 42 /*! stmt_start_opt ::= stmt_start */
      or 43 /*! stmt_cont_star ::= stmt_cont */
      or 45 /*! ext_pbinding ::= e */
      or 49 /*! patbind ::= xid */
      or 50 /*! patbind ::= patlhs */
      or 51 /*! patlhs ::= UNDERSCORE */
      or 53 /*! comma_separated_list_p ::= p */
      or 57 /*! binops ::= binop_phrase_plus */
      or 58 /*! binop ::= SYMBOL */
      or 61 /*! binops_opt ::= binops */
      or 63 /*! binop_phrase_plus ::= binop_phrase */
      or 65 /*! phrase ::= lvalue_plus */
      or 67 /*! lvalue_plus ::= lvalue */
      or 71 /*! nopr ::= x */
      or 72 /*! nopr ::= SYMBOL */
      or 74 /*! suffix ::= CARET */
      or 76 /*! suffix ::= BANG */
      or 79 /*! atom ::= x */
      or 80 /*! atom ::= lit */
      or 81 /*! atom ::= ifexpr */
      or 85 /*! atom ::= tuple */
      or 86 /*! atom ::= handler */
      or 87 /*! atom ::= valabs */
      or 94 /*! formal ::= pid */
      or 110 /*! hash_opt ::= HASH */
      or 116 /*! p ::= patside */
      or 117 /*! orpatside_plus ::= orpatside */
      or 121 /*! patside ::= patom */
      or 124 /*! patom ::= x */
      or 125 /*! patom ::= UNDERSCORE */
      or 126 /*! patom ::= lit */
      or 129 /*! p_sepby_COMMA ::= p */
      or 131 /*! lit ::= NUM */
      or 132 /*! lit ::= STR */
      or 135 /*! tyformal ::= x */
      or 137 /*! kind ::= x */
      or 139 /*! t ::= tp */
      or 141 /*! tp ::= tatom */
      or 142 /*! tatom_plus ::= tatom */
      or 144 /*! tatom ::= a */
      or 148 /*! t_sepby_DARROW ::= t */
      or 150 /*! t_sepby_COMMA ::= t */
        -> 

setMinor yylhsminor^ yypParser 0;
      of _ -> // default
        ()
/********** End reduce actions ************************************************/
  end;
  //assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );
  yygoto = yyRuleInfoLhs[yyruleno];
  yysize = yyRuleInfoNRhs[yyruleno];
  yyact = yy_find_reduce_action (yystackStateno yypParser)[yysize +Int32 (yytop yypParser)]
                                 yygoto;

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  //assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  //assert( yyact!=YY_ERROR_ACTION );

  yypParser `bumpTopBy` (yysize +Int32 1);
  yyact  >^ (yystackStateno yypParser)[yytop yypParser];
  yygoto >^ (  yystackMajor yypParser)[yytop yypParser];
  yyact
};

/*
** The following code executes when the parse fails
*/
yy_parse_failed = { yypParser : YyParser =>           /* The parser */
  //ParseARG_FETCH
  //ParseCTX_FETCH
  while { (yytop yypParser) >SInt32 0 } { yy_pop_parser_stack yypParser };
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
/************ End %parse_failure code *****************************************/
  //ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  //ParseCTX_STORE
};

/*
** The following code executes when a syntax error first occurs.
*/
yy_syntax_error = {
      yypParser : YyParser =>           /* The parser */
      yymajor : Int8 =>                   /* The major type of the error token */
      yyminor : ImmToken => /* The minor type of the error token */
  //ParseARG_FETCH
  //ParseCTX_FETCH
/************ Begin %syntax_error code ****************************************/
/************ End %syntax_error code ******************************************/
  //ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  //ParseCTX_STORE
};

/*
** The following is executed when the parser accepts
*/
yy_accept = { yypParser : YyParser =>
  //ParseARG_FETCH
  //ParseCTX_FETCH

  -1 >^ (yyerrcntRef yypParser);

  //assert( yypParser->yytop==0);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  //ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  //ParseCTX_STORE
};

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
Parse = {
  yypParser : YyParser =>      /* The parser */
  yymajor : Int8 =>           /* The major token code number */
  yyminor : ImmToken =>  /* The value for the token */
  //ParseARG_PDECL               /* Optional %extra_argument parameter */

  yyminorunion = prim ref (Yy0 yyminor);

//#ifdef YYERRORSYMBOL
//  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
//#endif
  //ParseCTX_FETCH
  //ParseARG_STORE

//#if !defined(YYERRORSYMBOL)
  yyendofinput = (yymajor ==Int8 0);
//#endif

  sn = (yystackStateno yypParser)[(yytop yypParser)];
  yyact = prim ref sn;

  REC loop = { skipCheck : Bool =>
    if either skipCheck ((yytop yypParser) >SInt32 0)
      then
        act = yy_find_shift_action yymajor yyact^;
        act >^ yyact;
        case ()
          of _ if yyact^ >=SInt32 YY_MIN_REDUCE ->
            (yy_reduce yypParser
                  (yyact^ -Int32 YY_MIN_REDUCE)
                  yymajor
                  yyminor
                  /*ParseCTX_PARAM*/) >^ yyact;
            loop False;
          of _ if yyact^ <=SInt32 YY_MAX_SHIFTREDUCE ->
            yy_shift yypParser yyact^ yymajor yyminor;
            decrInt32 (yyerrcntRef yypParser);
            ()
          of _ if yyact^ ==Int32 YY_ACCEPT_ACTION ->
            yypParser `bumpTopBy` -1;
            yy_accept yypParser;
            //return; (equivalent to break)
            ()
          of _ ->
            //assert( yyact == YY_ERROR_ACTION );
            (Yy0 yyminor) >^ yyminorunion;
//#ifdef YYERRORSYMBOL
//            int yymx;
//#endif
//#ifdef YYERRORSYMBOL
//            /* A syntax error has occurred.
//            ** The response to an error depends upon whether or not the
//            ** grammar defines an error token "ERROR".  
//            **
//            ** This is what we do if the grammar does define ERROR:
//            **
//            **  * Call the %syntax_error function.
//            **
//            **  * Begin popping the stack until we enter a state where
//            **    it is legal to shift the error symbol, then shift
//            **    the error symbol.
//            **
//            **  * Set the error count to three.
//            **
//            **  * Begin accepting and shifting new tokens.  No new error
//            **    processing will occur until three tokens have been
//            **    shifted successfully.
//            **
//            */
//            if( yypParser->yyerrcnt<0 ){
//              yy_syntax_error(yypParser,yymajor,yyminor);
//            }
//            yymx = yypParser->yystackMajor[yypParser->yytop];
//            if( yymx==YYERRORSYMBOL || yyerrorhit ){
//              yymajor = YYNOCODE;
//            }else{
//              while( yypParser->yytop >= 0
//                  && yymx != YYERRORSYMBOL
//                  && (yyact = yy_find_reduce_action(
//                              yypParser->yystackStateno[yypParser->yytop],
//                              YYERRORSYMBOL)) >= YY_MIN_REDUCE
//              ){
//                yy_pop_parser_stack(yypParser);
//              }
//              if( yypParser->yytop < 0 || yymajor==0 ){
//                yy_parse_failed(yypParser);
//                yypParser->yyerrcnt = -1;
//                yymajor = YYNOCODE;
//              }else if( yymx!=YYERRORSYMBOL ){
//                yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
//              }
//            }
//            yypParser->yyerrcnt = 3;
//            yyerrorhit = 1;
//            if( yymajor==YYNOCODE ) break;
//            yyact = yypParser->yystackStateno[yypParser->yytop];
//#else  /* YYERRORSYMBOL is not defined */
            /* This is what we do if the grammar does not define ERROR:
            **
            **  * Report an error message, and throw away the input token.
            **
            **  * If the input token is $, then fail the parse.
            **
            ** As before, subsequent error messages are suppressed until
            ** three input tokens have been successfully shifted.
            */
            if (yyerrcnt yypParser) <=SInt32 0 then
              yy_syntax_error yypParser yymajor yyminor;
            end;
            3 >^ yyerrcntRef yypParser;
            if yyendofinput then
              yy_parse_failed yypParser;
              -1 >^ yyerrcntRef yypParser;
            end;
//#endif
          end
      else ()
    end
  };

  loop True;
};

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
*/
//ParseFallback = { iToken =>
//  if iToken <SInt32 arraySize32 yyFallback
//    then  yyFallback[iToken];
//    else  0
//  end
//};
