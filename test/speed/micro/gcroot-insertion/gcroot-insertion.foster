fn-no-gc = { n : Int32 => r : Ref Int32 =>
  let d = r^; in
    expect_i32 d;
    print_i32  n;
  end
};


// * If there are no GC points after a call returns a gc-ed pointer,
//   then the returned pointer need not be stored in a gcroot slot.
//   Reason: there are no further GC points
//           across which the pointer must be stored.

may-trigger-gc = {
  let x = (ref 0);
      d = x ^  ;
  in  d  end
};

needs-gc-roots = { x0 : Ref Int32 =>
  let x1 = (ref x0);
      x2 = (ref 2 );
      d1 = x1 ^  ;
      d0 = d1 ^  ;
  in  d0 +Int32 (x2 ^) end
};

no-gc-after-new = {
  let t = may-trigger-gc ! ;
      n = (ref 0); in
    n^
  end
};

// * If a pointer is dead before a GC can be triggered,
//   then it need not exist in a gcroot slot.
//
no-root-for-dead-ptrs = {
  expect_i32   42;
  let r = (ref 42);
      d = r ^     ;
  in
    print_i32 d;
    may-trigger-gc !;
  end
};

fn-late-reload = { k : Int32 =>
  let r = (ref 2);
  in
    may-trigger-gc !;
    // r should not be reloaded here
    if 0 ==Int32 opaquely_i32 0
      then k
      else r^
    end
  end
};

main = {
  fn-no-gc 30 (ref 30);
  no-root-for-dead-ptrs ! ;

  expect_i32 0;
  print_i32 (no-gc-after-new !);

  expect_i32 5;
  print_i32 (needs-gc-roots (ref 3));

  expect_i32 4;
  print_i32 (fn-late-reload 4);
};