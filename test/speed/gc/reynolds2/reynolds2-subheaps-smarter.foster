snafuinclude Bench "bench/measure";
snafuinclude Prelude "prelude";

type case Tree
  of $Lf
  of $Br Int32 Tree Tree
  ;

mktree = { n =>
  if n ==Int32 0
    then Lf
    else t = mktree (n -Int32 1);
         Br n t t
  end
};

get-current-subheap = {
    sh = foster_subheap_create !;
    os = foster_subheap_activate sh;
    _  = foster_subheap_activate os;
    os
};

in-temp-subheap-if = { b => cs => f =>
  sh = if b then foster_subheap_create !    else cs end;
  os = if b then foster_subheap_activate sh else cs end;
    rv = f !;
  if b then _ = foster_subheap_activate os end;
  if b then _ = foster_subheap_collect  sh end;
  rv
};

search = { cs => p => t =>
    case t
      of $Lf -> False
      of $Br x t1 t2 ->
        { p x } `oror` {
              { in-temp-subheap-if (x ==Int32 12) cs { search cs { y => { y ==Int32 x } `oror` { p y } } t1 } }
              `oror`
              { in-temp-subheap-if (x ==Int32 12) cs { search cs { y => { y ==Int32 x } `oror` { p y } } t2 } }
        }
    end
};

reynolds2 = {
  cs = get-current-subheap !;
  search cs { x => False } (mktree 24)
};

main = {
  let (t, _) = elapsed-time { reynolds2 ! };
  ts = foster_fmttime_secs t;
  print_text ts;
};
