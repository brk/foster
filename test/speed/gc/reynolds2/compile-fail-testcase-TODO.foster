snafuinclude Bench "bench/measure";
snafuinclude Prelude "prelude";
snafuinclude Fmt "fmt";

type case Tree
  of $Lf
  of $Br Int32 Tree Tree
  ;

mktree = { n =>
  if n ==Int32 0
    then Lf
    else t = mktree (n -Int32 1);
         Br n t t
  end
};

get-current-subheap = {
  /*
    sh = foster_subheap_create !;
    os = foster_subheap_activate sh;
    _  = foster_subheap_activate os;
    os
  */
  ()
};

in-temp-subheap = { f =>
/*
  sh = foster_subheap_create !   ;
  os = foster_subheap_activate sh;
    rv = f !;
  _ = foster_subheap_activate os ;
  // _ = foster_subheap_collect  sh ;
  rv
  */

  f !
};

search = { cs => p => t =>
    case t
      of $Lf -> False
      of $Br x t1 t2 ->
        { p x } `oror` {
          { search cs p t1 }
              `oror`
          { search cs p t2 }
          /*
              { search cs { y => { y ==Int32 x } `oror` { p y } } t1 }
              `oror`
              { search cs { y => { y ==Int32 x } `oror` { p y } } t2 }
              */
        }
    end
};

reynolds2 = {
  cs = get-current-subheap !;
  search cs { x => False } (in-temp-subheap { mktree 24 })
};

main = {
  let (t, _) = elapsed-time { reynolds2 ! };
  ts = fmt-duration t;
  print_text ts;
};
