compare_4xi32 = fn (x : simd-vector of 4 i32, a : simd-vector of 4 i32) {
  expect_i32(x[0])
  print_i32(a[0])
  
  expect_i32(x[1])
  print_i32(a[1])
  
  expect_i32(x[2])
  print_i32(a[2])
  
  expect_i32(x[3])
  print_i32(a[3])
}

fn "main" () {
  compare_4xi32( simd-vector { 311, 412, 513, 614 },
                 simd-vector {  11,  12,  13,  14 } +
                 simd-vector { 300, 400, 500, 600 } )

  expect_i32(123456789)
  print_i32(123456789) // Poor man's visual separator
                 
  compare_4xi32( simd-vector { 0011_2, 0111_2, 1100_2, 1111_2 },
           bitor(simd-vector { 0010_2, 0110_2, 1100_2, 1110_2 },
                 simd-vector { 0001_2, 0011_2, 0100_2, 0111_2 }))

  expect_i32(123456789)
  print_i32(123456789) // Poor man's visual separator
                 
  compare_4xi32( simd-vector { 0000_2, 0010_2, 0100_2, 0110_2 },
          bitand(simd-vector { 0010_2, 0110_2, 1100_2, 1110_2 },
                 simd-vector { 0001_2, 0011_2, 0100_2, 0111_2 } )

  compare_4xi32( simd-vector { 0011_2, 0101_2, 1000_2, 1001_2 },
          bitxor(simd-vector { 0010_2, 0110_2, 1100_2, 1110_2 },
                 simd-vector { 0001_2, 0011_2, 0100_2, 0111_2 }))

  expect_i32(32342323)
  print_i32(32342323) // Poor man's visual separator

  compare_4xi32( simd-vector { 1, 11000_2, 1110000_2, 111100000_2 },
          bitshl(simd-vector { 1, 3, 7, 15 },
                 simd-vector { 0, 3, 4, 5 }))

  expect_i32(123456789)
  print_i32(123456789) // Poor man's visual separator

  compare_4xi32( simd-vector { 1, 0, 3, 10 },
                 simd-vector { 1, 3, 7, 15 } -
                 simd-vector { 0, 3, 4, 5 } )

  expect_i32(123456789)
  print_i32(123456789) // Poor man's visual separator

  compare_4xi32( simd-vector { 0, 9, 28, 75 },
                 simd-vector { 1, 3, 7, 15 } *
                 simd-vector { 0, 3, 4, 5 } )

  // TODO: insertvalue
  // TODO: division -- sdiv, udiv? srem, urem
}
