print_0_of_t_i32_i1 = { x : (i32, i1) => case x of (y, _) -> print_i32 y end };

tuple_from      = { x : i32 => y : i1 => (x, y) };

tuple_from_if   = { x : i32 => y : i1 =>
                  if primitive_==_i32 x 3 then (x, y) else (x, y) end };

tuple_from_case = { x : i32 => y : i1 => case x of 3 -> (x, y)
                                                of _ -> (x, y) end };

// TODO:
//implicit_tuple_from = fn (x : i32, y : i1) to (rx : i32, ry : i1) {
// (x,y) ?
// or
// rx, ry = x, y ?
// or
// rx, ry = unpack tuple { x, y } ?
//}

main = {
  expect_i32 42;
  print_0_of_t_i32_i1 (tuple_from (opaquely_i32 42) true);

  expect_i1 true;
  print_i1 (__COMPILES__ ());

  expect_i32 43;
  print_0_of_t_i32_i1 (tuple_from_if (opaquely_i32 43) true);

  expect_i32 44;
  print_0_of_t_i32_i1 (tuple_from_case (opaquely_i32 44) true);
};
