main = {
  //part1 !;
  part2 !;
  part3 !;
};

/*
part1 = {
  expect_i32 3;
  expect_i32 4;
  noinline_llvm_foo (3, 4);
  expect_i32 4;
  expect_i32 5;
  noinline_llvm_foo (4, 5);
};

noinline_llvm_foo = { p =>
  p1 = case p of (a, _) -> a end;
  p2 = case p of (_, a) -> a end;
  print_i32 p1;
  print_i32 p2;
};
*/

part2 = {
  r1 = Ref_ref (2, 3);
  r2 = Ref_ref (2, 3, 4);
  (3,4) >^ r1;
  (3,4,5) >^ r2;
  ()
};

Ref_ref :: forall (a:Type) { a => Ref a };
Ref_ref = { v => prim ref v };


part3 = {
  zorba = { x : (Int64, Int64) =>
    f = case x of (a, _) -> a end;
    s = case x of (_, a) -> a end;
    f ==Int64 s
  };

  expect_i1 True;
  print_i1 (zorba (2, 2));

  noinline_llvm_baz = { x =>
    zorba (1,2) ==Bool zorba (1,x)
  };

  expect_i1 True;
  noinline_llvm_baz 2 |> print_i1;
  expect_i1 True;
  noinline_llvm_baz 3 |> print_i1;
  expect_i1 False;
  noinline_llvm_baz 1 |> print_i1;

  ()
};
