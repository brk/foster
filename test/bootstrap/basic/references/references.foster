main = {
  simpler   !;
  capture   !;
  ref-if    !;
  tuprefs1  !;
  tuprefs2  !;
  hof-until !;

  expect_i1 False; print_i1 (__COMPILES__ 0 >^ 0);
  expect_i1 False; print_i1 (__COMPILES__ r = (prim ref 0); r >^ r);
};


tuprefs1 = {
  t = (prim ref (opaquely_i32 1), prim ref 2);
  expect_i32 1;
  case t of (r, _) -> print_i32 r^ end;
};

tuprefs2 = {
  r = prim ref (1, 2, 3, 4);
  expect_i32 4;
  case r^ of (_, _, _, x) -> print_i32 x end;
  expect_i32 14;
  (11, 12, 13, 14) >^ r;
  case r^ of (_, _, _, x) -> print_i32 x end;
};

simpler = {
  r = prim ref 0;

  expect_i32 0;
   print_i32 r^;
  3 >^ r;
  expect_i32 3;
   print_i32 r^;
};

capture = {
  r = prim ref 0;
  f = { r^ };

  2 >^ r;
  expect_i32 2;
   print_i32 (f !);
};

ref-if = {
  r = if 2 ==Int32 (opaquely_i32 2) then (prim ref 0) else (prim ref 1) end;
  expect_i32 0;
   print_i32 r^;
};

hof-until-if = { c : {Bool} => b : { () } =>
  if c ! then () else j0 = b !; hof-until-if c b end
};

hof-until-case = { c : {Bool} => b : { () } =>
  case c !
    of True ->  ()
    of False -> j0 = b !; hof-until-case c b
  end
};

hof-until = {
  r = (prim ref 16);
  expect_i32 16;
  expect_i32 15;
  expect_i32 14;
  hof-until-if   { r^ ==Int32 13 } {
            print_i32 r^; (r^ -Int32 1) >^ r;
  };
  expect_i32 13;
  expect_i32 14;
  expect_i32 15;
  hof-until-case { r^ ==Int32 16 } {
            print_i32 r^; (r^ +Int32 1) >^ r;
  };
};

