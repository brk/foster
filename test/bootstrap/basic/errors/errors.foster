main = {
  // Mismatch between declared and inferred return types
  //expect_i1 true ; print_i1 (__COMPILES__  { 0 }  )
  //expect_i1 false; print_i1 (__COMPILES__  fn(to i32) { true }  )

  // Mismatch between expected and actual types
  expect_i1 true ; print_i1 (__COMPILES__           (a ()) );
  expect_i1 false; print_i1 (__COMPILES__  print_i1 (a ()) );

  // Incorrect number of arguments to function
  expect_i1 true;  print_i1 (__COMPILES__  { 0 }()  );
  expect_i1 false; print_i1 (__COMPILES__  { 0 }(0) );

  expect_i1 true;  print_i1 (__COMPILES__  a ()  );
  expect_i1 false; print_i1 (__COMPILES__  a 0   );
  expect_i1 false; print_i1 (__COMPILES__  a (0) );

  // Duplicate variable names
  expect_i1 true  ; print_i1 (__COMPILES__  {x:i32 => y:i32 => 0 }  );
  expect_i1 false ; print_i1 (__COMPILES__  {x:i32 => x:i32 => 0 }  );

  // IfAST condition must be bool
  expect_i1 true  ; print_i1 (__COMPILES__  if true then true else true end);
  expect_i1 false ; print_i1 (__COMPILES__  if  0   then true else true end);
  expect_i1 false ; print_i1 (__COMPILES__  if  0   then true else true end);

  // IfAST branches must have same type
  expect_i1 true  ; print_i1 (__COMPILES__  if true then true else true end);
  expect_i1 false ; print_i1 (__COMPILES__  if true then  0   else true end);

  // Call to non-function thing
  expect_i1 false ; print_i1 (__COMPILES__ (0,0) (0));

  // Try to check function against non-function type
  expect_i1 false ; print_i1 (__COMPILES__ if { x:i32 => 0 } then 3 else 4 end);

  // Try to subscript non-subscriptable expression.
  expect_i1 false ; print_i1 (__COMPILES__ 0[0]);

  // Primitives must be called, not treated as first class values.
  //expect_i1 true; print_i1 (__COMPILES__ let f = print_i1; in f true end);
  //expect_i1 true;
  //let f = print_i1; in f true end;
};

a = { 0 };
b = { x:i32 => x };
