snafuinclude Bits "math/bitwise";
snafuinclude Prelude "prelude";
snafuinclude PreludePrintExpectB "prelude/print-expect-b";
snafuinclude Fmt "fmt";

main = {
  trunc8-test   !;
  print-i8-test !;
  i8-ops-test   !;

  numerical-ops !;
  bitwise-ops   !;
};

numerical-ops = {

  expect_i64 9223372036854775807;
  print_i64 (maxReprSInt64 !);

  n1 = -1;
  expect_i1 True;
  print_i1 (maxReprUInt64 ! ==Int64 n1);

  expect_i1 True;
  print_i1 (maxReprUInt64 ! ==Int64 ((maxReprSInt64 !) *Int64 2) +Int64 1);

  expect_i1 True;
  print_i1 (0 >SInt64 n1);

  expect_i1 True;
  print_i1 (0 <UInt64 n1);

  // Literals (of sized integer types) are just syntax for bit patterns.
  expect_i8b 0xff;
  print_i8b 255;

  expect_i8b 0b`1111`1111;
  print_i8b -1;

  expect_i1 True;
  print_i1 (255 ==Int8 -1);

  expect_i1 False;
  print_i1 (255 ==Int32 -1);

  expect_i32b 0x0000`00ff;
  print_i32b 255;

  expect_i32b 0xffff`ffff;
  print_i32b -1;

};

sub8 = { n : Int8 => n -Int8 (trunc32to8 2); };

trunc32to8 = { n : Int32 => trunc_i32_to_i8 n; };

trunc8-test = {
  expect_i32 0;
  print_i32 (sext_i8_to_i32 (trunc32to8 (opaquely_i32 256)));
};

print-i8-test = {
     expect_i32 127;
     print_i8 (trunc32to8 (opaquely_i32 127));

     expect_i32 (0 -Int32 (opaquely_i32 128));
     print_i8 (trunc32to8 (opaquely_i32 128));
};

i8-ops-test = {
  expect_i32 5;
  print_i8 ((trunc32to8 3) +Int8 (trunc32to8 2));

  expect_i32 0;
  print_i8 ((trunc32to8 128) +Int8 (trunc32to8 128));
};


bitwise-ops = {
  expect_i32b                0b`10111001;
  print_i32b (bitmerge-Int32 0b`11110000
                             0b`10110110
                             0b`01001001);

  expect_i32b                      0b`1010;
  print_i32b (bitfield-Int32 0b`1101101010  0 4);

  expect_i32                10;
  print_i32 (bitlength-Int32 0b`11`0110`1010);

  expect_i32                 32;
  print_i32 (bitlength-Int32 -1);

  lowest-bit-set-Int32-test 0 1;
  lowest-bit-set-Int32-test 1 2;
  lowest-bit-set-Int32-test 0 3;
  lowest-bit-set-Int32-test 2 4;
  lowest-bit-set-Int32-test 0 5;
  lowest-bit-set-Int32-test 1 6;
  lowest-bit-set-Int32-test 0 7;
  lowest-bit-set-Int32-test 3 8;

  expect_i32b                   0b`0000`1101`0000`0000`0000`0000`0000`0000;
  print_i32b (bit-reverse-Int32                               0b`1011`0000);

  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 0);
  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 1);
  expect_i1 False; print_i1 (is-bit-set-Int32 0b`101011 2);
  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 3);
  expect_i1 False; print_i1 (is-bit-set-Int32 0b`101011 4);
  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 5);

  expect_i32 1;      print_i32 (copy-bit-Int32 0  True  0);
  expect_i32 0b0100; print_i32 (copy-bit-Int32 0  True  2);
  expect_i32 0b1011; print_i32 (copy-bit-Int32 15 False 2);


  expect_i32 4; print_i32 (bitcount-Int32 0b`10101010);
  expect_i32 0; print_i32 (bitcount-Int32 0);
  expect_i32 31; print_i32 (bitcount-Int32 -2);

  expect_i32 (-1);
  print_i32 0xFFFF`FFFF;
};

lowest-bit-set-Int32-test = { e : Int32 => n : Int32 =>
  expect_i32 e; print_i32 (lowest-set-bit-Int32 n);
};
