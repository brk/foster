snafuinclude Bits "math/bitwise";
snafuinclude Prelude "prelude";

snafuinclude Ryu "fmt/ryu/ryu-d2fixed";
snafuinclude Ryu "fmt/ryu/ryu-d2s";

main = {
  trunc8-test   !;
  print-i8-test !;
  i8-ops-test   !;

  numerical-ops !;
  bitwise-ops   !;
  floating-ops  !;
};

numerical-ops = {

  expect_i64 9223372036854775807;
  print_i64 (maxReprSInt64 !);

  n1 = -1;
  expect_i1 True;
  print_i1 (maxReprUInt64 ! ==Int64 n1);

  expect_i1 True;
  print_i1 (maxReprUInt64 ! ==Int64 ((maxReprSInt64 !) *Int64 2) +Int64 1);

  expect_i1 True;
  print_i1 (0 >SInt64 n1);

  expect_i1 True;
  print_i1 (0 <UInt64 n1);

  // Literals (of sized integer types) are just syntax for bit patterns.
  expect_i8b 0xff;
  print_i8b 255;

  expect_i8b 0b`1111`1111;
  print_i8b -1;

  expect_i1 True;
  print_i1 (255 ==Int8 -1);

  expect_i1 False;
  print_i1 (255 ==Int32 -1);

  expect_i32b 0x0000`00ff;
  print_i32b 255;

  expect_i32b 0xffff`ffff;
  print_i32b -1;

};

sub8 = { n : Int8 => n -Int8 (trunc32to8 2); };

trunc32to8 = { n : Int32 => trunc_i32_to_i8 n; };

trunc8-test = {
  expect_i32 0;
  print_i32 (sext_i8_to_i32 (trunc32to8 (opaquely_i32 256)));
};

print-i8-test = {
     expect_i32 127;
     print_i8 (trunc32to8 (opaquely_i32 127));

     expect_i32 (0 -Int32 (opaquely_i32 128));
     print_i8 (trunc32to8 (opaquely_i32 128));
};

i8-ops-test = {
  expect_i32 5;
  print_i8 ((trunc32to8 3) +Int8 (trunc32to8 2));

  expect_i32 0;
  print_i8 ((trunc32to8 128) +Int8 (trunc32to8 128));
};


bitwise-ops = {
  expect_i32b                0b`10111001;
  print_i32b (bitmerge-Int32 0b`11110000
                             0b`10110110
                             0b`01001001);

  expect_i32b                      0b`1010;
  print_i32b (bitfield-Int32 0b`1101101010  0 4);

  expect_i32                10;
  print_i32 (bitlength-Int32 0b`11`0110`1010);

  expect_i32                 32;
  print_i32 (bitlength-Int32 -1);

  lowest-bit-set-Int32-test 0 1;
  lowest-bit-set-Int32-test 1 2;
  lowest-bit-set-Int32-test 0 3;
  lowest-bit-set-Int32-test 2 4;
  lowest-bit-set-Int32-test 0 5;
  lowest-bit-set-Int32-test 1 6;
  lowest-bit-set-Int32-test 0 7;
  lowest-bit-set-Int32-test 3 8;

  expect_i32b                   0b`0000`1101`0000`0000`0000`0000`0000`0000;
  print_i32b (bit-reverse-Int32                               0b`1011`0000);

  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 0);
  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 1);
  expect_i1 False; print_i1 (is-bit-set-Int32 0b`101011 2);
  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 3);
  expect_i1 False; print_i1 (is-bit-set-Int32 0b`101011 4);
  expect_i1 True ; print_i1 (is-bit-set-Int32 0b`101011 5);

  expect_i32 1;      print_i32 (copy-bit-Int32 0  True  0);
  expect_i32 0b0100; print_i32 (copy-bit-Int32 0  True  2);
  expect_i32 0b1011; print_i32 (copy-bit-Int32 15 False 2);


  expect_i32 4; print_i32 (bitcount-Int32 0b`10101010);
  expect_i32 0; print_i32 (bitcount-Int32 0);
  expect_i32 31; print_i32 (bitcount-Int32 -2);

  expect_i32 (-1);
  print_i32 0xFFFF`FFFF;
};

lowest-bit-set-Int32-test = { e : Int32 => n : Int32 =>
  expect_i32 e; print_i32 (lowest-set-bit-Int32 n);
};

floating-ops = {
  expect_float_p9f64  5.2;
  print_float_p9f64 (0.65 *f64 (powi-f64 2.0 3));

  expect_float_p9f64 42.42;
  print_float_p9f64 (4631166901565532406 |> i64-as-f64);

  expect_i64 4631166901565532406;
  print_i64 (42.42 |> f64-as-i64);

  expect_i64 6;
  print_i64 (6.25 |> f64-to-u64-unsafe);

  expect_i64 -6;
  print_i64 (-6.25 |> f64-to-s64-unsafe);

/*
  expect_i64 4294967290;
  print_i64 (if opaquely_i32 0 ==Int32 0 then -6.25 else 6.25 end
              |> f64-to-u64-unsafe);
*/

  test-float-classification !;

  expect_text      "18446744073709551616.000000000";
  print_float_p9f64 18446744073709551616.0;

  // A bit strange, until you realize it's the same float as above.
  expect_text      "18446744073709551616.000000000";
  print_float_p9f64 18446744073709552000.0;

  expect_i64x (0x43efffffffffffff);
  print_i64x  (f64-as-i64 18446744073709549568.0);

  nextFloat64 = { f => f |> f64-as-i64 |> (+Int64)  1 |> i64-as-f64 };
  prevFloat64 = { f => f |> f64-as-i64 |> (+Int64) -1 |> i64-as-f64 };
  // We use (+Int64) -1 because addition commutes but subtraction doesn't,
  // and we want x - 1 but piping would give us 1 - x.
  // And (+Int64) -1  is shorter and more symmetric than { i => i -Int64 1 }.

  print_i32 5123;
  expect_i32 5123;

  expect_float_p9f64 18446744073709551616.0;
  print_float_p9f64 ((maxReprUInt64 !) |> u64-to-f64-unsafe);

  expect_text "0xffffffffffffffff"; // "-1" ; unsigned: "18446744073709551615";
  print_i64x (maxReprUInt64 !);

  expect_i64x 4895412794951729152;
  print_i64x ((maxReprUInt64 !) |> u64-to-f64-unsafe |> f64-as-i64);

  print_i32 123;
  expect_i32 123;

  expect_float_p9f64 18446744073709549568.0;
  print_float_p9f64 ((maxReprUInt64 !) |> u64-to-f64-unsafe |> prevFloat64);

  // Note: minimum signed i64 is 0x8000... unsigned,
  // which is one larger than the max representable signed integer.
  expect_float_p9f64 9223372036854775808.0;
  print_float_p9f64 ((minReprSInt64 !) |> u64-to-f64-unsafe);

  // Unlike with with maxReprUInt64, the float faithfully represents the int.
  expect_float_p9f64 -9223372036854775808.0;
  print_float_p9f64 ((minReprSInt64 !) |> s64-to-f64-unsafe);

  expect_i64x (0x43efffffffffffff);
  print_i64x  (f64-as-i64 18446744073709549568.1);

  expect_i64x (0x43f0000000000000);
  print_i64x (f64-as-i64 18446744073709552000.0);

  test-float-sorting !;
};

test-float-classification = {
  z0 = 1.41e+01;
  z1 = 1.41e+1;

  expect_float_p9f64 14.1;
  print_float_p9f64 z0;

  expect_float_p9f64 14.1;
  print_float_p9f64 z1;

  expect_text "F64_U64_Negative";
  print_text (-1.0 |> classify-f64-to-u64 |> show_tag_Float64AsU64Cases);

  expect_text "F64_U64_Exact";
  print_text (0.0 |> classify-f64-to-u64 |> show_tag_Float64AsU64Cases);

  expect_text "F64_U64_Exact";
  print_text (2.0 |> classify-f64-to-u64 |> show_tag_Float64AsU64Cases);

  expect_text "F64_U64_Rounded";
  print_text (2.2 |> classify-f64-to-u64 |> show_tag_Float64AsU64Cases);

  expect_text "F64_U64_TooBig";
  print_text (18446744073709551616.0 |> classify-f64-to-u64 |> show_tag_Float64AsU64Cases);

  expect_text "F64_U64_TooBig";
  print_text (18446744073709551616.5 |> classify-f64-to-u64 |> show_tag_Float64AsU64Cases);



  expect_text "U64_F64_Exact";
  print_text (1 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  expect_text "U64_F64_Exact";
  print_text (18446744073709547520 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  expect_text "U64_F64_Exact";
  print_text (18446744073709549568 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  case (18446744073709549569 |> classify-u64-to-f64)
   of $U64_F64_Rounded f delta ->
     expect_float_p9f64 18446744073709549568.0;
     print_float_p9f64 f;
     expect_i64 -1;
     print_i64 delta;

     expect_i64 4895412794951729151;
     print_i64 (f64-as-i64 f);

   of _ -> ()
  end;

  expect_text "U64_F64_Rounded";
  print_text (18446744073709550000 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  expect_text "U64_F64_Exact";
  print_text (18446744073709549568 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  expect_text "U64_F64_Rounded";
  print_text (18446744073709550591 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  expect_text "U64_F64_RoundMax";
  print_text (18446744073709550592 |> classify-u64-to-f64 |> show_tag_UInt64asFloat64Cases);

  inf32 = positiveInfinity-f32 !;
  nan32 = 0.0 `div-f32` 0.0;

  ninf64 = negativeInfinity-f64 !;
  nan64 = 0.0 `div-f64` 0.0;

  tf = { t => f => expect_text t; f |> classify-f32 |> fmt-FloatClassification |> print_text; };
  tf "FP_Zero" 0.0;
  tf "FP_Normal" 1.0;
  tf "FP_Infinite" inf32;
  tf "FP_NaN" nan32;

  td = { t => f => expect_text t; f |> classify-f64 |> fmt-FloatClassification |> print_text; };
  td "FP_Zero" -0.0;
  td "FP_Normal" 1.0;
  td "FP_Infinite" ninf64;
  td "FP_NaN" nan64;

  test-d2fixed !;

  test-d2s !;

  test-modf !;
  test-pow2 !;

  expect_float_f64x 0x1.2345p0;
  print_float_f64x (Float64-normal-ofBits
                      (0x2345`0000`0000`0000 `bitlshr-Int64` (64 -Int64 52)) 0);

  expect_i64 1; print_i64 (ilogb-Float64 3.9 |> unMaybe);
  expect_i64 0; print_i64 (ilogb-Float64 1.9 |> unMaybe);
  expect_i64 -1; print_i64 (ilogb-Float64 0.6 |> unMaybe);
  expect_i64 -2; print_i64 (ilogb-Float64 0.3 |> unMaybe);
  expect_i64 -1022; print_i64 (ilogb-Float64 kDBL_MIN_NORMAL |> unMaybe);
  expect_i64 -1023; print_i64 (ilogb-Float64 kDBL_MIN_VALUE |> unMaybe);
  expect_i1 False; print_i1 (ilogb-Float64 0.0 |> isSome);
};

test-d2s = {

  expect_text "0.125";
  print_text (ryuFloat64 0.125);

  expect_text "345.0";
  print_text (ryuFloat64 345.0);

  expect_text "34500.0";
  print_text (ryuFloat64 34500.0);

  expect_text "34500000000.0";
  print_text (ryuFloat64 34500000000.0);

  //expect_text "3.45e13";
  expect_text "34500000000000.0";
  print_text (ryuFloat64 34500000000000.0);

  //print_text (ryuFloat64 123.7891);
  //print_text (ryuFloat64 12300.0);

  expect_text "34.56";
  print_text (ryuFloat64 34.56);

  expect_text "0.0345";
  print_text (ryuFloat64 0.0345);

  expect_text "3.45e-10";
  print_text (ryuFloat64 0.000000000345);

  expect_text "4e50";
  print_text (ryuFloat64 4.e50);

  expect_text "3e50";
  print_text (ryuFloat64 3.e50);

  expect_text "0b0100101001101001101010001001011000101000001111011001011011100110";
  print_i64b 0x4a69a896283d96e6;

  expect_text "0b0100101001101001101010001001011000101000001111011001011011100111";
  print_i64b 0x4a69a896283d96e7;

  expect_text "1.844674407370955e19";
  print_text (ryuFloat64 18446744073709549568.0);

  expect_text "498484681984085570.0";
  print_text (ryuFloat64 498484681984085568.0);
};

test-d2fixed = {
  ed = { t => n => d => expect_text t; print_text (ryu-d2fixed n d); };

  inf32 = positiveInfinity-f32 !;
  nan32 = 0.0 `div-f32` 0.0;

  ninf64 = negativeInfinity-f64 !;
  nan64 = 0.0 `div-f64` 0.0;

  ed "-Infinity" 3 ninf64;
  ed "NaN"       3 nan64;
  ed "123"       0 123.0;
  ed "123.000"   3 123.0;
  ed "124"       0 123.7891;
  ed "123.789"   3 123.7891;
  ed "18446744073709549568.0" 1 18446744073709549568.0;

  ed (
    "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ++Text
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ++Text
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ++Text
    "000000000000000000000000000000000000000000000000000000098813129168249308835313758573644274" ++Text
    "473011960522864952885117136500135101454041750373059967272327198475959312939089143546185331" ++Text
    "342071187959279754959202156375625260142638062280905569163433569796420737743727211399746144" ++Text
    "610001277481830712996877462494679454633923028006343077079614825247713118234205331711337353" ++Text
    "637407912062124986389054318298491065861091308880225496025941999908386397881816083312664904" ++Text
    "951429573802945356031871047722310026960705298694403875805362142149834066644536895066714416" ++Text
    "648638721847657869167361202120230123396195061566845546366584958099650494615527518544957493" ++Text
    "121695564074689393990672940359453554351702513211023982630097822029020757254763345019116747" ++Text
    "7946719798732961988232841140527418055848553508913045817507736501283943653106689453125") 1073 1e-323;


    ed (   
    "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ++Text
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ++Text
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ++Text
    "000000000000000000000000000000000000000000000000000099998886718268300541337523676528005766" ++Text
    "688104049139332319738542138136722671490251377536686879595124857670824694358213268739555318" ++Text
    "176042214791112018712582252132763264349719028276435993394772633977786596651937936543098345" ++Text
    "321292811612681552839992044615608089530104342419194004570203150685675653015795691873401881" ++Text
    "056807006870486225722970118072958651424404586788201978253303907287034656397876312416883810" ++Text
    "846728688580700304253500294977747284233762278736722315026487855632075444271337807514989648" ++Text
    "422386509829763597369536545672884876949402305647692922983977596846300550913848767496983039" ++Text
    "155910843585666718561015643766997003922943369556270421658995893369006341820505159346148768" ++Text
    "20804363177575320916352342137470725187361510200023673178293392993509769439697265625") 1071 1e-320;

};

show_tag_UInt64asFloat64Cases = { c =>
  case c
     of $U64_F64_RoundMax _   -> "U64_F64_RoundMax"
     of $U64_F64_Rounded  _ _ -> "U64_F64_Rounded"
     of $U64_F64_Exact    _   -> "U64_F64_Exact"
  end
};

show_tag_Float64AsU64Cases = { c =>
  case c
     of $F64_U64_Negative _   -> "F64_U64_Negative"
     of $F64_U64_TooBig   _   -> "F64_U64_TooBig"
     of $F64_U64_Rounded  _ _ -> "F64_U64_Rounded"
     of $F64_U64_Exact    _   -> "F64_U64_Exact"
  end
};

test-float-sorting = {
  cmpGT = { x => y => isGT (cmp-total-f64 x y) };
  listOf = { a => arrayFoldr a Cons Nil };

  pinf = positiveInfinity-f64 !;
  ninf = negativeInfinity-f64 !;
  nan  = 0.0 `div-f64` 0.0;
  nzero1 = -0.0;
  nzero2 = 0.0 |> f64-as-i64 |> (bitor-Int64) (1 `bitshl-Int64` 63) |> i64-as-f64;

  l = listOf (prim mach-array-literal 2.0 -2.0 -1.0 1. 0.0 ninf pinf nzero2 3.0 -3.0 nan nzero1 );
  s = listSortBy cmpGT l;

  expect_text "[2.0, -2.0, -1.0, 1.0, 0.0, -Infinity, Infinity, -0.0, 3.0, -3.0, NaN, -0.0]";
  listShow { f : Float64 => ryu-d2fixed 1 f } l |> print_text;
  expect_text "[-Infinity, -3.0, -2.0, -1.0, -0.0, -0.0, 0.0, 1.0, 2.0, 3.0, Infinity, NaN]";
  listShow { f : Float64 => ryu-d2fixed 1 f } s |> print_text;

};

test-modf = {
  check = { x => px =>
    let (ax, bx) = px;
    let (aa, ba) = modf-Float64 x;
    expect_text (ryu-d2fixed 4 ax);
    print_text (ryu-d2fixed 4 aa);

    expect_text (ryu-d2fixed 4 bx);
    print_text (ryu-d2fixed 4 ba);
  };

  expect_text "test-modf";
  print_text "test-modf";

  nan = 0.0 `div-f64` 0.0;

  check   123.456    ( 123.0,  0.456);
  check  -123.456    (-123.0, -0.456);
  check    -0.456    (  -0.0, -0.456);
  check  -123.0      (-123.0, -0.0);
  check   1.1e17     (11.e16,  0.0);
  check   1.234e1    (12.0  ,  0.34);
  check       nan    (nan   ,  0.0);
};

test-pow2 = {
  check = { e => x => i =>
    expect_text (ryuFloat64 e);
    print_text (ryuFloat64 (pow2-Float64 x i));

    expect_i1 True;
    print_i1 ((pow2-Float64 x i) ==f64 (x *f64 powi-f64 2.0 i));
  };
  check 64.0 1.0 6;
  check 32.0 2.0 4;
  check 96.0 1.5 6;
};