snafuinclude PreludePrintExpect "prelude/print-expect";

main = {
  print_i32 2;
  expect_i32 (case 0
                of _ if False -> 1
                of _ if True  -> 2
                of _          -> 3
              end);

  part2 !;
  part3 !;
  part4 !;
  part5 !;
  part5b !;
  //part6 !; TODO re-enable when or-patterns are compiled early
};

part2 = {
  print_i32 3;
  expect_i32 (case 1
                of 2 or 300 -> 4
                of 4 or _   -> 3
              end);

  print_i32 3;
  expect_i32 (case 1
                of 2 or 300 -> 4
                of 4 or 1   -> 3
                of _ -> 5
              end);

};

part3 = {
  print_i32 3;
  expect_i32 (case (1, 2)
                of (1, 4) or (2, 1) -> 1
                of (2, 2) or (1, 1) -> 2
                of (3, 4)
                or (1, 2) -> 3
                of _ -> 44
              end);

};


part4 = {
/*
  print_i32 8;
  expect_i32 (case (1, 8)
                of (1, 4) or (2, 1) -> 1
                of (2, 2) or (1, 1) -> 2
                of (3, x) or (1, x) -> x
                of _ -> 999
              end);
*/

  expect_i1 False;
  print_i1 (__COMPILES__
             case (1, 8)
                of (3, _) or (1, x) -> x
                of _ -> 999
              end );

  expect_i1 False;
  print_i1 (__COMPILES__
             case (1, 8)
                of (3, 4) or (1, x) -> x
                of _ -> 999
              end );
};

part5 = {
/*
  expect_i32 5;
  print_i32 (case (1, 8)
                of (1, a) or (a, 2) -> 5
                of _ -> 999
              end);
*/

              /*
  expect_i32 5;
  print_i32 (case (8, 2)
                of (1, a) or (a, 2) -> 5
                of _ -> 999
              end);
              */

              /*
  expect_i32 555;
  print_i32 (case (8, 3)
                of (1, a) or (a, 2) -> 5
                of _ -> 555
              end);
              */

  expect_i32 6;
  print_i32 (case (1, 8)
                of (1, a) if a ==Int32 8 -> 6
                of (a, 2) if a ==Int32 8 -> 7
                of _ -> 999
              end);

              /*
  expect_i32 6;
  print_i32 (case (1, 8)
                of (1, a)
                or (a, 2)
                if a ==Int32 8 -> 6
                of _ -> 888
              end);
              */

  expect_i32 4;
  print_i32 (case (8, 2)
                of (1, a) if a ==Int32 8 -> 3
                of (a, 2) if a ==Int32 8 -> 4
                of _ -> 999
              end);

              /*
  expect_i32 55;
  print_i32 (case (8, 2)
                of (1, a)
                or (a, 2)
                if a ==Int32 8 -> 55
                of _ -> 999
              end);
              */
};

type case X of $X Int32;

part5b = {
  // Examples based on "Ambiguous Pattern Variables"
  // http://www.ccs.neu.edu/home/gasche/drafts/ml_workshop_2016.pdf

  /* This test shows that our bias is left-to-right (bottom->top),
     the opposite of OCaml.
  expect_i32 111;
  case ( X 2,  X 3)
    of ($X n, _)
    or (_, $X n)
    if n ==Int32 2 -> print_i32 111;
    of _           -> print_i32 222;
  end;

  expect_i32 111;
  case ( X 2,  X 3)
    of ($X n, _)
    or (_, $X n)
    if n ==Int32 3 -> print_i32 111;
    of _           -> print_i32 222;
  end;
*/

  expect_i32 11;
  case ( X 2,  X 3)
    of ($X n, _)
    if n ==Int32 2 -> print_i32 11;
    of (_, $X n)
    if n ==Int32 2 -> print_i32 22;
    of _           -> print_i32 33;
  end;

  /*
  expect_i32 333;
  case ( X 3,  X 2)
    of ($X n, _)
    or (_, $X n)
    if n ==Int32 2 -> print_i32 333;
    of _           -> print_i32 444;
  end;
  */
};

type case L of $LN of $LC Int32 L;

part6 = {
/*
  xs = LC 1 (LC 2 LN);
  ys = case xs
          of $LC _ ys
          or       ys -> ys
        end;

  expect_i32 0;
  print_i32 (case ys
                of $LC 2 _ -> 0
                of _ -> 1
             end);
             */
             ()
};