// unpack tuple { e1, e2, ... , en } == e1, e2, ... , en
// unpack t == t[0], t[1], ..., t[n]

print4 = fn ( a : i32, b : i1, c : i32, d:i1 ) {
  expect_i32(a)
  print_i32(c)
  
  expect_i1(b)
  print_i1(d)
}

test_unpack = fn (x : tuple { i32, i1 }) {
  print4( x[0], x[1], unpack x)
}

fn "main" () {
  print4(42, true, unpack tuple { 42, true })
  
  expect_i1(false) // Unpacking results in type checking error
  print_i1(__COMPILES__ print4(42, true, unpack tuple { true, true }))
  
  test_unpack(tuple { 41, false })
  
  //expect_i1(false) // Unpacking must be done in call expr
  // Test for scope is currently done at codegen time so not caught by COMPILES
}
