// TB lacks a kind annotation; we'll default to "boxed",
// so values of type TB will be represented with a pointer indirection
// to an Int32-containing heap cell.
type case TB of $C Int32;

// TC wraps a single type of kind Type, and is annotated with kind Type
// itself, so values of type TU will be represented without a pointer
// indirection at runtime.
type case TU : Type of $D Int32;

// Newtypes like TU also/still work with (phantom) type parameters.
type case TP : Type (p:Boxed) of $E Int32;

// Wrapping a boxed type with an unboxed constructor is legal
// (and F below will not be represented at runtime) but
// it's sort of silly because TS can be used in strictly fewer places than TB,
// and the : Type annotation is not required to get the transparent constructor.
type case TS : Type of $F TB;

// Wrapping a boxed type with an implictly boxed constructor
// should not result in heap allocation
type case TX of $FX TB;

// But if there are multiple constructors, even an enum ctor,
// then there will be heap allocation...
type case TY of $FY TB   of $FYN;

// Can't have multiple constructors
//type case TBad1 : Type
//       of $TBad1a Int32
//       of $TBad1b Int32
//     ;
//
// Can't have multiple fields
//type case TBad2 : Type of
//         $TBad2 Int32 Int32;

main = {
  // Do allocations separately so it's easier to see
  // which test-BLAH functions allocate and which don't.
  call-tests (C 1) (C 2) (C 3);

  expect_i1 False;
  print_i1 (__COMPILES__ {
        baz = { t : TP TU => k =>
          expect_i32 k;
          case t
            of $E n -> print_i32 n;
          end
        };
        test-baz = { baz (E:[TU] 0) 0 };
        ()
  });
};

call-tests = { c1 => c2 => c3 =>
  test-foo !;
  test-bar !;
  test-baz !;
  test-oof c2 2;
  test-TX  c1;
  test-TY  c2;
};

// Should result in an allocation.
test-foo = { foo (C 0) 0 };

foo = { tfoo => k =>
  expect_i32 k;
  case tfoo
    of $C n -> print_i32 n;
  end
};

// Should not allocate
test-bar = { bar (D 1) 1; };

bar = { tbar => k =>
  expect_i32 k;
  case tbar
    of $D n -> print_i32 n;
  end
};

// Also should not allocate
//test-baz = { baz (E 0) 0 };
/*
test-baz = { baz (E:[TB] 0) 0 };
baz = { t : TP TB => k =>
  expect_i32 k;
  case t
    of $E n -> print_i32 n;
  end
};
*/

test-baz = { baz (E 0) 0 };
baz = { tbaz : TP () => k =>
  expect_i32 k;
  case tbaz
    of $E n -> print_i32 n;
  end
};

// Should not allocate
test-oof = { c => n => oof (F c) n };
oof = { toof : TS => k =>
  expect_i32 k;
  case toof
    of $F ($C n) -> print_i32 n;
  end
};

test-TX = { c1 => use-TX 1 (FX c1) };
use-TX = { n => tx => case tx of $FX tb -> foo tb n end };

test-TY = { c2 => use-TY 2 (FY c2); use-TY 99999 FYN; };
use-TY = { n => v => case v of $FY tb -> foo tb n
                            of $FYN -> print_i32 123; expect_i32 123;
                      end
};
