snafuinclude Prelude "prelude";
snafuinclude Vlist   "vlist";
snafuinclude Measure "bench/measure";

type case BoxedInt64 of $BoxedInt64 Int64;

print_bil = { lst =>
  print_text_bare "[";
  listFoldl lst { b => unit => case b of $BoxedInt64 i ->
                                 print_i64_bare i; print_text_bare ", "; ()
                               end } ();
  print_text "]";
};

print_bil_vList = { v =>
  print_text_bare "[";
  vListFoldl v { b => unit => case b of $BoxedInt64 i ->
                                 print_i64_bare i; print_text_bare ", "; ()
                              end } ();
  print_text "]";
};

type case BoxedInt32 of $BoxedInt32 Int32;

main = {
  test-boxed-vlist !;
  test-Int32-vlist !;
};

test-boxed-vlist = {
  lst =(Cons (BoxedInt64 0)
       (Cons (BoxedInt64 1)
       (Cons (BoxedInt64 2)
       (Cons (BoxedInt64 3)
       (Cons (BoxedInt64 4)
       (Cons (BoxedInt64 5)
       (Cons (BoxedInt64 6)
       (Cons (BoxedInt64 7)
       (Cons (BoxedInt64 8)
       (Cons (BoxedInt64 9)
       Nil))))))))));

  expect_text "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ]";
  print_bil lst;

  expect_text "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ]";
  print_bil_vList (vListOfList lst);

  expect_text "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ]";
  print_bil (listOfVList (vListOfList lst));


  // TODO large VList runtime - why?
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 100    Nil { e => t => Cons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 1000   Nil { e => t => Cons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 10000  Nil { e => t => Cons (BoxedInt32 e) t }; () });
  //
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 100    (mkEmptyVList !) { e => t => vListCons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 1000   (mkEmptyVList !) { e => t => vListCons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 10000  (mkEmptyVList !) { e => t => vListCons (BoxedInt32 e) t }; () });

  // TODO need larger heap to run this test:
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 100000 Nil { e => t => Cons (BoxedInt32 e) t }; () });
};


print_uil = { lst =>
  print_text_bare "[";
  listFoldl lst { i => unit => print_i64_bare (sext_i32_to_i64 i); print_text_bare ", "; () } ();
  print_text "]";
};

print_uil_vList = { v =>
  print_text_bare "[";
  vListFoldl v { i => unit => print_i64_bare (sext_i32_to_i64 i); print_text_bare ", "; () } ();
  print_text "]";
};

test-Int32-vlist = {
  lst =(Cons 0
       (Cons 1
       (Cons 2
       (Cons 3
       (Cons 4
       (Cons 5
       (Cons 6
       (Cons 7
       (Cons 8
       (Cons 9
       Nil))))))))));

  expect_text "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ]";
  print_uil lst;

  expect_text "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ]";
  print_uil_vList (vListOfList lst);

  expect_text "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ]";
  print_uil (listOfVList (vListOfList lst));

  expect_maybe_i32 = { mi =>
    case mi of $None ->   expect_text "<None>";
            of $Some i -> expect_i32 i;
    end
  };
  print_maybe_i32 = { mi =>
    case mi of $None -> print_text "<None>";
            of $Some i -> print_i32 i;
    end
  };

  v = vListOfList lst;
  expect_maybe_i32 (Some 0);
  print_maybe_i32 (vListGet v 0);

  expect_maybe_i32 (Some 1);
  print_maybe_i32 (vListGet v 1);

  expect_maybe_i32 (Some 2);
  print_maybe_i32 (vListGet v 2);

  expect_maybe_i32 (Some 3);
  print_maybe_i32 (vListGet v 3);

  expect_maybe_i32 (Some 4);
  print_maybe_i32 (vListGet v 4);

  expect_maybe_i32 (Some 5);
  print_maybe_i32 (vListGet v 5);

  expect_maybe_i32 (Some 6);
  print_maybe_i32 (vListGet v 6);

  expect_maybe_i32 (Some 7);
  print_maybe_i32 (vListGet v 7);

  expect_maybe_i32 (Some 8);
  print_maybe_i32 (vListGet v 8);

  expect_maybe_i32 (Some 9);
  print_maybe_i32 (vListGet v 9);

  //// TODO large VList runtime - why?
  //print_text "scaling of list operations:";
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 100    Nil { e => t => Cons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 1000   Nil { e => t => Cons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 10000  Nil { e => t => Cons (BoxedInt32 e) t }; () });
  ////print_i64 (elapsed_ticks_n 1 { foldRange 0 100000 Nil { e => t => Cons (BoxedInt32 e) t }; () });
  ////
  //print_text "scaling of VList operations:";
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 100    (mkEmptyVList !) { e => t => vListCons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 1000   (mkEmptyVList !) { e => t => vListCons (BoxedInt32 e) t }; () });
  //print_i64 (elapsed_ticks_n 1 { foldRange 0 10000  (mkEmptyVList !) { e => t => vListCons (BoxedInt32 e) t }; () });
  //
  //// TODO need larger heap to run this test:
  ////print_i64 (elapsed_ticks_n 1 { foldRange 0 100000 Nil { e => t => Cons (BoxedInt32 e) t }; () });
};
