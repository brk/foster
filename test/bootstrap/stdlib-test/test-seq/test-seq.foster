snafuinclude Seq "data/seq";
snafuinclude Prelude "prelude";

print_arri32 = { arr : Array Int32 =>
  print_text_bare "[";
  enumRange32 0 (arrayLength32 arr) { idx =>
    print_i64_bare (arr.[idx] |> zext_i32_to_i64);
    print_text_bare ", ";
    ()
  };
  print_text "]";
};

print_seq :: forall (x:Type) { Seq x => { x => () } => () };
print_seq = { seq => pr =>
  print_text_bare "[";
  ftFoldlTree { x => unit => pr x; print_text_bare ", "; () } (unSeq seq) ();
  print_text "]";
};


print_ftTree_bare :: forall (a:Type) { { a => () } => FingerTree a => () };
print_ftTree_bare = { print_elem_bare => ft =>
  print_text_bare "(FingerTree ";
  case ft
    of $FT_Empty -> ()
    of $FT_Single x -> print_elem_bare x;
    of $FT_Deep sz pr m sf ->
      print_text_bare "(sz=";
      print_i64_bare (zext_i32_to_i64 sz);
      print_text_bare ") ";

      print_ftDigit_bare print_elem_bare pr;
      print_ftTree_bare { node => print_ftNode_bare print_elem_bare node } m;
      print_ftDigit_bare print_elem_bare sf;
  end;
  print_text_bare ")";
  ()
};

print_ftDigit_bare :: forall (a:Type) { { a => () } => FT_Digit a => () };
print_ftDigit_bare = { print_elem_bare => xs =>
  print_text_bare "[";
  case xs
    of $FT_One a         -> print_elem_bare a;
    of $FT_Two a b       -> print_elem_bare a; print_text_bare ","; print_elem_bare b;
    of $FT_Three a b c   -> print_elem_bare a; print_text_bare ","; print_elem_bare b; print_text_bare ","; print_elem_bare c;
    of $FT_Four  a b c d -> print_elem_bare a; print_text_bare ","; print_elem_bare b; print_text_bare ","; print_elem_bare c; print_text_bare ","; print_elem_bare d;
  end;
  print_text_bare "]";
  ()
};


print_ftNode_bare :: forall (a:Type) { { a => () } => FT_Node a => () };
print_ftNode_bare = { print_elem_bare => xs =>
  print_text_bare "{";
  case xs
    of $FT_Node2 v a b   -> print_text_bare "nsz="; print_i64_bare (zext_i32_to_i64 v); print_text_bare ";"; print_elem_bare a; print_text_bare ","; print_elem_bare b;
    of $FT_Node3 v a b c -> print_text_bare "nsz="; print_i64_bare (zext_i32_to_i64 v); print_text_bare ";"; print_elem_bare a; print_text_bare ","; print_elem_bare b; print_text_bare ","; print_elem_bare c;
  end;
  print_text_bare "}";
  ()
};

unSeq = { forall a:Type, seq : Seq a =>
  let ($Seq ft) = seq; ft
};

seqRangeUp = { n =>
  foldRange 0 n (seqEmpty !) { idx => seq => seqPostpend seq idx };
};

seqRangeDown = { n =>
  foldRangeDown (n -Int32 1) 0 (seqEmpty !) seqPrepend;
};

part1 = { 
  s = seqFromFunction 28 { idx => idx };
  expect_i1 True;
  print_i1 (seqContainsAny s { x => x ==Int32 8 });

  expect_i1 False;
  print_i1 (seqContainsAny s { x => x ==Int32 108 });

  s10 = seqFromFunction 5 { idx => (idx *Int32 10) +Int32 5 };
  // s10 == [5, 15, 25, 35, 45]

  expect_i32 0;
  expect_i32 1;
  expect_i32 2;
  expect_i32 3;
  expect_i32 4;
  expect_i32 5;

  print_i32 (seqHighestPositionLT s10  0 cmpSInt32);
  print_i32 (seqHighestPositionLT s10 10 cmpSInt32);
  print_i32 (seqHighestPositionLT s10 20 cmpSInt32);
  print_i32 (seqHighestPositionLT s10 30 cmpSInt32);
  print_i32 (seqHighestPositionLT s10 40 cmpSInt32);
  print_i32 (seqHighestPositionLT s10 50 cmpSInt32);

  expect_i32 0;
  expect_i32 1;
  expect_i32 2;
  expect_i32 3;
  expect_i32 4;
  expect_i32 5;

  print_i32 (seqLowestPositionGT s10  0 cmpSInt32);
  print_i32 (seqLowestPositionGT s10 10 cmpSInt32);
  print_i32 (seqLowestPositionGT s10 20 cmpSInt32);
  print_i32 (seqLowestPositionGT s10 30 cmpSInt32);
  print_i32 (seqLowestPositionGT s10 40 cmpSInt32);
  print_i32 (seqLowestPositionGT s10 50 cmpSInt32);

  srep = seqFromFunction 9 { idx =>
                                    case idx
                                      of 0                -> 1
                                      of 1 or 2           -> 2
                                      of 3 or 4 or 5 or 6 -> 4
                                      of _ -> 6
                                    end };
  // srep == [1, 2, 2, 4, 4, 4, 4, 6, 6]
  expect_i32 0; print_i32 (seqLowestPositionGT srep 0 cmpSInt32);
  expect_i32 1; print_i32 (seqLowestPositionGT srep 1 cmpSInt32);
  expect_i32 3; print_i32 (seqLowestPositionGT srep 2 cmpSInt32);
  expect_i32 3; print_i32 (seqLowestPositionGT srep 3 cmpSInt32);
  expect_i32 7; print_i32 (seqLowestPositionGT srep 4 cmpSInt32);
  expect_i32 7; print_i32 (seqLowestPositionGT srep 5 cmpSInt32);
  expect_i32 9; print_i32 (seqLowestPositionGT srep 6 cmpSInt32);
  expect_i32 9; print_i32 (seqLowestPositionGT srep 7 cmpSInt32);

  expect_i32 0; print_i32 (seqHighestPositionLT srep 0 cmpSInt32);
  expect_i32 0; print_i32 (seqHighestPositionLT srep 1 cmpSInt32);
  expect_i32 1; print_i32 (seqHighestPositionLT srep 2 cmpSInt32);
  expect_i32 3; print_i32 (seqHighestPositionLT srep 3 cmpSInt32);
  expect_i32 3; print_i32 (seqHighestPositionLT srep 4 cmpSInt32);
  expect_i32 7; print_i32 (seqHighestPositionLT srep 5 cmpSInt32);
  expect_i32 7; print_i32 (seqHighestPositionLT srep 6 cmpSInt32);
  expect_i32 9; print_i32 (seqHighestPositionLT srep 7 cmpSInt32);

  expect-pair-eq = { p1 => p2 =>
    let (x, p1b) = p1;
    let (p2a, p2b) = p2;
    expect_i32 p2a; print_i32 x;
    expect_i32 p2b; print_i32 p1b;
  };
  expect-pair-eq (seqSortedRange srep 0 cmpSInt32) (0, 0);
  expect-pair-eq (seqSortedRange srep 1 cmpSInt32) (0, 1);
  expect-pair-eq (seqSortedRange srep 2 cmpSInt32) (1, 3);
  expect-pair-eq (seqSortedRange srep 3 cmpSInt32) (3, 3);
  expect-pair-eq (seqSortedRange srep 4 cmpSInt32) (3, 7);
  expect-pair-eq (seqSortedRange srep 5 cmpSInt32) (7, 7);
  expect-pair-eq (seqSortedRange srep 6 cmpSInt32) (7, 9);
  expect-pair-eq (seqSortedRange srep 7 cmpSInt32) (9, 9);
};

part2 = {
  xs = seqFromFunction 4 { idx => idx +Int32 1 };
  ys = seqPrefixSumFromLeftInclusiveSerial xs { x => y => x +Int32 y };

  expect_text "[1, 2, 3, 4, ]";
  print_seq xs print_i32_bare;

  expect_text "[1, 3, 6, 10, ]";
  print_seq ys print_i32_bare;

  zs = seqPrefixSumFromLeftExclusiveSerial xs { x => y => x +f64 (y |> s32-to-f64) } 0.0;
  expect_text "[1.000000, 3.000000, 6.000000, 10.000000, ]";
  print_seq zs { f => f |> print_f64_bare };
};

main = {
  enumRange32 0 30 { n =>
    expect_i32 n;
    print_i32 (seqLength (seqReplicate32 n ()));
  };

  enumRange32 0 30 { n =>
    arrX = arrayFromRange32 0 n { idx => idx };
    arrY = seqToArray (seqFromFunction n { idx => idx });

    expect_i1 True;
    foldRange 0 n True { idx => b =>
      both b (arrX.[idx] ==Int32 arrY.[idx])
    } |> print_i1;
  };

  part1 !;
  part2 !;

  //seqs = seqChunk (seqFromFunction 28 { idx => idx }) 10; // :: Seq (Seq Int32)
  //print_seq seqs { s : Seq Int32 => print_seq s { x : Int32 => print_i32_bare x; () } };

  //s0 = seqFromFunction 28 { idx => idx };
  //s  = seqWithout s0 { x => x >UInt32 9 };
  //print_seq s { x : Int32 => print_i32_bare x; () };


/*
    arrX = arrayFromRange32 0          28 { idx => idx };
    arrY = seqToArray (seqFromFunction 28 { idx => idx });
    print_arri32 arrX;
    print_arri32 arrY;

    print_ftTree_bare { i => print_i64_bare (zext_i32_to_i64 i); () }
                      (unSeq (seqFromFunction 28 { idx => idx }));
    print_text "";

    print_ftTree_bare { i => print_i64_bare (zext_i32_to_i64 i); () }
                      (unSeq (seqRangeUp 28));
    print_text "";

    print_ftTree_bare { i => print_i64_bare (zext_i32_to_i64 i); () }
                      (unSeq (seqRangeDown 28));
    print_text "";
*/
};
