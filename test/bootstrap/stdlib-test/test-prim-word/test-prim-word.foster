//sdiv-Int32!    = { a : Int32    => b : Int32 => prim sdiv-unsafe-Int32 a b }; // :: Int32

foo :: { % aa : Int32 : True
      => % bb : Int32 : bb >UInt32 0
      => Int32 };
foo =  { a => b => a };

main = { print_i32 (foo 0 1); };

/*
(==WordX2) :: { % aa : WordX2 : True
             => % bb : WordX2 : True
             => % rv : Bool : prim ==Bool rv (prim ==WordX2 aa bb) };

(==WordX2)           = { a : WordX2   => b : WordX2   => prim ==WordX2 a b       }; // :: Bool

sdiv-WordX2 = { ax : WordX2 => bx : WordX2 => z = bx ==WordX2 0; if z then prim kill-entire-process "sdiv-WordX2 failed" else prim sdiv-unsafe-WordX2 ax bx end  };


//snafuinclude PreludeFixnums "prelude-fixnums";
//snafuinclude Primitives "primitives";
main = {
  expect_i32 2;
  print_i32 (sdiv-WordX2 8 4);
};
*/


/*snafuinclude Prelude "prelude";

// Types: Word, Word*2, Word/2
//              WordX2  WordO2 (at C level)
//

// zext i32 to Word (or noop)
// trunc Word to i32 (or noop)

// Complication 1: type checking (of literal numbers for conformance against
//                 word types) depends on the eventual size of Word.
//      * Could thread that state through
//      * Could eliminate the Word alias early on
//      * Could be conservative and reject 64-bit literals even on 64-bit platforms.
//      * Could keep Word as a separate abstract type & forbid literals;
//          only allow conversions from explicitly typed/sized literals.

// Complication 2: where do we fix the sizes of words?
//      * Type checking: lose portability of typechecked code.
//      * Later: typechecking can't do all checks!

main = {
  t1 !;
};

t1 = {
  expect_i32 22222;
  print_i32 (trunc_WordX2_to_i32
                ((zext_i32_to_WordX2 (opaquely_i32 11111)) +WordX2
                 (zext_i32_to_WordX2 11111)));

  expect_i32 0;
  print_i32 (trunc_WordX2_to_i32
                ((zext_i32_to_WordX2 (opaquely_i32 11111)) -WordX2
                 (zext_i32_to_WordX2 11111)));

  expect_i32 22222;
  print_i32 (trunc_WordX2_to_i32
                ((zext_i32_to_WordX2 (opaquely_i32 11111)) *WordX2
                 (zext_i32_to_WordX2 2)));

  expect_i32 11111;
  print_i32 (trunc_WordX2_to_i32
                ((zext_i32_to_WordX2 (opaquely_i32 22222)) `sdiv-WordX2`
                 (zext_i32_to_WordX2 2)));
};

// compilation-only test
c2 = {
  if 16 ==Word (zext_i32_to_Word 0)
      then 32
      else 64
  end
};

c3 = { w : Word =>
  case w
    of 1 -> 0
    of _ -> 1
  end
};
*/
