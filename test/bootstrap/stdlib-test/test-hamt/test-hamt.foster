snafuinclude QpTrie "data/qp-trie";

snafuinclude Prelude "prelude";

snafuinclude SFC64 "prng/sfc";
snafuinclude RandomGen "random/gen";
snafuinclude QC "random/quickcheck";

main = {
  test-sparsearray !;

  testQPTrie32_1 !;
  test-QPTrie32_2 !;
  test-QPTrie32_3 !;
  test-QPTrie32_4 !;

  expect_text "canonical versions:";
  print_text "canonical versions:";
  test-QPTrie32_5 !;
  test-QPTrie32_6 !;

  test-QPTrie32_7 !;
  test-QPTrie32_8 !;

  quickcheck-QPTrie !;
};

test-sparsearray = {
  sa0 = sparseArrayEmpty !;
  sa1 = sparseArrayInsert sa0 0 0;
  sa2 = sparseArrayInsert sa1 1 1;
  sa3 = sparseArrayInsert sa2 2 2;

  sa3b = sparseArrayInsert sa3 3 2;

  expect_i32 0;
  print_i32 (unMaybe (sparseArrayLookup sa1 0));

  expect_i32 0;
  print_i32 (unMaybe (sparseArrayLookup sa2 0));

  expect_i32 0;
  print_i32 (unMaybe (sparseArrayLookup sa3 0));

  expect_i32 1;
  print_i32 (unMaybe (sparseArrayLookup sa3 1));

  expect_i32 2;
  print_i32 (unMaybe (sparseArrayLookup sa3 2));

  expect_i32 3;
  print_i32 (unMaybe (sparseArrayLookup sa3b 2));

  expect_i1 True;
  print_i1 (isNone (sparseArrayLookup sa3 4));

  expect_i1 True;
  print_i1 (isNone (sparseArrayLookup sa0 0));

  expect_i1 True;
  print_i1 (isNone (sparseArrayLookup sa1 1));

};



testQPTrie32_1 = {
    REC goX = { qp => acc =>
        case qp
            of $QPTrie32Leaf k2     -> Cons k2 acc
            of $QPTrie32Branch sa _ -> sparseArrayFoldl sa goX acc
        end
    };

    leaf1 = QPTrie32Leaf 0x`ABAB;
    lst = goX leaf1 Nil;
    ()
};


test-QPTrie32_2 = {
    leaf1 = QPTrie32Leaf 0x`ABAB;
    leaf2 = QPTrie32Leaf 0x`5BAB;
    leaf3 = QPTrie32Leaf 0x`CAFE;

    saA = sparseArrayEmpty !
       |> { sa => sparseArrayInsert sa leaf1 0xA }
       |> { sa => sparseArrayInsert sa leaf2 0x5 };
    qpA = QPTrie32Branch saA (3 *Int8 4);

    sa0 = sparseArrayEmpty !
       |> { sa => sparseArrayInsert sa leaf3 0xE }
       |> { sa => sparseArrayInsert sa qpA   0xB };
    qp = QPTrie32Branch sa0 0;

    lst = qpTrie32ToList qp;
    expect_text "[0000cafe, 0000abab, 00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 lst);
};

test-QPTrie32_3 = {
    qp0 = qpTrie32Empty !;
    qp1 = qpTrie32InsertQuestionable qp0 0x`ABAB;
    qp2 = qpTrie32InsertQuestionable qp1 0x`5BAB;
    qp3 = qpTrie32InsertQuestionable qp2 0x`AAFE;
    qp4 = qpTrie32InsertQuestionable qp3 0x`AAF9;

    expect_text "[]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp0));

    expect_text "[0000abab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp1));

    expect_text "[0000abab, 00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp2));

    expect_text "[0000aafe, 0000abab, 00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp3));

    expect_text "[0000aafe, 0000abab, 0000aaf9, 00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp4));
};

test-QPTrie32_4 = {
    qp0 = qpTrie32Empty !;
    qp1 = qpTrie32InsertQuestionable qp0 0x`5BAB;
    qp2 = qpTrie32InsertQuestionable qp1 0x`AAF9;
    qp3 = qpTrie32InsertQuestionable qp2 0x`ABAB;
    qp4 = qpTrie32InsertQuestionable qp3 0x`AAFE;

    expect_text "[]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp0));

    expect_text "[00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp1));

    expect_text "[00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp2));

    expect_text "[0000abab, 00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp3));

    expect_text "[0000aafe, 0000abab, 00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp4));
};

test-QPTrie32_5 = {
    qp0 = qpTrie32Empty !;
    qp1 = qpTrie32InsertCanonical qp0 0x`ABAB;
    qp2 = qpTrie32InsertCanonical qp1 0x`5BAB;
    qp3 = qpTrie32InsertCanonical qp2 0x`AAFE;
    qp4 = qpTrie32InsertCanonical qp3 0x`AAF9;

    expect_text "[]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp0));

    expect_text "[0000abab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp1));

    expect_text "[0000abab, 00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp2));

    expect_text "[0000aafe, 0000abab, 00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp3));

    expect_text "[0000aafe, 0000abab, 00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp4));
};

test-QPTrie32_6 = {
    qp0 = qpTrie32Empty !;
    qp1 = qpTrie32InsertCanonical qp0 0x`5BAB;
    qp2 = qpTrie32InsertCanonical qp1 0x`AAF9;
    qp3 = qpTrie32InsertCanonical qp2 0x`ABAB;
    qp4 = qpTrie32InsertCanonical qp3 0x`AAFE;

    expect_text "[]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp0));

    expect_text "[00005bab]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp1));

    expect_text "[00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp2));

    expect_text "[0000abab, 00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp3));

    expect_text "[0000aafe, 0000abab, 00005bab, 0000aaf9]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp4));
};

test-QPTrie32_7 = {
    qp0 = qpTrie32Empty !;
    qp1 = qpTrie32InsertQuestionable qp0 0x`0100;
    qp2 = qpTrie32InsertQuestionable qp1 0x`F100;
    qp3 = qpTrie32InsertQuestionable qp2 0x`010A;

    expect_text "[]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp0));

    expect_text "[00000100]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp1));

    expect_text "[0000f100, 00000100]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp2));

    expect_text "[0000f100, 0000010a, 00000100]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp3));

    //print_text (qpTrie32Show qp2 tmp_Text_16_of_UInt32);
    //print_text (qpTrie32Show qp3 tmp_Text_16_of_UInt32);

    expect_i1 True;
    print_i1 (qpTrie32Contains qp3 0x010A);
    expect_i1 True;
    print_i1 (qpTrie32Contains qp3 0x0100);
    expect_i1 True;
    print_i1 (qpTrie32Contains qp3 0xF100);
};

test-QPTrie32_8 = {
    qp0 = qpTrie32Empty !;
    qp1 = qpTrie32InsertCanonical qp0 0x`0100;
    qp2 = qpTrie32InsertCanonical qp1 0x`F100;
    qp3 = qpTrie32InsertCanonical qp2 0x`010A;

    expect_text "[]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp0));

    expect_text "[00000100]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp1));

    expect_text "[0000f100, 00000100]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp2));

    expect_text "[0000010a, 0000f100, 00000100]";
    print_text (listShow tmp_Text_16_of_UInt32 (qpTrie32ToList qp3));

    //print_text (qpTrie32Show qp3 tmp_Text_16_of_UInt32);

    expect_i1 True;
    print_i1 (qpTrie32Contains qp3 0x010A);
    expect_i1 True;
    print_i1 (qpTrie32Contains qp3 0x0100);
    expect_i1 True;
    print_i1 (qpTrie32Contains qp3 0xF100);
};

show_Int32 = { x : Int32 => tmp_Text_of_Int32 x };

show_List :: forall (t:Type) { { t => Text } => { List t => Text } };
show_List = { show_elt =>
  { lst =>
    elts = listFoldl lst { x => acc => show_elt x ++Text ", " ++Text acc } "";
    "[" ++Text elts ++Text "]"
  }
};

quickcheck-QPTrie = {
  expect_text "quickchecking...";
  print_text  "quickchecking...";

  prng64 = sfc64HOF 33223;
  prng32 = { prng64 ! |> high32BitsOf64 };

  arbListOfInt  = arb_List prng32 (arb_Int32 prng32);
  showListOfInt = show_List show_Int32;
  testable_list_to_bool = testableFunc arbListOfInt showListOfInt testableBool;

  expect_text "prop_QPTrie_C_ContainsEach OK";
  case quickCheck prng32 testable_list_to_bool
                  prop_QPTrie_C_ContainsEach
    of $QCTR_Success     -> print_text "prop_QPTrie_C_ContainsEach OK"
    of $QCTR_Failure _ q -> print_text "prop_QPTrie_C_ContainsEach failed";
                            _ = listMap print_text q;
                            ()
    of $QCTR_Exhausted _ -> print_text "prop_QPTrie_C_ContainsEach exhausted"
  end;


  expect_text "prop_QPTrie_Q_ContainsEach OK";
  case quickCheck prng32 testable_list_to_bool
                  prop_QPTrie_Q_ContainsEach
    of $QCTR_Success     -> print_text "prop_QPTrie_Q_ContainsEach OK"
    of $QCTR_Failure _ q -> print_text "prop_QPTrie_Q_ContainsEach failed";
                            _ = listMap print_text q;
                            ()
    of $QCTR_Exhausted _ -> print_text "prop_QPTrie_Q_ContainsEach exhausted"
  end;
};

prop_QPTrie_C_ContainsEach :: { List Int32 => Bool };
prop_QPTrie_C_ContainsEach = { ints =>
  trie = listFoldl ints { i => t => qpTrie32InsertCanonical t i } (qpTrie32Empty !);
  listFoldl ints { i => b => { b } `andand` { qpTrie32Contains trie i } } True
};

prop_QPTrie_Q_ContainsEach :: { List Int32 => Bool };
prop_QPTrie_Q_ContainsEach = { ints =>
  trie = listFoldl ints { i => t => qpTrie32InsertQuestionable t i } (qpTrie32Empty !);
  listFoldl ints { i => b => { b } `andand` { qpTrie32Contains trie i } } True
};


prop_QPTrie_CQ_Equiv_WRONG :: { List Int32 => Bool };
prop_QPTrie_CQ_Equiv_WRONG = { ints =>
  trieC = listFoldl ints { i => t => qpTrie32InsertCanonical t i } (qpTrie32Empty !);
  trieQ = listFoldl ints { i => t => qpTrie32InsertQuestionable t i } (qpTrie32Empty !);
  listEqual { x => y => x ==Int32 y } (qpTrie32ToList trieC) (qpTrie32ToList trieQ)
};
