snafuinclude Text "text";

main = {
  expect_i1 True;
  print_i1 (prim __COMPILES__ (checkIO fnPure));

  expect_i1 False;
  print_i1 (prim __COMPILES__ (checkPure fnIO));

  //checkIOorNet fnIO; // OK
  //checkIOorNet fnIOandNet; // OK
  //checkIOorNet fnIOandNetAndConsole; // Not OK

  test-first-order-closed !;
  test-first-order-open   !;
  test-higher-order !;
  ()
};

type case Net of $Net;
type case Console of $Console;

test-first-order-closed = {
  expect_i1 False;
  print_i1 (prim __COMPILES__ {
	  chk : { { () @(Console)     } => () } =>
	  f1  :   { () @(Net,Console) }         =>
	  chk f1;
	});

  expect_i1 True;
  print_i1 (prim __COMPILES__ {
	  chk : { { () @(Console,Net) } => () } =>
	  f2 :    { () @(Net,Console) }         =>
	  chk f2;
	});

  expect_i1 True;
  print_i1 (prim __COMPILES__ {
	  chk : { { () @(Console,Net) } => () } =>
	  f3 :    { () @(Console)     }         =>
	  chk f3;
	});
};

// does chk : {                   { () @(Console | b)     } => () }
// mean chk : { forall (b:Effect) { () @(Console | b)     } => () }
//   or chk : forall (b:Effect) { { () @(Console | b)     } => () }
// ?

test-first-order-open = {
  print_text  "11111";
  expect_text "11111";

  expect_i1 True;
  print_i1 (prim __COMPILES__ {
	  chk : forall (b:Effect) { { () @(Console | b)     } => () } =>
	  f1  :   forall (a:Effect) { () @(Net,Console | a) }         =>
	  chk f1;
	});

  expect_i1 False;
  print_i1 (prim __COMPILES__ {
	  chk : { forall (b:Effect) { () @(Console | b)     } => () } =>
	  f1  :   forall (a:Effect) { () @(Net,Console | a) }         =>
	  chk f1;
	});

  expect_i1 True;
  print_i1 (prim __COMPILES__ {
	  chk : forall (b:Effect) { { () @(Console,Net | b) } => () } =>
	  f2 :  forall (a:Effect)   { () @(Net,Console | a) }         =>
	  chk f2;
	});

  expect_i1 True;
  print_i1 (prim __COMPILES__ {
	  chk : forall (b:Effect) { { () @(Console,Net | b) } => () } =>
	  f3 :  forall (a:Effect)   { () @(Console | a)     }         =>
	  chk f3;
	});
};

test-higher-order = {
  expect_i1 True;
  print_i1 (prim __COMPILES__ {
      chk : { { { () @(Console)     } => () } => () } =>
      f4 :    { { () @(Net,Console) } => () }         =>
      chk f4;
    });

  expect_i1 True;
  print_i1 (prim __COMPILES__ {
      chk : { { { () @(Console,Net) } => () } => () } =>
      f5 :    { { () @(Net,Console) } => () }         =>
      chk f5;
    });

  expect_i1 False;
  print_i1 (prim __COMPILES__ {
      chk : { { { () @(Console,Net) } => () } => () } =>
      f6 :    { { () @(Console)     } => () }         =>
      chk f6;
    });
};

checkNone :: { { Int32 } => () };
checkNone = { f => () };

checkPure :: { { Int32 @() } => () @() };
checkPure = { f => () };

checkIO :: { { Int32 @IO } => () @() };
checkIO = { f => () };

checkIOorNet :: { { Int32 @(IO, Net) } => () @() };
checkIOorNet = { f => () };

fnPure :: { Int32 @() };
fnPure = { 0 };

fnIO :: { Int32 @IO };
fnIO = { 0 };

fnIOandNet :: { Int32 @(IO, Net) };
fnIOandNet = { 0 };

fnIOandNetAndConsole :: { Int32 @(IO, Net, Console) };
fnIOandNetAndConsole = { 0 };

/*
fnC :: forall (a:Effect) { Int32 @(IO | a) };
//fnC :: { Int32 @(IO | a)  };
fnC = { 0 };


fnD :: { Int32 @(IO, Yield Int32, Div | a) };
fnD = { 0 };
*/

/*
fnE :: { Int32 @(IO, ST h, Div, - GC | a) };
fnE = { 0 };

fnF :: { Int32 @(IO | ) };
fnF = { 0 };

fnG :: { Int32 @(IO |) };
fnG = { 0 };

fnH :: { Int32 @(IO|) };
fnH = { 0 };

fnI :: { Int32 => Int32 @(IO|) };
fnI = { x => 0 };
*/

