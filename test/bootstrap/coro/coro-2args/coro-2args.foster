// IN: 2 3 5 8 13

// coro_wrap = forall a b,
//             fn (f : fn(arg : a to b)) {
//               let c = coro_create(f) in {
//                 fn (arg : a) { coro_invoke(c, a) }
//               }
//             }


main = fn () {
  expect_i32(30)
  expect_i32(120)

  let co = coro_create_i32x2_i32( fn(x : i32, y : i32) {
                           let a : tuple {i32, i32} = coro_yield_i32x2_i32(x + y)
                           let b : tuple {i32, i32} = coro_yield_i32x2_i32(a[0] + 20) in {
                            print_i32(111111)
                             12345
                           }
                         }) in {
     let x : i32 = coro_invoke_i32x2_i32(co, 10, 20) in {
         let y : i32 = coro_invoke_i32x2_i32(co, 100, 200) in {
           print_i32(x)
           print_i32(y)
           0
         }
     }
  }
  0
}
