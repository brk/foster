// IN: 2 3 5 8 13

// coro_wrap = forall a b,
//             fn (f : fn(arg : a to b)) {
//               let c = coro_create(f) in {
//                 fn (arg : a) { coro_invoke(c, a) }
//               }
//             }

main = {
  expect_i32 1111111;
  expect_i32 2222222;
  expect_i32 4444444;
  expect_i32 10;
  expect_i32 6666;
  expect_i32 1234;
  expect_i32 20;
  expect_i32 5555555;
  expect_i32 6666666;
  expect_i32 7777;
  expect_i32 3333333;
  expect_i32 9999999;

  print_i32 1111111;
  let co = coro_create  { x : i32 =>
                          print_i32 4444444;
                          //force_gc_for_debugging_purposes ();
                          print_i32 x; // 10
                          let y = coro_yield:[i32,i32] 6666;
                            in {
                              //force_gc_for_debugging_purposes();
                              coro_yield:[i32,i32] y;
                              print_i32 5555555;
                             // force_gc_for_debugging_purposes();
                              print_i32 6666666;
                              coro_yield:[i32,i32] 7777;
                              9999
                            }()
                          end;
                   };
      //j0 = force_gc_for_debugging_purposes();
      r  = (ref 0);
  in
      print_i32 2222222;
    force_gc_for_debugging_purposes();
      print_i32 (coro_invoke co 10); // 6666
      print_i32 1234;
    force_gc_for_debugging_purposes();
      print_i32 (coro_invoke co 20); // 20
    force_gc_for_debugging_purposes();
      print_i32 (coro_invoke co 30);
      print_i32 3333333;
      print_i32 9999999;
  end
};

