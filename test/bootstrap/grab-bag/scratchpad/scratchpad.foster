snafuinclude Text "text";


effect YldA (a:Type)
  of $YldA a => (Int32, Int32)
  ;

// do_YldA :: forall (a:Type) { a => (Int32, Int32) };

effect YldB (a:Type)
  of $YldB a => (Int32, Int32)
  ;


//fst = { p => case p of (a, b) -> a end };

main = {
  hr = noinline_llvm_handling !;
  print_i32 88;
  print_text hr;
  ()
};


yieldingAB :: { Int8 => Text @(YldA Int32, YldB Int32) };
yieldingAB = { inp : Int8 =>
  print_text "first yield about to happen";
  print_i8 inp;
  x01 = do_YldA 0x12;

  print_text "resumed after first yield; second yield about to happen";
  x23 = do_YldB 0x34;
  // If we had ``do_Ylded 3.2`` would we get @(Yld Text, Yld Float64)
  // or would we get a type conflict between Text and Float64?
  
  "44"
};

sequ :: forall (e:Effect) { { () @e } => { () @e } => () @e };
sequ = { a => b => a ! ; b ! };


//noinline_llvm_handling :: { () @() };    // correctly induces an effect type violation.
//noinline_llvm_handling :: { () };        // defaults to flexible effect inference when no explicit annotation.
//noinline_llvm_handling :: forall (e:Effect) { () @(YldA Int32,YldB Int32,e) };        // fails because e is not a constant effect label
//noinline_llvm_handling :: forall (e:Effect) { () @(YldA Int32,YldB Int32|e) };        // fails with (spurious?) error: 'e must be effect.Empty
                              // I think the error is spurious due to unification/subsumption confusion.
noinline_llvm_handling = {
  /*
      txt = handle   (yieldingAB 99)
        of $YldA x -> print_text_bare "yldA: "; print_i32x x; "ylded"
        as { fin => print_text_bare "fin: "; print_text fin; fin } // not triggered because we don't resume
      end;

      txt
      */


  withAHandled = {
      handle   (yieldingAB 99)
        of $YldA x -> print_text_bare "yldA: "; print_i32 x; resume (12,34)  //"43"
        //as { final => print_text_bare "final: "; print_text final; final }
      end
  };

  resB = handle (withAHandled !)
           of $YldB x -> print_text_bare "yldB: "; print_i32 x; resume (45, 67)
           as { retn => print_text_bare "retnB: "; print_text retn; retn }
         end;
  
  print_text "done handling";
  resB
};

/*
contin_create :: { () => r @ e } => Contin r e
contin_invoke :: Contin r e => Either e r
  Run the contin to get either a requested effect,
  or the final return value.

There is an implicit contin for the main function.

Input arguments can be done by associating a ref cell
with a contin.

Each contin points to the one that *originally* invoked it,
thus forming a cactus stack. These links serve two purposes:
first, they identify the flow of return values when a contin
finishes executing, and second,
they identify the proper scoping for handlers.


*/

/*
do_Ylded :: forall (a:Type) { a => Int32 };
do_Ylded = { a =>
  coro = search_handlers Tag_Ylded_a;
  // The implementation of search_handlers uses Tag_Ylded
  // to find a coro of the appropriate type.
  coro_yield_to coro (Ylded a)

  // If we return at all, the return value will be
  // the argument passed in to the resume function
  // by the handler.
}




handle E of
  Op1 -> 42
  Op2 -> resume 42
  Op3 -> before; resume; after
  Op4 -> print 1; resume 1; print 2; resume 2; print 3
  Op5 -> save resume;
(as xform)
  ===>
    // note: unboxed types implies
    // code duplication of the go function...
REC go = { coro => arg : GenericPointer =>
  resume_bare = { arg => coro_invoke coro effectTagForOps arg };
  resume = { arg => go coro arg };
  yielded = coro_invoke coro effectTagForOps arg;
  if coro_dead coro
    then yielded (|> xform)
    else
      case yielded of
        Op1 -> 42
        Op2 -> resume 42 ((after inlining ===> go coro 42))
                 // resume arg type must be boxed
        Op3 -> before; resume; after
        Op4 -> print 1; resume 1; print 2; resume 2; print 3
        Op5 -> save resume;
        other -> coro = search_handlers (effect_tag_of other);
                 coro_yield a;
      end;
  end
  
};

thunk = E;
// We need to properly deal with code like
//    handle resume ! of ...
// in which the action already contains a
// HMM okay this is trickier than I first thought.
go (case try_extract_coro thunk
      of $None -> coro_create thunk
      of $Some coro -> coro
    end) ();
*/

/*
main = {
  // Creating a zero-input thunk around a function that takes input...
  // (yielding 42) ::        ()         @(Yld Text|e1)
  // yielding_transform :: { () => Bool @(Yld Text|e2) }   (= { unit => do_Yield "baz"; True })
  // unhandled_tranform :: { Bool => X  @e3 }              (= { bool => X })
  result = handle { yeilding 42 |> yielding_transform }
           of Yield txt -> print_text txt; resume 0
           as { x => x |> unhandled_transform };
  // result :: X @(e1,e2,e3)
  // output: foo\nbar\nbaz


  // For a scheduler, we must be able to get our hands on a first-class "resume" function.
};
*/

/*
type case CoroResult (a:Type) (b:Type)
  of $CoroYielded a
  of $CoroReturned b
  ;

main = {
  expect_i8 42;
  llvm_noinline_foo (CoroYielded 42);


  expect_i64 420;
  llvm_noinline_foo (CoroReturned 420);

};

llvm_noinline_foo = { cr : CoroResult# Int8 Int64 =>
  case cr
    of $CoroYielded sm -> print_i8 sm
    of $CoroReturned lg -> print_i64 lg
  end
};

*/

/*
main = {
  //itr { itr { print_i32 0 } 2 } 3;
  itr { expect_i32 0; print_i32 0 } 3;
  let (a, b) = (1, 2);
  print_i32 a;
  expect_i32 1;
  print_i32 b;
  expect_i32 2;
  ()
};

itr = { f => n =>
  if n ==Int32 0 then ()
                 else f ! ; itr f (n -Int32 1) end
};
*/

/*
main = {
  //aaaaaaaaa "1"

  REC repeat = { n : Int32 => f : { () } =>
    if n >SInt32 0 then f !; repeat (n -Int32 1) f else () end
  };
  repeat (opaquely_i32 5) { print_i32 6 };


};
*/


/*
snafuinclude Prelude "prelude";
main = {
  a = allocDArray:[Int32] 8;
  arrayEnumFrom a 0 { v => i => print_i64 i };
};

noinline_use = { v => (); }

digitNumBits :: { Int32 };
digitNumBits = { wordNumBits32 !  -Int32 4 };

digitNumBitsWord :: { Word };
digitNumBitsWord = { zext_i32_to_Word (digitNumBits !) };

digitNumBitsMask :: { Word };
digitNumBitsMask = {
  (bitshl-Word 1 (zext_i32_to_Word (digitNumBits !))
         -Word 1)
};
addCarryOfWord :: { Word => Word };
addCarryOfWord = { n =>
  bitlshr-Word n (sext_i32_to_Word (digitNumBits !));
  // shift right (>>) by 60 for word size of i64
};

// Postcondition: returned array is normalized.
//
foster_nat_add_digits :: { Array Word => Array Word => Array Word };
foster_nat_add_digits = { a => b =>
  case
    if (arrayLength32 a) <SInt32 (arrayLength32 b)
      then (a, b)
      else (b, a)
    end
  of (sm, lg) ->

    c = allocDArray:[Word] (arrayLength32 lg +Int32 1);
    u = foldRange 0 (arrayLength32 sm) 0 { i => u =>
        ci = (a[i] +Word b[i] +Word u);
        unext = addCarryOfWord ci;
        (bitand-Word ci (digitNumBitsMask !)) >^ c[i];
        unext
      };
    p = if arrayLength32 sm <SInt32 arrayLength32 lg
          then
            foldRange (arrayLength32 sm) (arrayLength32 lg) u { i => u =>
              (lg[i] +Word u) >^ c[i];
              unext = addCarryOfWord c[i];
              (bitand-Word c[i] (digitNumBitsMask !)) >^ c[i];
              unext
            }
          else
            u
        end;

    p >^ c[arrayLength32 lg];

    // The C version clears digits from used to olduse,
    // but we don't need to because we allocate from scratch.

    trimLeadingZeroWords c
  end
};

trimLeadingZeroWords :: { Array Word => Array Word };
trimLeadingZeroWords = { a =>
  REC findFirstNonZero = { n : Int32 =>
     if n ==Int32 0 // or a[n] !=Int64 0
       then n
       else if a[n] !=Word 0
              then n
              else findFirstNonZero (n -Int32 1)
            end
     end
  };
  start = arrayLength32 a -Int32 1;
  n     = findFirstNonZero start;

  if n ==Int32 start
    then a
    else copyOfArrayTo a (n +Int32 1)
  end
};
*/

/*
aaaaaaaaa = { t:Text =>
  bbbbbbbbb t
};

bbbbbbbbb = { t:Text =>
  noinline_f = { () };
  REC ccccc = { x =>
      case t
        of $TextFragment a n     -> noinline_f !; ()
        of $TextConcat   s1 s2 n ->
            bbbbbbbbb s2 ; noinline_f !; ccccc s1
      end
  };
  ccccc t;
};
*/

/*
type case List (a:Boxed)
  of $Nil
  of $Cons a (List a)
;

listLength = { forall t:Boxed, xs : List t =>
  case xs
    of $Nil -> 0
    //of $Cons _ ys -> 1 +Int32 (listLength:[t] ys) // should work but doesn't
    //of $Cons _ ys -> 1 +Int32 (listLength ys) // unable to find kind of 'a
    of $Cons _ _ -> 1 // unable to find kind of 'a
   end;
};

main = { 0 };
*/

/*
main = { 0 };

type case ST (s:Boxed) (a:Boxed)
  of $ST
;

type case STRef (s:Boxed) (a:Boxed)
  of $STRef
;
*/

//runST :: ;
//runST = {forall va, f : forall vs { vs => va } => ??? };

//

// should fail, but doesn't.
/*
test-real-example-0 = {
  let f = {
        runST  : forall a:Boxed, { (forall s:Boxed, ST s a) => a } =>
        newRef : forall v:Boxed, { v => forall n:Boxed, ST n (STRef n v) } =>
      runST:[?? A] (newRef:[Text] "hmm")
      // (newRef:[Text] "hmm") ::    forall n:Boxed, ST n (STRef n Text)
      // runST:[?? A]          :: { (forall s:Boxed, ST s (?? A)) => (?? A) }
      // runST:[?? A] (newRef:[Text] "hmm") :: (STRef ?n? Text) -- illegal escaping tyvar!
    }; in
  ()
  end
};
*/

/*
// fails for the wrong reason
test-real-example-1 = {
  let f = {
        runST  : forall a:Boxed, { (forall s:Boxed, ST s a) => a } =>
        newRef : forall v:Boxed, { v => forall n:Boxed, ST n (STRef n v) } =>
      runST (newRef:[Text] "hmm")
      // (newRef:[Text] "hmm") ::    forall n:Boxed, ST n (STRef n Text)
      // runST:[?? A]          :: { (forall s:Boxed, ST s (?? A)) => (?? A) }
      // runST:[?? A] (newRef:[Text] "hmm") :: (STRef ?n? Text) -- illegal escaping tyvar!
    }; in
  ()
  end
};
*/


/*
test-fake-example = {
  let f = {
        runST  : { (forall s:Boxed, ST s Text) => Text } =>
        newRef : { Text => forall n:Boxed, ST n Text } =>
      runST (newRef "hmm")
    }; in
  ()
  end
};
*/
/*
test-faker-example = {
  let f = {
        runST  : { ST Int32 (STRef Int32 Text) => Text }        =>
        newRef : { Text => ST Int32 (STRef Int32 Text) }        =>
      runST (newRef "hmm")
    }; in
  ()
  end
};
*/

//f :: forall (xt : Boxed)  { xt => Int32 };
//f = { forall (x : Boxed) v : x => 0 };

//g0 :: forall (gt : Boxed) { gt => forall ft : Boxed, { ft => Int32 } };
// without annotation, typechecks but tries to return a proc instead of a func TODO fix this
//g0 = { forall t : Boxed, v : t => f };

//g1 :: forall (gt : Boxed) { gt => { gt => Int32 } };
// Without an annotation, we fail on g1 because its scheme is inferred to be
//     forall t : Boxed,   { t => ?? R };
// and the expression's actual type is as above.
// Thus the above type scheme gets skolemized to { $t => ?? R }
// and the expression's type is instantiated to { T => { T => Int32 } }
// and the two types unify, binding ?? R = { $t => Int32 }.
// This is considered an illegal escape of the skolemized type variable $t.
//g1 = { forall t : Boxed, v : t => f:[t] };

// OK:
//g2 :: forall (gt : Boxed) { gt => Int32 };
//g2 = { forall t : Boxed, v : t => f v };

// OK:
//g3 :: forall (gt : Boxed) { gt => Int32 };
//g3 = { forall t : Boxed, v : t => f:[t] v };

/*
type case List (a:Boxed)
  of $Nil
  of $Cons a (List a)
;

listLength = { forall t:Boxed, xs : List t =>
  case xs
    of $Nil -> 0
    of $Cons _ ys -> 1 +Int32 (listLength:[t] ys) // should work but doesn't
   end;
};
*/
