main = {
  ()
};

x_top1 :: forall (a:Boxed) { a => { a } };
x_top1 = { x => { x } };

x_top3 :: forall (a:Boxed) { a => { a } };
x_top3 = { x => ( { x } as { a }) };

foo_nested = {
  REC foo = { forall a:Type,
              v : a =>
              x : Int32 =>
              takes : { (a, a) => () } =>

                if x ==Int32 42
                  then rc = foo:[(a,a)] (v,v) 0 { pp => () };
                       takes rc;
                       (v, v)
                  else (v, v)
                end
            };
  (foo:[Int32] 0 0 { p => () } as (Int32, Int32))
};

/*
triv :: forall (b:Boxed) { b => Int32 };
triv =  { forall t:Boxed, v : t => 0     };

pid :: forall (ba:Boxed) { ba => ba };
pid =  { forall bd:Boxed, v:bd => v};

poly :: forall (t:Type) { Array t => Int32 };
poly  = { forall a:Type, x : Array a => 0 };
*/

//poly2a :: { { Int32 => Int32 } => Int32 };
//poly2a = { tmp => 0 };


// Make sure we don't get this error:
//
// Typecheck error:
// subsCheck(tcSigmaFn): Type
// (forall ('a :: Boxed). ([(~(R)!1:.inferred.)] => Int32 @{FT_Proc})) not as polymorphic as
// (forall ('b :: Boxed). ([(['b] => Int32 @{FT_Func})] => Int32 @{FT_Proc}))
// bad type variables: [$b.4::KindPointerSized]

poly2b :: forall (b:Boxed) { { b => Int32 } => Int32 };
poly2b = { forall a:Boxed, tmp => 0 };
